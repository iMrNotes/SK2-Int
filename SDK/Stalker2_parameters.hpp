#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Stalker2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Stalker2_structs.hpp"
#include "InputCore_structs.hpp"
#include "Niagara_structs.hpp"
#include "CinematicKeyFrameTracks_structs.hpp"


namespace SDK::Params
{

// Function Stalker2.InteractionComponent.SetInteractionActive
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_SetInteractionActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetInteractionActive) == 0x000001, "Wrong alignment on InteractionComponent_SetInteractionActive");
static_assert(sizeof(InteractionComponent_SetInteractionActive) == 0x000001, "Wrong size on InteractionComponent_SetInteractionActive");
static_assert(offsetof(InteractionComponent_SetInteractionActive, bActive) == 0x000000, "Member 'InteractionComponent_SetInteractionActive::bActive' has a wrong offset!");

// Function Stalker2.InteractionComponent.SetInteractionDistance
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_SetInteractionDistance final
{
public:
	float                                         MinDistance;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetInteractionDistance) == 0x000004, "Wrong alignment on InteractionComponent_SetInteractionDistance");
static_assert(sizeof(InteractionComponent_SetInteractionDistance) == 0x000008, "Wrong size on InteractionComponent_SetInteractionDistance");
static_assert(offsetof(InteractionComponent_SetInteractionDistance, MinDistance) == 0x000000, "Member 'InteractionComponent_SetInteractionDistance::MinDistance' has a wrong offset!");
static_assert(offsetof(InteractionComponent_SetInteractionDistance, MaxDistance) == 0x000004, "Member 'InteractionComponent_SetInteractionDistance::MaxDistance' has a wrong offset!");

// Function Stalker2.InteractionComponent.SetSelfActivating
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_SetSelfActivating final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetSelfActivating) == 0x000001, "Wrong alignment on InteractionComponent_SetSelfActivating");
static_assert(sizeof(InteractionComponent_SetSelfActivating) == 0x000001, "Wrong size on InteractionComponent_SetSelfActivating");
static_assert(offsetof(InteractionComponent_SetSelfActivating, bNewValue) == 0x000000, "Member 'InteractionComponent_SetSelfActivating::bNewValue' has a wrong offset!");

// Function Stalker2.InteractionComponent.SetShowInactive
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_SetShowInactive final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetShowInactive) == 0x000001, "Wrong alignment on InteractionComponent_SetShowInactive");
static_assert(sizeof(InteractionComponent_SetShowInactive) == 0x000001, "Wrong size on InteractionComponent_SetShowInactive");
static_assert(offsetof(InteractionComponent_SetShowInactive, bShow) == 0x000000, "Member 'InteractionComponent_SetShowInactive::bShow' has a wrong offset!");

// Function Stalker2.InteractionComponent.HasItemRequirement
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_HasItemRequirement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_HasItemRequirement) == 0x000001, "Wrong alignment on InteractionComponent_HasItemRequirement");
static_assert(sizeof(InteractionComponent_HasItemRequirement) == 0x000001, "Wrong size on InteractionComponent_HasItemRequirement");
static_assert(offsetof(InteractionComponent_HasItemRequirement, ReturnValue) == 0x000000, "Member 'InteractionComponent_HasItemRequirement::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractionComponent.HasRelatedQuest
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_HasRelatedQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_HasRelatedQuest) == 0x000001, "Wrong alignment on InteractionComponent_HasRelatedQuest");
static_assert(sizeof(InteractionComponent_HasRelatedQuest) == 0x000001, "Wrong size on InteractionComponent_HasRelatedQuest");
static_assert(offsetof(InteractionComponent_HasRelatedQuest, ReturnValue) == 0x000000, "Member 'InteractionComponent_HasRelatedQuest::ReturnValue' has a wrong offset!");

// Function Stalker2.MenuSubViewBase.SelectOptionWidget
// 0x0008 (0x0008 - 0x0000)
struct MenuSubViewBase_SelectOptionWidget final
{
public:
	class UMenuButtonBase*                        ButtonWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSubViewBase_SelectOptionWidget) == 0x000008, "Wrong alignment on MenuSubViewBase_SelectOptionWidget");
static_assert(sizeof(MenuSubViewBase_SelectOptionWidget) == 0x000008, "Wrong size on MenuSubViewBase_SelectOptionWidget");
static_assert(offsetof(MenuSubViewBase_SelectOptionWidget, ButtonWidget) == 0x000000, "Member 'MenuSubViewBase_SelectOptionWidget::ButtonWidget' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAchievements.XAchievementsAddProgress
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerAchievements_XAchievementsAddProgress final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerAchievements_XAchievementsAddProgress) == 0x000008, "Wrong alignment on CustomConsoleManagerAchievements_XAchievementsAddProgress");
static_assert(sizeof(CustomConsoleManagerAchievements_XAchievementsAddProgress) == 0x000018, "Wrong size on CustomConsoleManagerAchievements_XAchievementsAddProgress");
static_assert(offsetof(CustomConsoleManagerAchievements_XAchievementsAddProgress, Name_0) == 0x000000, "Member 'CustomConsoleManagerAchievements_XAchievementsAddProgress::Name_0' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAchievements_XAchievementsAddProgress, Value) == 0x000010, "Member 'CustomConsoleManagerAchievements_XAchievementsAddProgress::Value' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAchievements.XAchievementsUpdateDebugAchievement
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement) == 0x000004, "Wrong alignment on CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement");
static_assert(sizeof(CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement) == 0x000004, "Wrong size on CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement");
static_assert(offsetof(CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement, Value) == 0x000000, "Member 'CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement::Value' has a wrong offset!");

// Function Stalker2.AbstractProgressBar.SetProgressValue
// 0x0004 (0x0004 - 0x0000)
struct AbstractProgressBar_SetProgressValue final
{
public:
	float                                         InProgress;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbstractProgressBar_SetProgressValue) == 0x000004, "Wrong alignment on AbstractProgressBar_SetProgressValue");
static_assert(sizeof(AbstractProgressBar_SetProgressValue) == 0x000004, "Wrong size on AbstractProgressBar_SetProgressValue");
static_assert(offsetof(AbstractProgressBar_SetProgressValue, InProgress) == 0x000000, "Member 'AbstractProgressBar_SetProgressValue::InProgress' has a wrong offset!");

// Function Stalker2.AchievementTrigger.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct AchievementTrigger_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementTrigger_OnBeginOverlap) == 0x000008, "Wrong alignment on AchievementTrigger_OnBeginOverlap");
static_assert(sizeof(AchievementTrigger_OnBeginOverlap) == 0x000108, "Wrong size on AchievementTrigger_OnBeginOverlap");
static_assert(offsetof(AchievementTrigger_OnBeginOverlap, OverlappedComp) == 0x000000, "Member 'AchievementTrigger_OnBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(AchievementTrigger_OnBeginOverlap, Other) == 0x000008, "Member 'AchievementTrigger_OnBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(AchievementTrigger_OnBeginOverlap, OtherComp) == 0x000010, "Member 'AchievementTrigger_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(AchievementTrigger_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'AchievementTrigger_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AchievementTrigger_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'AchievementTrigger_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(AchievementTrigger_OnBeginOverlap, SweepResult) == 0x000020, "Member 'AchievementTrigger_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.ActionBlockerConditionBase.CanTrigger
// 0x0001 (0x0001 - 0x0000)
struct ActionBlockerConditionBase_CanTrigger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionBlockerConditionBase_CanTrigger) == 0x000001, "Wrong alignment on ActionBlockerConditionBase_CanTrigger");
static_assert(sizeof(ActionBlockerConditionBase_CanTrigger) == 0x000001, "Wrong size on ActionBlockerConditionBase_CanTrigger");
static_assert(offsetof(ActionBlockerConditionBase_CanTrigger, ReturnValue) == 0x000000, "Member 'ActionBlockerConditionBase_CanTrigger::ReturnValue' has a wrong offset!");

// Function Stalker2.SettingElement.GetIsEnabledElement
// 0x0001 (0x0001 - 0x0000)
struct SettingElement_GetIsEnabledElement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingElement_GetIsEnabledElement) == 0x000001, "Wrong alignment on SettingElement_GetIsEnabledElement");
static_assert(sizeof(SettingElement_GetIsEnabledElement) == 0x000001, "Wrong size on SettingElement_GetIsEnabledElement");
static_assert(offsetof(SettingElement_GetIsEnabledElement, ReturnValue) == 0x000000, "Member 'SettingElement_GetIsEnabledElement::ReturnValue' has a wrong offset!");

// Function Stalker2.Obj.OnHit
// 0x0110 (0x0110 - 0x0000)
struct Obj_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Obj_OnHit) == 0x000008, "Wrong alignment on Obj_OnHit");
static_assert(sizeof(Obj_OnHit) == 0x000110, "Wrong size on Obj_OnHit");
static_assert(offsetof(Obj_OnHit, SelfActor) == 0x000000, "Member 'Obj_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(Obj_OnHit, OtherActor) == 0x000008, "Member 'Obj_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Obj_OnHit, NormalImpulse) == 0x000010, "Member 'Obj_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Obj_OnHit, Hit) == 0x000028, "Member 'Obj_OnHit::Hit' has a wrong offset!");

// Function Stalker2.Obj.StartCutsceneSequence
// 0x0020 (0x0020 - 0x0000)
struct Obj_StartCutsceneSequence final
{
public:
	const class AActor*                           SynchronizationPoint;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OverrideRotation;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Obj_StartCutsceneSequence) == 0x000008, "Wrong alignment on Obj_StartCutsceneSequence");
static_assert(sizeof(Obj_StartCutsceneSequence) == 0x000020, "Wrong size on Obj_StartCutsceneSequence");
static_assert(offsetof(Obj_StartCutsceneSequence, SynchronizationPoint) == 0x000000, "Member 'Obj_StartCutsceneSequence::SynchronizationPoint' has a wrong offset!");
static_assert(offsetof(Obj_StartCutsceneSequence, OverrideRotation) == 0x000008, "Member 'Obj_StartCutsceneSequence::OverrideRotation' has a wrong offset!");

// Function Stalker2.Agent.DestroyDamageInteractParticle
// 0x0008 (0x0008 - 0x0000)
struct Agent_DestroyDamageInteractParticle final
{
public:
	class UNiagaraComponent*                      ParticleSystem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_DestroyDamageInteractParticle) == 0x000008, "Wrong alignment on Agent_DestroyDamageInteractParticle");
static_assert(sizeof(Agent_DestroyDamageInteractParticle) == 0x000008, "Wrong size on Agent_DestroyDamageInteractParticle");
static_assert(offsetof(Agent_DestroyDamageInteractParticle, ParticleSystem) == 0x000000, "Member 'Agent_DestroyDamageInteractParticle::ParticleSystem' has a wrong offset!");

// Function Stalker2.Agent.PsyNPCInteractionStarted
// 0x0008 (0x0008 - 0x0000)
struct Agent_PsyNPCInteractionStarted final
{
public:
	class AObj*                                   InteractActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_PsyNPCInteractionStarted) == 0x000008, "Wrong alignment on Agent_PsyNPCInteractionStarted");
static_assert(sizeof(Agent_PsyNPCInteractionStarted) == 0x000008, "Wrong size on Agent_PsyNPCInteractionStarted");
static_assert(offsetof(Agent_PsyNPCInteractionStarted, InteractActor) == 0x000000, "Member 'Agent_PsyNPCInteractionStarted::InteractActor' has a wrong offset!");

// Function Stalker2.Agent.GetSpawnSource
// 0x0001 (0x0001 - 0x0000)
struct Agent_GetSpawnSource final
{
public:
	ESpawnSource                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_GetSpawnSource) == 0x000001, "Wrong alignment on Agent_GetSpawnSource");
static_assert(sizeof(Agent_GetSpawnSource) == 0x000001, "Wrong size on Agent_GetSpawnSource");
static_assert(offsetof(Agent_GetSpawnSource, ReturnValue) == 0x000000, "Member 'Agent_GetSpawnSource::ReturnValue' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneBlinkProfile
// 0x0001 (0x0001 - 0x0000)
struct Agent_SetCutsceneBlinkProfile final
{
public:
	ECutsceneBlinkProfile                         NewCutsceneBlinkProfile;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneBlinkProfile) == 0x000001, "Wrong alignment on Agent_SetCutsceneBlinkProfile");
static_assert(sizeof(Agent_SetCutsceneBlinkProfile) == 0x000001, "Wrong size on Agent_SetCutsceneBlinkProfile");
static_assert(offsetof(Agent_SetCutsceneBlinkProfile, NewCutsceneBlinkProfile) == 0x000000, "Member 'Agent_SetCutsceneBlinkProfile::NewCutsceneBlinkProfile' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneEyesIdleProfile
// 0x0001 (0x0001 - 0x0000)
struct Agent_SetCutsceneEyesIdleProfile final
{
public:
	ECutsceneEyesIdleProfile                      NewCutsceneEyesIdleProfile;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneEyesIdleProfile) == 0x000001, "Wrong alignment on Agent_SetCutsceneEyesIdleProfile");
static_assert(sizeof(Agent_SetCutsceneEyesIdleProfile) == 0x000001, "Wrong size on Agent_SetCutsceneEyesIdleProfile");
static_assert(offsetof(Agent_SetCutsceneEyesIdleProfile, NewCutsceneEyesIdleProfile) == 0x000000, "Member 'Agent_SetCutsceneEyesIdleProfile::NewCutsceneEyesIdleProfile' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneEyesLookAtWeight
// 0x0004 (0x0004 - 0x0000)
struct Agent_SetCutsceneEyesLookAtWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneEyesLookAtWeight) == 0x000004, "Wrong alignment on Agent_SetCutsceneEyesLookAtWeight");
static_assert(sizeof(Agent_SetCutsceneEyesLookAtWeight) == 0x000004, "Wrong size on Agent_SetCutsceneEyesLookAtWeight");
static_assert(offsetof(Agent_SetCutsceneEyesLookAtWeight, Weight) == 0x000000, "Member 'Agent_SetCutsceneEyesLookAtWeight::Weight' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneHeadLookAtWeight
// 0x0004 (0x0004 - 0x0000)
struct Agent_SetCutsceneHeadLookAtWeight final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneHeadLookAtWeight) == 0x000004, "Wrong alignment on Agent_SetCutsceneHeadLookAtWeight");
static_assert(sizeof(Agent_SetCutsceneHeadLookAtWeight) == 0x000004, "Wrong size on Agent_SetCutsceneHeadLookAtWeight");
static_assert(offsetof(Agent_SetCutsceneHeadLookAtWeight, Weight) == 0x000000, "Member 'Agent_SetCutsceneHeadLookAtWeight::Weight' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneLookAtActor
// 0x0008 (0x0008 - 0x0000)
struct Agent_SetCutsceneLookAtActor final
{
public:
	const class AActor*                           Value;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneLookAtActor) == 0x000008, "Wrong alignment on Agent_SetCutsceneLookAtActor");
static_assert(sizeof(Agent_SetCutsceneLookAtActor) == 0x000008, "Wrong size on Agent_SetCutsceneLookAtActor");
static_assert(offsetof(Agent_SetCutsceneLookAtActor, Value) == 0x000000, "Member 'Agent_SetCutsceneLookAtActor::Value' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneProceduralEyesAmplitude
// 0x0004 (0x0004 - 0x0000)
struct Agent_SetCutsceneProceduralEyesAmplitude final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneProceduralEyesAmplitude) == 0x000004, "Wrong alignment on Agent_SetCutsceneProceduralEyesAmplitude");
static_assert(sizeof(Agent_SetCutsceneProceduralEyesAmplitude) == 0x000004, "Wrong size on Agent_SetCutsceneProceduralEyesAmplitude");
static_assert(offsetof(Agent_SetCutsceneProceduralEyesAmplitude, Value) == 0x000000, "Member 'Agent_SetCutsceneProceduralEyesAmplitude::Value' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneProceduralEyesIntensity
// 0x0004 (0x0004 - 0x0000)
struct Agent_SetCutsceneProceduralEyesIntensity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneProceduralEyesIntensity) == 0x000004, "Wrong alignment on Agent_SetCutsceneProceduralEyesIntensity");
static_assert(sizeof(Agent_SetCutsceneProceduralEyesIntensity) == 0x000004, "Wrong size on Agent_SetCutsceneProceduralEyesIntensity");
static_assert(offsetof(Agent_SetCutsceneProceduralEyesIntensity, Value) == 0x000000, "Member 'Agent_SetCutsceneProceduralEyesIntensity::Value' has a wrong offset!");

// Function Stalker2.Agent.SetCutsceneProceduralEyesWeight
// 0x0004 (0x0004 - 0x0000)
struct Agent_SetCutsceneProceduralEyesWeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Agent_SetCutsceneProceduralEyesWeight) == 0x000004, "Wrong alignment on Agent_SetCutsceneProceduralEyesWeight");
static_assert(sizeof(Agent_SetCutsceneProceduralEyesWeight) == 0x000004, "Wrong size on Agent_SetCutsceneProceduralEyesWeight");
static_assert(offsetof(Agent_SetCutsceneProceduralEyesWeight, Value) == 0x000000, "Member 'Agent_SetCutsceneProceduralEyesWeight::Value' has a wrong offset!");

// Function Stalker2.InteractableVersionComponent.UpdateFromVersion
// 0x0001 (0x0001 - 0x0000)
struct InteractableVersionComponent_UpdateFromVersion final
{
public:
	uint8                                         OldVersion;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableVersionComponent_UpdateFromVersion) == 0x000001, "Wrong alignment on InteractableVersionComponent_UpdateFromVersion");
static_assert(sizeof(InteractableVersionComponent_UpdateFromVersion) == 0x000001, "Wrong size on InteractableVersionComponent_UpdateFromVersion");
static_assert(offsetof(InteractableVersionComponent_UpdateFromVersion, OldVersion) == 0x000000, "Member 'InteractableVersionComponent_UpdateFromVersion::OldVersion' has a wrong offset!");

// Function Stalker2.SingleClickComponent.SetNeededFailedEvent
// 0x0001 (0x0001 - 0x0000)
struct SingleClickComponent_SetNeededFailedEvent final
{
public:
	bool                                          bNeedEvent;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SingleClickComponent_SetNeededFailedEvent) == 0x000001, "Wrong alignment on SingleClickComponent_SetNeededFailedEvent");
static_assert(sizeof(SingleClickComponent_SetNeededFailedEvent) == 0x000001, "Wrong size on SingleClickComponent_SetNeededFailedEvent");
static_assert(offsetof(SingleClickComponent_SetNeededFailedEvent, bNeedEvent) == 0x000000, "Member 'SingleClickComponent_SetNeededFailedEvent::bNeedEvent' has a wrong offset!");

// Function Stalker2.SingleClickComponent.CanSendFailedEvent
// 0x0001 (0x0001 - 0x0000)
struct SingleClickComponent_CanSendFailedEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SingleClickComponent_CanSendFailedEvent) == 0x000001, "Wrong alignment on SingleClickComponent_CanSendFailedEvent");
static_assert(sizeof(SingleClickComponent_CanSendFailedEvent) == 0x000001, "Wrong size on SingleClickComponent_CanSendFailedEvent");
static_assert(offsetof(SingleClickComponent_CanSendFailedEvent, ReturnValue) == 0x000000, "Member 'SingleClickComponent_CanSendFailedEvent::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.PauseSkeletalComponent
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_PauseSkeletalComponent final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_PauseSkeletalComponent) == 0x000001, "Wrong alignment on InteractableObject_PauseSkeletalComponent");
static_assert(sizeof(InteractableObject_PauseSkeletalComponent) == 0x000001, "Wrong size on InteractableObject_PauseSkeletalComponent");
static_assert(offsetof(InteractableObject_PauseSkeletalComponent, bPause) == 0x000000, "Member 'InteractableObject_PauseSkeletalComponent::bPause' has a wrong offset!");

// Function Stalker2.InteractableObject.SetBroken
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_SetBroken final
{
public:
	bool                                          bInBroken;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_SetBroken) == 0x000001, "Wrong alignment on InteractableObject_SetBroken");
static_assert(sizeof(InteractableObject_SetBroken) == 0x000001, "Wrong size on InteractableObject_SetBroken");
static_assert(offsetof(InteractableObject_SetBroken, bInBroken) == 0x000000, "Member 'InteractableObject_SetBroken::bInBroken' has a wrong offset!");

// Function Stalker2.InteractableObject.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_SetEnabled) == 0x000001, "Wrong alignment on InteractableObject_SetEnabled");
static_assert(sizeof(InteractableObject_SetEnabled) == 0x000001, "Wrong size on InteractableObject_SetEnabled");
static_assert(offsetof(InteractableObject_SetEnabled, bInEnabled) == 0x000000, "Member 'InteractableObject_SetEnabled::bInEnabled' has a wrong offset!");

// Function Stalker2.InteractableObject.SetInteractionActive
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_SetInteractionActive final
{
public:
	bool                                          bInInteractionActive;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_SetInteractionActive) == 0x000001, "Wrong alignment on InteractableObject_SetInteractionActive");
static_assert(sizeof(InteractableObject_SetInteractionActive) == 0x000001, "Wrong size on InteractableObject_SetInteractionActive");
static_assert(offsetof(InteractableObject_SetInteractionActive, bInInteractionActive) == 0x000000, "Member 'InteractableObject_SetInteractionActive::bInInteractionActive' has a wrong offset!");

// Function Stalker2.InteractableObject.SetPrerequisiteRequired
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_SetPrerequisiteRequired final
{
public:
	bool                                          bInPrerequisiteRequired;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_SetPrerequisiteRequired) == 0x000001, "Wrong alignment on InteractableObject_SetPrerequisiteRequired");
static_assert(sizeof(InteractableObject_SetPrerequisiteRequired) == 0x000001, "Wrong size on InteractableObject_SetPrerequisiteRequired");
static_assert(offsetof(InteractableObject_SetPrerequisiteRequired, bInPrerequisiteRequired) == 0x000000, "Member 'InteractableObject_SetPrerequisiteRequired::bInPrerequisiteRequired' has a wrong offset!");

// Function Stalker2.InteractableObject.SetSelfSufficient
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_SetSelfSufficient final
{
public:
	bool                                          bInSelfSufficient;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_SetSelfSufficient) == 0x000001, "Wrong alignment on InteractableObject_SetSelfSufficient");
static_assert(sizeof(InteractableObject_SetSelfSufficient) == 0x000001, "Wrong size on InteractableObject_SetSelfSufficient");
static_assert(offsetof(InteractableObject_SetSelfSufficient, bInSelfSufficient) == 0x000000, "Member 'InteractableObject_SetSelfSufficient::bInSelfSufficient' has a wrong offset!");

// Function Stalker2.InteractableObject.SetUnbreakable
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_SetUnbreakable final
{
public:
	bool                                          bInUnbreakable;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_SetUnbreakable) == 0x000001, "Wrong alignment on InteractableObject_SetUnbreakable");
static_assert(sizeof(InteractableObject_SetUnbreakable) == 0x000001, "Wrong size on InteractableObject_SetUnbreakable");
static_assert(offsetof(InteractableObject_SetUnbreakable, bInUnbreakable) == 0x000000, "Member 'InteractableObject_SetUnbreakable::bInUnbreakable' has a wrong offset!");

// Function Stalker2.InteractableObject.Toggle
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_Toggle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_Toggle) == 0x000001, "Wrong alignment on InteractableObject_Toggle");
static_assert(sizeof(InteractableObject_Toggle) == 0x000001, "Wrong size on InteractableObject_Toggle");
static_assert(offsetof(InteractableObject_Toggle, ReturnValue) == 0x000000, "Member 'InteractableObject_Toggle::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_IsBroken) == 0x000001, "Wrong alignment on InteractableObject_IsBroken");
static_assert(sizeof(InteractableObject_IsBroken) == 0x000001, "Wrong size on InteractableObject_IsBroken");
static_assert(offsetof(InteractableObject_IsBroken, ReturnValue) == 0x000000, "Member 'InteractableObject_IsBroken::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_IsEnabled) == 0x000001, "Wrong alignment on InteractableObject_IsEnabled");
static_assert(sizeof(InteractableObject_IsEnabled) == 0x000001, "Wrong size on InteractableObject_IsEnabled");
static_assert(offsetof(InteractableObject_IsEnabled, ReturnValue) == 0x000000, "Member 'InteractableObject_IsEnabled::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.IsInteractionActive
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_IsInteractionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_IsInteractionActive) == 0x000001, "Wrong alignment on InteractableObject_IsInteractionActive");
static_assert(sizeof(InteractableObject_IsInteractionActive) == 0x000001, "Wrong size on InteractableObject_IsInteractionActive");
static_assert(offsetof(InteractableObject_IsInteractionActive, ReturnValue) == 0x000000, "Member 'InteractableObject_IsInteractionActive::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.IsPrerequisiteRequired
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_IsPrerequisiteRequired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_IsPrerequisiteRequired) == 0x000001, "Wrong alignment on InteractableObject_IsPrerequisiteRequired");
static_assert(sizeof(InteractableObject_IsPrerequisiteRequired) == 0x000001, "Wrong size on InteractableObject_IsPrerequisiteRequired");
static_assert(offsetof(InteractableObject_IsPrerequisiteRequired, ReturnValue) == 0x000000, "Member 'InteractableObject_IsPrerequisiteRequired::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.IsSelfSufficient
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_IsSelfSufficient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_IsSelfSufficient) == 0x000001, "Wrong alignment on InteractableObject_IsSelfSufficient");
static_assert(sizeof(InteractableObject_IsSelfSufficient) == 0x000001, "Wrong size on InteractableObject_IsSelfSufficient");
static_assert(offsetof(InteractableObject_IsSelfSufficient, ReturnValue) == 0x000000, "Member 'InteractableObject_IsSelfSufficient::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableObject.IsUnbreakable
// 0x0001 (0x0001 - 0x0000)
struct InteractableObject_IsUnbreakable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableObject_IsUnbreakable) == 0x000001, "Wrong alignment on InteractableObject_IsUnbreakable");
static_assert(sizeof(InteractableObject_IsUnbreakable) == 0x000001, "Wrong size on InteractableObject_IsUnbreakable");
static_assert(offsetof(InteractableObject_IsUnbreakable, ReturnValue) == 0x000000, "Member 'InteractableObject_IsUnbreakable::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableStunVolume.ActivateVolume
// 0x0008 (0x0008 - 0x0000)
struct InteractableStunVolume_ActivateVolume final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableStunVolume_ActivateVolume) == 0x000008, "Wrong alignment on InteractableStunVolume_ActivateVolume");
static_assert(sizeof(InteractableStunVolume_ActivateVolume) == 0x000008, "Wrong size on InteractableStunVolume_ActivateVolume");
static_assert(offsetof(InteractableStunVolume_ActivateVolume, InObject) == 0x000000, "Member 'InteractableStunVolume_ActivateVolume::InObject' has a wrong offset!");

// Function Stalker2.InteractableStunVolume.OnCooldownEnded
// 0x0008 (0x0008 - 0x0000)
struct InteractableStunVolume_OnCooldownEnded final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableStunVolume_OnCooldownEnded) == 0x000008, "Wrong alignment on InteractableStunVolume_OnCooldownEnded");
static_assert(sizeof(InteractableStunVolume_OnCooldownEnded) == 0x000008, "Wrong size on InteractableStunVolume_OnCooldownEnded");
static_assert(offsetof(InteractableStunVolume_OnCooldownEnded, InObject) == 0x000000, "Member 'InteractableStunVolume_OnCooldownEnded::InObject' has a wrong offset!");

// Function Stalker2.InteractableStunVolume.OnVolumeActivated
// 0x0008 (0x0008 - 0x0000)
struct InteractableStunVolume_OnVolumeActivated final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableStunVolume_OnVolumeActivated) == 0x000008, "Wrong alignment on InteractableStunVolume_OnVolumeActivated");
static_assert(sizeof(InteractableStunVolume_OnVolumeActivated) == 0x000008, "Wrong size on InteractableStunVolume_OnVolumeActivated");
static_assert(offsetof(InteractableStunVolume_OnVolumeActivated, InObject) == 0x000000, "Member 'InteractableStunVolume_OnVolumeActivated::InObject' has a wrong offset!");

// Function Stalker2.InteractableStunVolume.OnVolumeDeactivated
// 0x0008 (0x0008 - 0x0000)
struct InteractableStunVolume_OnVolumeDeactivated final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableStunVolume_OnVolumeDeactivated) == 0x000008, "Wrong alignment on InteractableStunVolume_OnVolumeDeactivated");
static_assert(sizeof(InteractableStunVolume_OnVolumeDeactivated) == 0x000008, "Wrong size on InteractableStunVolume_OnVolumeDeactivated");
static_assert(offsetof(InteractableStunVolume_OnVolumeDeactivated, InObject) == 0x000000, "Member 'InteractableStunVolume_OnVolumeDeactivated::InObject' has a wrong offset!");

// Function Stalker2.InteractableStunVolume.OnVolumeForceDeactivated
// 0x0008 (0x0008 - 0x0000)
struct InteractableStunVolume_OnVolumeForceDeactivated final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableStunVolume_OnVolumeForceDeactivated) == 0x000008, "Wrong alignment on InteractableStunVolume_OnVolumeForceDeactivated");
static_assert(sizeof(InteractableStunVolume_OnVolumeForceDeactivated) == 0x000008, "Wrong size on InteractableStunVolume_OnVolumeForceDeactivated");
static_assert(offsetof(InteractableStunVolume_OnVolumeForceDeactivated, InObject) == 0x000000, "Member 'InteractableStunVolume_OnVolumeForceDeactivated::InObject' has a wrong offset!");

// Function Stalker2.AnimNotify_RetargetedAkEvent.AsyncPostAkEventAtMeshLocation
// 0x0038 (0x0038 - 0x0000)
struct AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           Event;                                             // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation) == 0x000008, "Wrong alignment on AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation");
static_assert(sizeof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation) == 0x000038, "Wrong size on AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation, Mesh) == 0x000000, "Member 'AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation::Mesh' has a wrong offset!");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation, Event) == 0x000008, "Member 'AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation::Event' has a wrong offset!");

// Function Stalker2.AnimNotify_RetargetedAkEvent.AsyncPostAkEventOnComponent
// 0x0038 (0x0038 - 0x0000)
struct AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           Event;                                             // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent) == 0x000008, "Wrong alignment on AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent");
static_assert(sizeof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent) == 0x000038, "Wrong size on AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent, AkComponent) == 0x000000, "Member 'AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent, Event) == 0x000008, "Member 'AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent::Event' has a wrong offset!");

// Function Stalker2.AnimNotify_RetargetedAkEvent.GetAkComponentForSocket
// 0x0020 (0x0020 - 0x0000)
struct AnimNotify_RetargetedAkEvent_GetAkComponentForSocket final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimSequenceBase;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_RetargetedAkEvent_GetAkComponentForSocket) == 0x000008, "Wrong alignment on AnimNotify_RetargetedAkEvent_GetAkComponentForSocket");
static_assert(sizeof(AnimNotify_RetargetedAkEvent_GetAkComponentForSocket) == 0x000020, "Wrong size on AnimNotify_RetargetedAkEvent_GetAkComponentForSocket");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_GetAkComponentForSocket, Mesh) == 0x000000, "Member 'AnimNotify_RetargetedAkEvent_GetAkComponentForSocket::Mesh' has a wrong offset!");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_GetAkComponentForSocket, Socket) == 0x000008, "Member 'AnimNotify_RetargetedAkEvent_GetAkComponentForSocket::Socket' has a wrong offset!");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_GetAkComponentForSocket, AnimSequenceBase) == 0x000010, "Member 'AnimNotify_RetargetedAkEvent_GetAkComponentForSocket::AnimSequenceBase' has a wrong offset!");
static_assert(offsetof(AnimNotify_RetargetedAkEvent_GetAkComponentForSocket, ReturnValue) == 0x000018, "Member 'AnimNotify_RetargetedAkEvent_GetAkComponentForSocket::ReturnValue' has a wrong offset!");

// Function Stalker2.AISwarmComponent.OnConstruction
// 0x0070 (0x0070 - 0x0000)
struct AISwarmComponent_OnConstruction final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwarmHealth;                                       // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISwarmComponent_OnConstruction) == 0x000010, "Wrong alignment on AISwarmComponent_OnConstruction");
static_assert(sizeof(AISwarmComponent_OnConstruction) == 0x000070, "Wrong size on AISwarmComponent_OnConstruction");
static_assert(offsetof(AISwarmComponent_OnConstruction, Transform) == 0x000000, "Member 'AISwarmComponent_OnConstruction::Transform' has a wrong offset!");
static_assert(offsetof(AISwarmComponent_OnConstruction, SwarmHealth) == 0x000060, "Member 'AISwarmComponent_OnConstruction::SwarmHealth' has a wrong offset!");

// Function Stalker2.AISwarmComponent.SetDamageTarget
// 0x0010 (0x0010 - 0x0000)
struct AISwarmComponent_SetDamageTarget final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetToGroundLevel;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngageRadius;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISwarmComponent_SetDamageTarget) == 0x000008, "Wrong alignment on AISwarmComponent_SetDamageTarget");
static_assert(sizeof(AISwarmComponent_SetDamageTarget) == 0x000010, "Wrong size on AISwarmComponent_SetDamageTarget");
static_assert(offsetof(AISwarmComponent_SetDamageTarget, Target) == 0x000000, "Member 'AISwarmComponent_SetDamageTarget::Target' has a wrong offset!");
static_assert(offsetof(AISwarmComponent_SetDamageTarget, OffsetToGroundLevel) == 0x000008, "Member 'AISwarmComponent_SetDamageTarget::OffsetToGroundLevel' has a wrong offset!");
static_assert(offsetof(AISwarmComponent_SetDamageTarget, EngageRadius) == 0x00000C, "Member 'AISwarmComponent_SetDamageTarget::EngageRadius' has a wrong offset!");

// Function Stalker2.AISwarmComponent.Simulate
// 0x0004 (0x0004 - 0x0000)
struct AISwarmComponent_Simulate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISwarmComponent_Simulate) == 0x000004, "Wrong alignment on AISwarmComponent_Simulate");
static_assert(sizeof(AISwarmComponent_Simulate) == 0x000004, "Wrong size on AISwarmComponent_Simulate");
static_assert(offsetof(AISwarmComponent_Simulate, DeltaTime) == 0x000000, "Member 'AISwarmComponent_Simulate::DeltaTime' has a wrong offset!");

// Function Stalker2.AISwarmComponent.GetVATAnimationNames
// 0x0010 (0x0010 - 0x0000)
struct AISwarmComponent_GetVATAnimationNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISwarmComponent_GetVATAnimationNames) == 0x000008, "Wrong alignment on AISwarmComponent_GetVATAnimationNames");
static_assert(sizeof(AISwarmComponent_GetVATAnimationNames) == 0x000010, "Wrong size on AISwarmComponent_GetVATAnimationNames");
static_assert(offsetof(AISwarmComponent_GetVATAnimationNames, ReturnValue) == 0x000000, "Member 'AISwarmComponent_GetVATAnimationNames::ReturnValue' has a wrong offset!");

// Function Stalker2.ForceFeedbackSubsystem.BP_StartFeedback
// 0x0018 (0x0018 - 0x0000)
struct ForceFeedbackSubsystem_BP_StartFeedback final
{
public:
	struct FGameplayTag                           Trigger;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FForceFeedbackArgs                     Args;                                              // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InIntensityMultiplier;                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideStopCurrent;                              // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopCurrent;                                      // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ForceFeedbackSubsystem_BP_StartFeedback) == 0x000008, "Wrong alignment on ForceFeedbackSubsystem_BP_StartFeedback");
static_assert(sizeof(ForceFeedbackSubsystem_BP_StartFeedback) == 0x000018, "Wrong size on ForceFeedbackSubsystem_BP_StartFeedback");
static_assert(offsetof(ForceFeedbackSubsystem_BP_StartFeedback, Trigger) == 0x000000, "Member 'ForceFeedbackSubsystem_BP_StartFeedback::Trigger' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSubsystem_BP_StartFeedback, Args) == 0x000008, "Member 'ForceFeedbackSubsystem_BP_StartFeedback::Args' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSubsystem_BP_StartFeedback, InIntensityMultiplier) == 0x000010, "Member 'ForceFeedbackSubsystem_BP_StartFeedback::InIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSubsystem_BP_StartFeedback, bOverrideStopCurrent) == 0x000014, "Member 'ForceFeedbackSubsystem_BP_StartFeedback::bOverrideStopCurrent' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSubsystem_BP_StartFeedback, bStopCurrent) == 0x000015, "Member 'ForceFeedbackSubsystem_BP_StartFeedback::bStopCurrent' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSubsystem_BP_StartFeedback, ReturnValue) == 0x000016, "Member 'ForceFeedbackSubsystem_BP_StartFeedback::ReturnValue' has a wrong offset!");

// Function Stalker2.ForceFeedbackSubsystem.SetIntensityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ForceFeedbackSubsystem_SetIntensityMultiplier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForceFeedbackSubsystem_SetIntensityMultiplier) == 0x000004, "Wrong alignment on ForceFeedbackSubsystem_SetIntensityMultiplier");
static_assert(sizeof(ForceFeedbackSubsystem_SetIntensityMultiplier) == 0x000004, "Wrong size on ForceFeedbackSubsystem_SetIntensityMultiplier");
static_assert(offsetof(ForceFeedbackSubsystem_SetIntensityMultiplier, NewValue) == 0x000000, "Member 'ForceFeedbackSubsystem_SetIntensityMultiplier::NewValue' has a wrong offset!");

// Function Stalker2.ForceFeedbackSubsystem.StopFeedback
// 0x000C (0x000C - 0x0000)
struct ForceFeedbackSubsystem_StopFeedback final
{
public:
	struct FGameplayTag                           Trigger;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ForceFeedbackSubsystem_StopFeedback) == 0x000004, "Wrong alignment on ForceFeedbackSubsystem_StopFeedback");
static_assert(sizeof(ForceFeedbackSubsystem_StopFeedback) == 0x00000C, "Wrong size on ForceFeedbackSubsystem_StopFeedback");
static_assert(offsetof(ForceFeedbackSubsystem_StopFeedback, Trigger) == 0x000000, "Member 'ForceFeedbackSubsystem_StopFeedback::Trigger' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSubsystem_StopFeedback, ReturnValue) == 0x000008, "Member 'ForceFeedbackSubsystem_StopFeedback::ReturnValue' has a wrong offset!");

// Function Stalker2.ForceFeedbackSubsystem.GetIntensityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ForceFeedbackSubsystem_GetIntensityMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForceFeedbackSubsystem_GetIntensityMultiplier) == 0x000004, "Wrong alignment on ForceFeedbackSubsystem_GetIntensityMultiplier");
static_assert(sizeof(ForceFeedbackSubsystem_GetIntensityMultiplier) == 0x000004, "Wrong size on ForceFeedbackSubsystem_GetIntensityMultiplier");
static_assert(offsetof(ForceFeedbackSubsystem_GetIntensityMultiplier, ReturnValue) == 0x000000, "Member 'ForceFeedbackSubsystem_GetIntensityMultiplier::ReturnValue' has a wrong offset!");

// Function Stalker2.SaveScreenSubView.OnNavigationButtonPressed
// 0x0004 (0x0004 - 0x0000)
struct SaveScreenSubView_OnNavigationButtonPressed final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveScreenSubView_OnNavigationButtonPressed) == 0x000004, "Wrong alignment on SaveScreenSubView_OnNavigationButtonPressed");
static_assert(sizeof(SaveScreenSubView_OnNavigationButtonPressed) == 0x000004, "Wrong size on SaveScreenSubView_OnNavigationButtonPressed");
static_assert(offsetof(SaveScreenSubView_OnNavigationButtonPressed, InButtonIndex) == 0x000000, "Member 'SaveScreenSubView_OnNavigationButtonPressed::InButtonIndex' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.GetCharacterAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance final
{
public:
	class AObj*                                   Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance) == 0x000010, "Wrong size on AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance, Obj) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance::Obj' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance, ReturnValue) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance::ReturnValue' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.IsSimulationEnable
// 0x0018 (0x0018 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGroomAsset*                            GroomAsset;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable) == 0x000018, "Wrong size on AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable, Object) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable::Object' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable, GroomAsset) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable::GroomAsset' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable, ReturnValue) == 0x000010, "Member 'AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable::ReturnValue' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.LerpPlayerToInteractable
// 0x0038 (0x0038 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable final
{
public:
	class APC*                                    PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionComponent*                  InteractionComponent;                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimInteractableData                  InteractionData;                                   // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable) == 0x000038, "Wrong size on AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable, PC) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable::PC' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable, InteractionComponent) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable::InteractionComponent' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable, InteractionData) == 0x000010, "Member 'AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable::InteractionData' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.MoveAnimNotifiesFromInvalidPoints
// 0x0018 (0x0018 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints final
{
public:
	class UAnimSequenceBase*                      Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimNotify>                NotifyClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldNotifiesBeChangedToBranchingPoint;          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints) == 0x000018, "Wrong size on AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints, Montage) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints::Montage' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints, NotifyClass) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints::NotifyClass' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints, bShouldNotifiesBeChangedToBranchingPoint) == 0x000010, "Member 'AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints::bShouldNotifiesBeChangedToBranchingPoint' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints, ReturnValue) == 0x000011, "Member 'AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints::ReturnValue' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.RefreshLodSyncComponents
// 0x0010 (0x0010 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULODSyncComponent*                      LODSyncComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents) == 0x000010, "Wrong size on AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents, Object) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents::Object' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents, LODSyncComponent) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents::LODSyncComponent' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.SetMontageSectionNextSection
// 0x0018 (0x0018 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSection;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection) == 0x000018, "Wrong size on AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection, Montage) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection::Montage' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection, Section) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection::Section' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection, NextSection) == 0x000010, "Member 'AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection::NextSection' has a wrong offset!");

// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.SetPlayerLockState
// 0x0038 (0x0038 - 0x0000)
struct AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState final
{
public:
	class APC*                                    PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimInteractableData                  InteractionData;                                   // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState) == 0x000008, "Wrong alignment on AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState");
static_assert(sizeof(AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState) == 0x000038, "Wrong size on AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState, PC) == 0x000000, "Member 'AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState::PC' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState, bLock) == 0x000008, "Member 'AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState::bLock' has a wrong offset!");
static_assert(offsetof(AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState, InteractionData) == 0x000010, "Member 'AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState::InteractionData' has a wrong offset!");

// Function Stalker2.Anomaly.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct Anomaly_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Anomaly_OnBeginOverlap) == 0x000008, "Wrong alignment on Anomaly_OnBeginOverlap");
static_assert(sizeof(Anomaly_OnBeginOverlap) == 0x000108, "Wrong size on Anomaly_OnBeginOverlap");
static_assert(offsetof(Anomaly_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'Anomaly_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Anomaly_OnBeginOverlap, OtherActor) == 0x000008, "Member 'Anomaly_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Anomaly_OnBeginOverlap, OtherComp) == 0x000010, "Member 'Anomaly_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Anomaly_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Anomaly_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Anomaly_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'Anomaly_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Anomaly_OnBeginOverlap, SweepResult) == 0x000020, "Member 'Anomaly_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.Anomaly.OnDieSoundFinished
// 0x0010 (0x0010 - 0x0000)
struct Anomaly_OnDieSoundFinished final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Anomaly_OnDieSoundFinished) == 0x000008, "Wrong alignment on Anomaly_OnDieSoundFinished");
static_assert(sizeof(Anomaly_OnDieSoundFinished) == 0x000010, "Wrong size on Anomaly_OnDieSoundFinished");
static_assert(offsetof(Anomaly_OnDieSoundFinished, CallbackType) == 0x000000, "Member 'Anomaly_OnDieSoundFinished::CallbackType' has a wrong offset!");
static_assert(offsetof(Anomaly_OnDieSoundFinished, CallbackInfo) == 0x000008, "Member 'Anomaly_OnDieSoundFinished::CallbackInfo' has a wrong offset!");

// Function Stalker2.Anomaly.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct Anomaly_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Anomaly_OnEndOverlap) == 0x000008, "Wrong alignment on Anomaly_OnEndOverlap");
static_assert(sizeof(Anomaly_OnEndOverlap) == 0x000020, "Wrong size on Anomaly_OnEndOverlap");
static_assert(offsetof(Anomaly_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'Anomaly_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Anomaly_OnEndOverlap, OtherActor) == 0x000008, "Member 'Anomaly_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Anomaly_OnEndOverlap, OtherComp) == 0x000010, "Member 'Anomaly_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Anomaly_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'Anomaly_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.Anomaly.OnNiagaraFinished
// 0x0008 (0x0008 - 0x0000)
struct Anomaly_OnNiagaraFinished final
{
public:
	class UNiagaraComponent*                      FinishedNiagara;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Anomaly_OnNiagaraFinished) == 0x000008, "Wrong alignment on Anomaly_OnNiagaraFinished");
static_assert(sizeof(Anomaly_OnNiagaraFinished) == 0x000008, "Wrong size on Anomaly_OnNiagaraFinished");
static_assert(offsetof(Anomaly_OnNiagaraFinished, FinishedNiagara) == 0x000000, "Member 'Anomaly_OnNiagaraFinished::FinishedNiagara' has a wrong offset!");

// Function Stalker2.ElectroAnomaly.BPSetActiveIdleVFX
// 0x0001 (0x0001 - 0x0000)
struct ElectroAnomaly_BPSetActiveIdleVFX final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElectroAnomaly_BPSetActiveIdleVFX) == 0x000001, "Wrong alignment on ElectroAnomaly_BPSetActiveIdleVFX");
static_assert(sizeof(ElectroAnomaly_BPSetActiveIdleVFX) == 0x000001, "Wrong size on ElectroAnomaly_BPSetActiveIdleVFX");
static_assert(offsetof(ElectroAnomaly_BPSetActiveIdleVFX, bNewActive) == 0x000000, "Member 'ElectroAnomaly_BPSetActiveIdleVFX::bNewActive' has a wrong offset!");

// Function Stalker2.ElectroAnomaly.GetElectroBakedData
// 0x0038 (0x0038 - 0x0000)
struct ElectroAnomaly_GetElectroBakedData final
{
public:
	struct FElectroAnomalyBakedDataFloat          ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElectroAnomaly_GetElectroBakedData) == 0x000008, "Wrong alignment on ElectroAnomaly_GetElectroBakedData");
static_assert(sizeof(ElectroAnomaly_GetElectroBakedData) == 0x000038, "Wrong size on ElectroAnomaly_GetElectroBakedData");
static_assert(offsetof(ElectroAnomaly_GetElectroBakedData, ReturnValue) == 0x000000, "Member 'ElectroAnomaly_GetElectroBakedData::ReturnValue' has a wrong offset!");

// Function Stalker2.ElectroAnomaly.GetParticleSpawnLocation
// 0x0018 (0x0018 - 0x0000)
struct ElectroAnomaly_GetParticleSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElectroAnomaly_GetParticleSpawnLocation) == 0x000008, "Wrong alignment on ElectroAnomaly_GetParticleSpawnLocation");
static_assert(sizeof(ElectroAnomaly_GetParticleSpawnLocation) == 0x000018, "Wrong size on ElectroAnomaly_GetParticleSpawnLocation");
static_assert(offsetof(ElectroAnomaly_GetParticleSpawnLocation, ReturnValue) == 0x000000, "Member 'ElectroAnomaly_GetParticleSpawnLocation::ReturnValue' has a wrong offset!");

// Function Stalker2.ElectroAnomaly.GetRadius
// 0x0004 (0x0004 - 0x0000)
struct ElectroAnomaly_GetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ElectroAnomaly_GetRadius) == 0x000004, "Wrong alignment on ElectroAnomaly_GetRadius");
static_assert(sizeof(ElectroAnomaly_GetRadius) == 0x000004, "Wrong size on ElectroAnomaly_GetRadius");
static_assert(offsetof(ElectroAnomaly_GetRadius, ReturnValue) == 0x000000, "Member 'ElectroAnomaly_GetRadius::ReturnValue' has a wrong offset!");

// Function Stalker2.EULAView.OnUserScrolled
// 0x0004 (0x0004 - 0x0000)
struct EULAView_OnUserScrolled final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EULAView_OnUserScrolled) == 0x000004, "Wrong alignment on EULAView_OnUserScrolled");
static_assert(sizeof(EULAView_OnUserScrolled) == 0x000004, "Wrong size on EULAView_OnUserScrolled");
static_assert(offsetof(EULAView_OnUserScrolled, Offset) == 0x000000, "Member 'EULAView_OnUserScrolled::Offset' has a wrong offset!");

// Function Stalker2.HoldComponent.IsHoldStarted
// 0x0001 (0x0001 - 0x0000)
struct HoldComponent_IsHoldStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HoldComponent_IsHoldStarted) == 0x000001, "Wrong alignment on HoldComponent_IsHoldStarted");
static_assert(sizeof(HoldComponent_IsHoldStarted) == 0x000001, "Wrong size on HoldComponent_IsHoldStarted");
static_assert(offsetof(HoldComponent_IsHoldStarted, ReturnValue) == 0x000000, "Member 'HoldComponent_IsHoldStarted::ReturnValue' has a wrong offset!");

// Function Stalker2.FaustBossfightController.OnCloneKilled
// 0x0008 (0x0008 - 0x0000)
struct FaustBossfightController_OnCloneKilled final
{
public:
	const class AActor*                           CloneActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaustBossfightController_OnCloneKilled) == 0x000008, "Wrong alignment on FaustBossfightController_OnCloneKilled");
static_assert(sizeof(FaustBossfightController_OnCloneKilled) == 0x000008, "Wrong size on FaustBossfightController_OnCloneKilled");
static_assert(offsetof(FaustBossfightController_OnCloneKilled, CloneActor) == 0x000000, "Member 'FaustBossfightController_OnCloneKilled::CloneActor' has a wrong offset!");

// Function Stalker2.FaustBossfightController.OnCloneSpawned
// 0x0008 (0x0008 - 0x0000)
struct FaustBossfightController_OnCloneSpawned final
{
public:
	const class AActor*                           CloneActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaustBossfightController_OnCloneSpawned) == 0x000008, "Wrong alignment on FaustBossfightController_OnCloneSpawned");
static_assert(sizeof(FaustBossfightController_OnCloneSpawned) == 0x000008, "Wrong size on FaustBossfightController_OnCloneSpawned");
static_assert(offsetof(FaustBossfightController_OnCloneSpawned, CloneActor) == 0x000000, "Member 'FaustBossfightController_OnCloneSpawned::CloneActor' has a wrong offset!");

// Function Stalker2.FaustBossfightController.OnCloneSwitch
// 0x0008 (0x0008 - 0x0000)
struct FaustBossfightController_OnCloneSwitch final
{
public:
	const class AActor*                           CloneActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaustBossfightController_OnCloneSwitch) == 0x000008, "Wrong alignment on FaustBossfightController_OnCloneSwitch");
static_assert(sizeof(FaustBossfightController_OnCloneSwitch) == 0x000008, "Wrong size on FaustBossfightController_OnCloneSwitch");
static_assert(offsetof(FaustBossfightController_OnCloneSwitch, CloneActor) == 0x000000, "Member 'FaustBossfightController_OnCloneSwitch::CloneActor' has a wrong offset!");

// Function Stalker2.FaustBossfightController.SetCloneSpawnEnabled
// 0x0001 (0x0001 - 0x0000)
struct FaustBossfightController_SetCloneSpawnEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FaustBossfightController_SetCloneSpawnEnabled) == 0x000001, "Wrong alignment on FaustBossfightController_SetCloneSpawnEnabled");
static_assert(sizeof(FaustBossfightController_SetCloneSpawnEnabled) == 0x000001, "Wrong size on FaustBossfightController_SetCloneSpawnEnabled");
static_assert(offsetof(FaustBossfightController_SetCloneSpawnEnabled, bEnabled) == 0x000000, "Member 'FaustBossfightController_SetCloneSpawnEnabled::bEnabled' has a wrong offset!");

// Function Stalker2.DebugTextWidgetBase.CheckDebugTextBluprint
// 0x0020 (0x0020 - 0x0000)
struct DebugTextWidgetBase_CheckDebugTextBluprint final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UUserWidget*                            InOwnerWidget;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugTextWidgetBase_CheckDebugTextBluprint) == 0x000008, "Wrong alignment on DebugTextWidgetBase_CheckDebugTextBluprint");
static_assert(sizeof(DebugTextWidgetBase_CheckDebugTextBluprint) == 0x000020, "Wrong size on DebugTextWidgetBase_CheckDebugTextBluprint");
static_assert(offsetof(DebugTextWidgetBase_CheckDebugTextBluprint, Text) == 0x000000, "Member 'DebugTextWidgetBase_CheckDebugTextBluprint::Text' has a wrong offset!");
static_assert(offsetof(DebugTextWidgetBase_CheckDebugTextBluprint, InOwnerWidget) == 0x000018, "Member 'DebugTextWidgetBase_CheckDebugTextBluprint::InOwnerWidget' has a wrong offset!");

// Function Stalker2.DebugTextWidgetBase.FindRengeSettings
// 0x0050 (0x0050 - 0x0000)
struct DebugTextWidgetBase_FindRengeSettings final
{
public:
	struct FUIWarningSettings                     ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugTextWidgetBase_FindRengeSettings) == 0x000008, "Wrong alignment on DebugTextWidgetBase_FindRengeSettings");
static_assert(sizeof(DebugTextWidgetBase_FindRengeSettings) == 0x000050, "Wrong size on DebugTextWidgetBase_FindRengeSettings");
static_assert(offsetof(DebugTextWidgetBase_FindRengeSettings, ReturnValue) == 0x000000, "Member 'DebugTextWidgetBase_FindRengeSettings::ReturnValue' has a wrong offset!");

// Function Stalker2.DebugTextLenWidget.GetWarningIndex
// 0x0018 (0x0018 - 0x0000)
struct DebugTextLenWidget_GetWarningIndex final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextLen;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DebugTextLenWidget_GetWarningIndex) == 0x000008, "Wrong alignment on DebugTextLenWidget_GetWarningIndex");
static_assert(sizeof(DebugTextLenWidget_GetWarningIndex) == 0x000018, "Wrong size on DebugTextLenWidget_GetWarningIndex");
static_assert(offsetof(DebugTextLenWidget_GetWarningIndex, Text) == 0x000000, "Member 'DebugTextLenWidget_GetWarningIndex::Text' has a wrong offset!");
static_assert(offsetof(DebugTextLenWidget_GetWarningIndex, TextLen) == 0x000010, "Member 'DebugTextLenWidget_GetWarningIndex::TextLen' has a wrong offset!");
static_assert(offsetof(DebugTextLenWidget_GetWarningIndex, ReturnValue) == 0x000014, "Member 'DebugTextLenWidget_GetWarningIndex::ReturnValue' has a wrong offset!");

// Function Stalker2.AnimInstanceValve.SetValveState
// 0x0001 (0x0001 - 0x0000)
struct AnimInstanceValve_SetValveState final
{
public:
	EValveState                                   ValveState;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceValve_SetValveState) == 0x000001, "Wrong alignment on AnimInstanceValve_SetValveState");
static_assert(sizeof(AnimInstanceValve_SetValveState) == 0x000001, "Wrong size on AnimInstanceValve_SetValveState");
static_assert(offsetof(AnimInstanceValve_SetValveState, ValveState) == 0x000000, "Member 'AnimInstanceValve_SetValveState::ValveState' has a wrong offset!");

// Function Stalker2.FirstTimeSettingsWidget.OnColorBlindnessChanged
// 0x0004 (0x0004 - 0x0000)
struct FirstTimeSettingsWidget_OnColorBlindnessChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeSettingsWidget_OnColorBlindnessChanged) == 0x000004, "Wrong alignment on FirstTimeSettingsWidget_OnColorBlindnessChanged");
static_assert(sizeof(FirstTimeSettingsWidget_OnColorBlindnessChanged) == 0x000004, "Wrong size on FirstTimeSettingsWidget_OnColorBlindnessChanged");
static_assert(offsetof(FirstTimeSettingsWidget_OnColorBlindnessChanged, Value) == 0x000000, "Member 'FirstTimeSettingsWidget_OnColorBlindnessChanged::Value' has a wrong offset!");

// Function Stalker2.FirstTimeSettingsWidget.OnDynamicRangeChanged
// 0x0004 (0x0004 - 0x0000)
struct FirstTimeSettingsWidget_OnDynamicRangeChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeSettingsWidget_OnDynamicRangeChanged) == 0x000004, "Wrong alignment on FirstTimeSettingsWidget_OnDynamicRangeChanged");
static_assert(sizeof(FirstTimeSettingsWidget_OnDynamicRangeChanged) == 0x000004, "Wrong size on FirstTimeSettingsWidget_OnDynamicRangeChanged");
static_assert(offsetof(FirstTimeSettingsWidget_OnDynamicRangeChanged, Value) == 0x000000, "Member 'FirstTimeSettingsWidget_OnDynamicRangeChanged::Value' has a wrong offset!");

// Function Stalker2.FirstTimeSettingsWidget.OnGammaChanged
// 0x0004 (0x0004 - 0x0000)
struct FirstTimeSettingsWidget_OnGammaChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeSettingsWidget_OnGammaChanged) == 0x000004, "Wrong alignment on FirstTimeSettingsWidget_OnGammaChanged");
static_assert(sizeof(FirstTimeSettingsWidget_OnGammaChanged) == 0x000004, "Wrong size on FirstTimeSettingsWidget_OnGammaChanged");
static_assert(offsetof(FirstTimeSettingsWidget_OnGammaChanged, Value) == 0x000000, "Member 'FirstTimeSettingsWidget_OnGammaChanged::Value' has a wrong offset!");

// Function Stalker2.FirstTimeSettingsWidget.OnGammaSelected
// 0x0001 (0x0001 - 0x0000)
struct FirstTimeSettingsWidget_OnGammaSelected final
{
public:
	bool                                          InSelected;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeSettingsWidget_OnGammaSelected) == 0x000001, "Wrong alignment on FirstTimeSettingsWidget_OnGammaSelected");
static_assert(sizeof(FirstTimeSettingsWidget_OnGammaSelected) == 0x000001, "Wrong size on FirstTimeSettingsWidget_OnGammaSelected");
static_assert(offsetof(FirstTimeSettingsWidget_OnGammaSelected, InSelected) == 0x000000, "Member 'FirstTimeSettingsWidget_OnGammaSelected::InSelected' has a wrong offset!");

// Function Stalker2.FirstTimeSettingsWidget.OnInterfaceLanguageChanged
// 0x0004 (0x0004 - 0x0000)
struct FirstTimeSettingsWidget_OnInterfaceLanguageChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeSettingsWidget_OnInterfaceLanguageChanged) == 0x000004, "Wrong alignment on FirstTimeSettingsWidget_OnInterfaceLanguageChanged");
static_assert(sizeof(FirstTimeSettingsWidget_OnInterfaceLanguageChanged) == 0x000004, "Wrong size on FirstTimeSettingsWidget_OnInterfaceLanguageChanged");
static_assert(offsetof(FirstTimeSettingsWidget_OnInterfaceLanguageChanged, Value) == 0x000000, "Member 'FirstTimeSettingsWidget_OnInterfaceLanguageChanged::Value' has a wrong offset!");

// Function Stalker2.FirstTimeSettingsWidget.OnVoiceLanguageChanged
// 0x0004 (0x0004 - 0x0000)
struct FirstTimeSettingsWidget_OnVoiceLanguageChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeSettingsWidget_OnVoiceLanguageChanged) == 0x000004, "Wrong alignment on FirstTimeSettingsWidget_OnVoiceLanguageChanged");
static_assert(sizeof(FirstTimeSettingsWidget_OnVoiceLanguageChanged) == 0x000004, "Wrong size on FirstTimeSettingsWidget_OnVoiceLanguageChanged");
static_assert(offsetof(FirstTimeSettingsWidget_OnVoiceLanguageChanged, Value) == 0x000000, "Member 'FirstTimeSettingsWidget_OnVoiceLanguageChanged::Value' has a wrong offset!");

// Function Stalker2.StackSplittingWidget.OnSplitValueChanged
// 0x0004 (0x0004 - 0x0000)
struct StackSplittingWidget_OnSplitValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StackSplittingWidget_OnSplitValueChanged) == 0x000004, "Wrong alignment on StackSplittingWidget_OnSplitValueChanged");
static_assert(sizeof(StackSplittingWidget_OnSplitValueChanged) == 0x000004, "Wrong size on StackSplittingWidget_OnSplitValueChanged");
static_assert(offsetof(StackSplittingWidget_OnSplitValueChanged, Value) == 0x000000, "Member 'StackSplittingWidget_OnSplitValueChanged::Value' has a wrong offset!");

// Function Stalker2.FaustInductor.OnDamageAccumulated
// 0x0008 (0x0008 - 0x0000)
struct FaustInductor_OnDamageAccumulated final
{
public:
	struct FUID                                   LastDamageDealerUID;                               // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectileFlownThroughObject;                     // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FaustInductor_OnDamageAccumulated) == 0x000004, "Wrong alignment on FaustInductor_OnDamageAccumulated");
static_assert(sizeof(FaustInductor_OnDamageAccumulated) == 0x000008, "Wrong size on FaustInductor_OnDamageAccumulated");
static_assert(offsetof(FaustInductor_OnDamageAccumulated, LastDamageDealerUID) == 0x000000, "Member 'FaustInductor_OnDamageAccumulated::LastDamageDealerUID' has a wrong offset!");
static_assert(offsetof(FaustInductor_OnDamageAccumulated, bProjectileFlownThroughObject) == 0x000004, "Member 'FaustInductor_OnDamageAccumulated::bProjectileFlownThroughObject' has a wrong offset!");

// Function Stalker2.TelekineticShield.OnDeathParticleFinished
// 0x0008 (0x0008 - 0x0000)
struct TelekineticShield_OnDeathParticleFinished final
{
public:
	class UNiagaraComponent*                      DeathVFXComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelekineticShield_OnDeathParticleFinished) == 0x000008, "Wrong alignment on TelekineticShield_OnDeathParticleFinished");
static_assert(sizeof(TelekineticShield_OnDeathParticleFinished) == 0x000008, "Wrong size on TelekineticShield_OnDeathParticleFinished");
static_assert(offsetof(TelekineticShield_OnDeathParticleFinished, DeathVFXComponent) == 0x000000, "Member 'TelekineticShield_OnDeathParticleFinished::DeathVFXComponent' has a wrong offset!");

// Function Stalker2.TelekineticShield.OnHitReceivedBP
// 0x0150 (0x0150 - 0x0000)
struct TelekineticShield_OnHitReceivedBP final
{
public:
	struct FCommonHitArgs                         HitArgs;                                           // 0x0000(0x0150)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelekineticShield_OnHitReceivedBP) == 0x000008, "Wrong alignment on TelekineticShield_OnHitReceivedBP");
static_assert(sizeof(TelekineticShield_OnHitReceivedBP) == 0x000150, "Wrong size on TelekineticShield_OnHitReceivedBP");
static_assert(offsetof(TelekineticShield_OnHitReceivedBP, HitArgs) == 0x000000, "Member 'TelekineticShield_OnHitReceivedBP::HitArgs' has a wrong offset!");

// Function Stalker2.TelekineticShield.GetOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct TelekineticShield_GetOwnerActor final
{
public:
	class AObj*                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TelekineticShield_GetOwnerActor) == 0x000008, "Wrong alignment on TelekineticShield_GetOwnerActor");
static_assert(sizeof(TelekineticShield_GetOwnerActor) == 0x000008, "Wrong size on TelekineticShield_GetOwnerActor");
static_assert(offsetof(TelekineticShield_GetOwnerActor, ReturnValue) == 0x000000, "Member 'TelekineticShield_GetOwnerActor::ReturnValue' has a wrong offset!");

// Function Stalker2.PDAQuestTaskContainer.MouseHoverStage
// 0x0008 (0x0008 - 0x0000)
struct PDAQuestTaskContainer_MouseHoverStage final
{
public:
	bool                                          bHovered;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IndexOnParent;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDAQuestTaskContainer_MouseHoverStage) == 0x000004, "Wrong alignment on PDAQuestTaskContainer_MouseHoverStage");
static_assert(sizeof(PDAQuestTaskContainer_MouseHoverStage) == 0x000008, "Wrong size on PDAQuestTaskContainer_MouseHoverStage");
static_assert(offsetof(PDAQuestTaskContainer_MouseHoverStage, bHovered) == 0x000000, "Member 'PDAQuestTaskContainer_MouseHoverStage::bHovered' has a wrong offset!");
static_assert(offsetof(PDAQuestTaskContainer_MouseHoverStage, IndexOnParent) == 0x000004, "Member 'PDAQuestTaskContainer_MouseHoverStage::IndexOnParent' has a wrong offset!");

// Function Stalker2.PDAQuestTaskContainer.StageClick
// 0x0008 (0x0008 - 0x0000)
struct PDAQuestTaskContainer_StageClick final
{
public:
	class UPDAQuestTaskSlot*                      InSlot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDAQuestTaskContainer_StageClick) == 0x000008, "Wrong alignment on PDAQuestTaskContainer_StageClick");
static_assert(sizeof(PDAQuestTaskContainer_StageClick) == 0x000008, "Wrong size on PDAQuestTaskContainer_StageClick");
static_assert(offsetof(PDAQuestTaskContainer_StageClick, InSlot) == 0x000000, "Member 'PDAQuestTaskContainer_StageClick::InSlot' has a wrong offset!");

// Function Stalker2.PDASlotPanelBase.ClickArrowButton
// 0x0008 (0x0008 - 0x0000)
struct PDASlotPanelBase_ClickArrowButton final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDASlotPanelBase_ClickArrowButton) == 0x000004, "Wrong alignment on PDASlotPanelBase_ClickArrowButton");
static_assert(sizeof(PDASlotPanelBase_ClickArrowButton) == 0x000008, "Wrong size on PDASlotPanelBase_ClickArrowButton");
static_assert(offsetof(PDASlotPanelBase_ClickArrowButton, ButtonId) == 0x000000, "Member 'PDASlotPanelBase_ClickArrowButton::ButtonId' has a wrong offset!");

// Function Stalker2.PDASlotPanelBase.ClickSlot
// 0x0004 (0x0004 - 0x0000)
struct PDASlotPanelBase_ClickSlot final
{
public:
	int32                                         QuestSlotIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDASlotPanelBase_ClickSlot) == 0x000004, "Wrong alignment on PDASlotPanelBase_ClickSlot");
static_assert(sizeof(PDASlotPanelBase_ClickSlot) == 0x000004, "Wrong size on PDASlotPanelBase_ClickSlot");
static_assert(offsetof(PDASlotPanelBase_ClickSlot, QuestSlotIndex) == 0x000000, "Member 'PDASlotPanelBase_ClickSlot::QuestSlotIndex' has a wrong offset!");

// Function Stalker2.PDAQuestPanel.ChangeSelectedQuestSlot
// 0x0004 (0x0004 - 0x0000)
struct PDAQuestPanel_ChangeSelectedQuestSlot final
{
public:
	int32                                         JournalQuestIndex;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDAQuestPanel_ChangeSelectedQuestSlot) == 0x000004, "Wrong alignment on PDAQuestPanel_ChangeSelectedQuestSlot");
static_assert(sizeof(PDAQuestPanel_ChangeSelectedQuestSlot) == 0x000004, "Wrong size on PDAQuestPanel_ChangeSelectedQuestSlot");
static_assert(offsetof(PDAQuestPanel_ChangeSelectedQuestSlot, JournalQuestIndex) == 0x000000, "Member 'PDAQuestPanel_ChangeSelectedQuestSlot::JournalQuestIndex' has a wrong offset!");

// Function Stalker2.GSCNavModifierComponent.AddSelectedComponent
// 0x0008 (0x0008 - 0x0000)
struct GSCNavModifierComponent_AddSelectedComponent final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSCNavModifierComponent_AddSelectedComponent) == 0x000008, "Wrong alignment on GSCNavModifierComponent_AddSelectedComponent");
static_assert(sizeof(GSCNavModifierComponent_AddSelectedComponent) == 0x000008, "Wrong size on GSCNavModifierComponent_AddSelectedComponent");
static_assert(offsetof(GSCNavModifierComponent_AddSelectedComponent, PrimitiveComponent) == 0x000000, "Member 'GSCNavModifierComponent_AddSelectedComponent::PrimitiveComponent' has a wrong offset!");

// Function Stalker2.GSCNavModifierComponent.RemoveSelectedComponent
// 0x0008 (0x0008 - 0x0000)
struct GSCNavModifierComponent_RemoveSelectedComponent final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSCNavModifierComponent_RemoveSelectedComponent) == 0x000008, "Wrong alignment on GSCNavModifierComponent_RemoveSelectedComponent");
static_assert(sizeof(GSCNavModifierComponent_RemoveSelectedComponent) == 0x000008, "Wrong size on GSCNavModifierComponent_RemoveSelectedComponent");
static_assert(offsetof(GSCNavModifierComponent_RemoveSelectedComponent, PrimitiveComponent) == 0x000000, "Member 'GSCNavModifierComponent_RemoveSelectedComponent::PrimitiveComponent' has a wrong offset!");

// Function Stalker2.GSCNavModifierComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct GSCNavModifierComponent_SetEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSCNavModifierComponent_SetEnabled) == 0x000001, "Wrong alignment on GSCNavModifierComponent_SetEnabled");
static_assert(sizeof(GSCNavModifierComponent_SetEnabled) == 0x000001, "Wrong size on GSCNavModifierComponent_SetEnabled");
static_assert(offsetof(GSCNavModifierComponent_SetEnabled, bNewEnabled) == 0x000000, "Member 'GSCNavModifierComponent_SetEnabled::bNewEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.AllwaysShowDropHere
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDK_AllwaysShowDropHere final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_AllwaysShowDropHere) == 0x000001, "Wrong alignment on CustomConsoleManagerDK_AllwaysShowDropHere");
static_assert(sizeof(CustomConsoleManagerDK_AllwaysShowDropHere) == 0x000001, "Wrong size on CustomConsoleManagerDK_AllwaysShowDropHere");
static_assert(offsetof(CustomConsoleManagerDK_AllwaysShowDropHere, bShow) == 0x000000, "Member 'CustomConsoleManagerDK_AllwaysShowDropHere::bShow' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.HideCursorInMouseDrag
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDK_HideCursorInMouseDrag final
{
public:
	bool                                          bHide;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_HideCursorInMouseDrag) == 0x000001, "Wrong alignment on CustomConsoleManagerDK_HideCursorInMouseDrag");
static_assert(sizeof(CustomConsoleManagerDK_HideCursorInMouseDrag) == 0x000001, "Wrong size on CustomConsoleManagerDK_HideCursorInMouseDrag");
static_assert(offsetof(CustomConsoleManagerDK_HideCursorInMouseDrag, bHide) == 0x000000, "Member 'CustomConsoleManagerDK_HideCursorInMouseDrag::bHide' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.MoveItemsInTrade
// 0x0003 (0x0003 - 0x0000)
struct CustomConsoleManagerDK_MoveItemsInTrade final
{
public:
	bool                                          bMoveTraderItems;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveOwnItems;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveBarterItems;                                  // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_MoveItemsInTrade) == 0x000001, "Wrong alignment on CustomConsoleManagerDK_MoveItemsInTrade");
static_assert(sizeof(CustomConsoleManagerDK_MoveItemsInTrade) == 0x000003, "Wrong size on CustomConsoleManagerDK_MoveItemsInTrade");
static_assert(offsetof(CustomConsoleManagerDK_MoveItemsInTrade, bMoveTraderItems) == 0x000000, "Member 'CustomConsoleManagerDK_MoveItemsInTrade::bMoveTraderItems' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_MoveItemsInTrade, bMoveOwnItems) == 0x000001, "Member 'CustomConsoleManagerDK_MoveItemsInTrade::bMoveOwnItems' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_MoveItemsInTrade, bMoveBarterItems) == 0x000002, "Member 'CustomConsoleManagerDK_MoveItemsInTrade::bMoveBarterItems' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.UseStackSplitContextual
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDK_UseStackSplitContextual final
{
public:
	bool                                          bInUse;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_UseStackSplitContextual) == 0x000001, "Wrong alignment on CustomConsoleManagerDK_UseStackSplitContextual");
static_assert(sizeof(CustomConsoleManagerDK_UseStackSplitContextual) == 0x000001, "Wrong size on CustomConsoleManagerDK_UseStackSplitContextual");
static_assert(offsetof(CustomConsoleManagerDK_UseStackSplitContextual, bInUse) == 0x000000, "Member 'CustomConsoleManagerDK_UseStackSplitContextual::bInUse' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XDKFinishQuest
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerDK_XDKFinishQuest final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWin;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerDK_XDKFinishQuest) == 0x000008, "Wrong alignment on CustomConsoleManagerDK_XDKFinishQuest");
static_assert(sizeof(CustomConsoleManagerDK_XDKFinishQuest) == 0x000018, "Wrong size on CustomConsoleManagerDK_XDKFinishQuest");
static_assert(offsetof(CustomConsoleManagerDK_XDKFinishQuest, SID) == 0x000000, "Member 'CustomConsoleManagerDK_XDKFinishQuest::SID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_XDKFinishQuest, bWin) == 0x000010, "Member 'CustomConsoleManagerDK_XDKFinishQuest::bWin' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XDKFinishQuestStage
// 0x0028 (0x0028 - 0x0000)
struct CustomConsoleManagerDK_XDKFinishQuestStage final
{
public:
	class FString                                 QSID;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SSID;                                              // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWin;                                              // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerDK_XDKFinishQuestStage) == 0x000008, "Wrong alignment on CustomConsoleManagerDK_XDKFinishQuestStage");
static_assert(sizeof(CustomConsoleManagerDK_XDKFinishQuestStage) == 0x000028, "Wrong size on CustomConsoleManagerDK_XDKFinishQuestStage");
static_assert(offsetof(CustomConsoleManagerDK_XDKFinishQuestStage, QSID) == 0x000000, "Member 'CustomConsoleManagerDK_XDKFinishQuestStage::QSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_XDKFinishQuestStage, SSID) == 0x000010, "Member 'CustomConsoleManagerDK_XDKFinishQuestStage::SSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_XDKFinishQuestStage, bWin) == 0x000020, "Member 'CustomConsoleManagerDK_XDKFinishQuestStage::bWin' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XDKStartQuest
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerDK_XDKStartQuest final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XDKStartQuest) == 0x000008, "Wrong alignment on CustomConsoleManagerDK_XDKStartQuest");
static_assert(sizeof(CustomConsoleManagerDK_XDKStartQuest) == 0x000010, "Wrong size on CustomConsoleManagerDK_XDKStartQuest");
static_assert(offsetof(CustomConsoleManagerDK_XDKStartQuest, SID) == 0x000000, "Member 'CustomConsoleManagerDK_XDKStartQuest::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XDKStartQuestStage
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerDK_XDKStartQuestStage final
{
public:
	class FString                                 QSID;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SSID;                                              // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XDKStartQuestStage) == 0x000008, "Wrong alignment on CustomConsoleManagerDK_XDKStartQuestStage");
static_assert(sizeof(CustomConsoleManagerDK_XDKStartQuestStage) == 0x000020, "Wrong size on CustomConsoleManagerDK_XDKStartQuestStage");
static_assert(offsetof(CustomConsoleManagerDK_XDKStartQuestStage, QSID) == 0x000000, "Member 'CustomConsoleManagerDK_XDKStartQuestStage::QSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_XDKStartQuestStage, SSID) == 0x000010, "Member 'CustomConsoleManagerDK_XDKStartQuestStage::SSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XDKStartTwoQuestStage
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerDK_XDKStartTwoQuestStage final
{
public:
	class FString                                 QSID;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XDKStartTwoQuestStage) == 0x000008, "Wrong alignment on CustomConsoleManagerDK_XDKStartTwoQuestStage");
static_assert(sizeof(CustomConsoleManagerDK_XDKStartTwoQuestStage) == 0x000010, "Wrong size on CustomConsoleManagerDK_XDKStartTwoQuestStage");
static_assert(offsetof(CustomConsoleManagerDK_XDKStartTwoQuestStage, QSID) == 0x000000, "Member 'CustomConsoleManagerDK_XDKStartTwoQuestStage::QSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XDrawDebugInventoryNavigation
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDK_XDrawDebugInventoryNavigation final
{
public:
	bool                                          bDraw;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XDrawDebugInventoryNavigation) == 0x000001, "Wrong alignment on CustomConsoleManagerDK_XDrawDebugInventoryNavigation");
static_assert(sizeof(CustomConsoleManagerDK_XDrawDebugInventoryNavigation) == 0x000001, "Wrong size on CustomConsoleManagerDK_XDrawDebugInventoryNavigation");
static_assert(offsetof(CustomConsoleManagerDK_XDrawDebugInventoryNavigation, bDraw) == 0x000000, "Member 'CustomConsoleManagerDK_XDrawDebugInventoryNavigation::bDraw' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XGridNavigationVar
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDK_XGridNavigationVar final
{
public:
	int32                                         InVar;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XGridNavigationVar) == 0x000004, "Wrong alignment on CustomConsoleManagerDK_XGridNavigationVar");
static_assert(sizeof(CustomConsoleManagerDK_XGridNavigationVar) == 0x000004, "Wrong size on CustomConsoleManagerDK_XGridNavigationVar");
static_assert(offsetof(CustomConsoleManagerDK_XGridNavigationVar, InVar) == 0x000000, "Member 'CustomConsoleManagerDK_XGridNavigationVar::InVar' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XSetGamepadNavigationBorderSpeed
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed) == 0x000004, "Wrong alignment on CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed");
static_assert(sizeof(CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed) == 0x000004, "Wrong size on CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed");
static_assert(offsetof(CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed, Speed) == 0x000000, "Member 'CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed::Speed' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadInputDelay
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDK_XSetInventoryGamepadInputDelay final
{
public:
	float                                         InputDelay;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XSetInventoryGamepadInputDelay) == 0x000004, "Wrong alignment on CustomConsoleManagerDK_XSetInventoryGamepadInputDelay");
static_assert(sizeof(CustomConsoleManagerDK_XSetInventoryGamepadInputDelay) == 0x000004, "Wrong size on CustomConsoleManagerDK_XSetInventoryGamepadInputDelay");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadInputDelay, InputDelay) == 0x000000, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadInputDelay::InputDelay' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadInputSelectionDelay
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay final
{
public:
	float                                         InputSelectionDelay;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay) == 0x000004, "Wrong alignment on CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay");
static_assert(sizeof(CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay) == 0x000004, "Wrong size on CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay, InputSelectionDelay) == 0x000000, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay::InputSelectionDelay' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadInputThreshold
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold final
{
public:
	float                                         InputThreshold;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold) == 0x000004, "Wrong alignment on CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold");
static_assert(sizeof(CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold) == 0x000004, "Wrong size on CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold, InputThreshold) == 0x000000, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold::InputThreshold' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadNavigationByAxises
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises final
{
public:
	bool                                          bAxes;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises) == 0x000001, "Wrong alignment on CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises");
static_assert(sizeof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises) == 0x000001, "Wrong size on CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises, bAxes) == 0x000000, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises::bAxes' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadNavigationParams
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams final
{
public:
	float                                         InputDelay;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputThreshold;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectionDelay;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams) == 0x000004, "Wrong alignment on CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams");
static_assert(sizeof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams) == 0x00000C, "Wrong size on CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams, InputDelay) == 0x000000, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams::InputDelay' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams, InputThreshold) == 0x000004, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams::InputThreshold' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams, SelectionDelay) == 0x000008, "Member 'CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams::SelectionDelay' has a wrong offset!");

// Function Stalker2.AgentBehaviourEventData.GetGoalType
// 0x0001 (0x0001 - 0x0000)
struct AgentBehaviourEventData_GetGoalType final
{
public:
	EGoalType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgentBehaviourEventData_GetGoalType) == 0x000001, "Wrong alignment on AgentBehaviourEventData_GetGoalType");
static_assert(sizeof(AgentBehaviourEventData_GetGoalType) == 0x000001, "Wrong size on AgentBehaviourEventData_GetGoalType");
static_assert(offsetof(AgentBehaviourEventData_GetGoalType, ReturnValue) == 0x000000, "Member 'AgentBehaviourEventData_GetGoalType::ReturnValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerGA.XToggleAnalyticsTracking_Player
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerGA_XToggleAnalyticsTracking_Player final
{
public:
	bool                                          bTracking;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerGA_XToggleAnalyticsTracking_Player) == 0x000001, "Wrong alignment on CustomConsoleManagerGA_XToggleAnalyticsTracking_Player");
static_assert(sizeof(CustomConsoleManagerGA_XToggleAnalyticsTracking_Player) == 0x000001, "Wrong size on CustomConsoleManagerGA_XToggleAnalyticsTracking_Player");
static_assert(offsetof(CustomConsoleManagerGA_XToggleAnalyticsTracking_Player, bTracking) == 0x000000, "Member 'CustomConsoleManagerGA_XToggleAnalyticsTracking_Player::bTracking' has a wrong offset!");

// Function Stalker2.WaterContactController.IsPathToWaterSurfaceObstructed
// 0x0010 (0x0010 - 0x0000)
struct WaterContactController_IsPathToWaterSurfaceObstructed final
{
public:
	struct FWaterSurfaceObstructionResult         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterContactController_IsPathToWaterSurfaceObstructed) == 0x000008, "Wrong alignment on WaterContactController_IsPathToWaterSurfaceObstructed");
static_assert(sizeof(WaterContactController_IsPathToWaterSurfaceObstructed) == 0x000010, "Wrong size on WaterContactController_IsPathToWaterSurfaceObstructed");
static_assert(offsetof(WaterContactController_IsPathToWaterSurfaceObstructed, ReturnValue) == 0x000000, "Member 'WaterContactController_IsPathToWaterSurfaceObstructed::ReturnValue' has a wrong offset!");

// Function Stalker2.WaterContactController.ProjectOwnerPositionOnWaterSurface
// 0x0018 (0x0018 - 0x0000)
struct WaterContactController_ProjectOwnerPositionOnWaterSurface final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterContactController_ProjectOwnerPositionOnWaterSurface) == 0x000008, "Wrong alignment on WaterContactController_ProjectOwnerPositionOnWaterSurface");
static_assert(sizeof(WaterContactController_ProjectOwnerPositionOnWaterSurface) == 0x000018, "Wrong size on WaterContactController_ProjectOwnerPositionOnWaterSurface");
static_assert(offsetof(WaterContactController_ProjectOwnerPositionOnWaterSurface, ReturnValue) == 0x000000, "Member 'WaterContactController_ProjectOwnerPositionOnWaterSurface::ReturnValue' has a wrong offset!");

// Function Stalker2.EjectedMagazine.OnHit
// 0x0118 (0x0118 - 0x0000)
struct EjectedMagazine_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EjectedMagazine_OnHit) == 0x000008, "Wrong alignment on EjectedMagazine_OnHit");
static_assert(sizeof(EjectedMagazine_OnHit) == 0x000118, "Wrong size on EjectedMagazine_OnHit");
static_assert(offsetof(EjectedMagazine_OnHit, HitComp) == 0x000000, "Member 'EjectedMagazine_OnHit::HitComp' has a wrong offset!");
static_assert(offsetof(EjectedMagazine_OnHit, OtherActor) == 0x000008, "Member 'EjectedMagazine_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(EjectedMagazine_OnHit, OtherComp) == 0x000010, "Member 'EjectedMagazine_OnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(EjectedMagazine_OnHit, NormalImpulse) == 0x000018, "Member 'EjectedMagazine_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(EjectedMagazine_OnHit, Hit) == 0x000030, "Member 'EjectedMagazine_OnHit::Hit' has a wrong offset!");

// Function Stalker2.AnimNotify_LaunchVoiceOver.GetVoiceoverSIDOptions
// 0x0010 (0x0010 - 0x0000)
struct AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions) == 0x000008, "Wrong alignment on AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions");
static_assert(sizeof(AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions) == 0x000010, "Wrong size on AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions");
static_assert(offsetof(AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions, ReturnValue) == 0x000000, "Member 'AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions::ReturnValue' has a wrong offset!");

// Function Stalker2.Global.GoToMap
// 0x0008 (0x0008 - 0x0000)
struct Global_GoToMap final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Global_GoToMap) == 0x000004, "Wrong alignment on Global_GoToMap");
static_assert(sizeof(Global_GoToMap) == 0x000008, "Wrong size on Global_GoToMap");
static_assert(offsetof(Global_GoToMap, MapName) == 0x000000, "Member 'Global_GoToMap::MapName' has a wrong offset!");

// Function Stalker2.ExplosionComponent.Explode
// 0x0004 (0x0004 - 0x0000)
struct ExplosionComponent_Explode final
{
public:
	struct FUID                                   ExplosionInstigatorUID;                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_Explode) == 0x000004, "Wrong alignment on ExplosionComponent_Explode");
static_assert(sizeof(ExplosionComponent_Explode) == 0x000004, "Wrong size on ExplosionComponent_Explode");
static_assert(offsetof(ExplosionComponent_Explode, ExplosionInstigatorUID) == 0x000000, "Member 'ExplosionComponent_Explode::ExplosionInstigatorUID' has a wrong offset!");

// Function Stalker2.ExplosionComponent.ExplodeAtCustomLocation
// 0x0020 (0x0020 - 0x0000)
struct ExplosionComponent_ExplodeAtCustomLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ExplosionInstigator;                               // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_ExplodeAtCustomLocation) == 0x000008, "Wrong alignment on ExplosionComponent_ExplodeAtCustomLocation");
static_assert(sizeof(ExplosionComponent_ExplodeAtCustomLocation) == 0x000020, "Wrong size on ExplosionComponent_ExplodeAtCustomLocation");
static_assert(offsetof(ExplosionComponent_ExplodeAtCustomLocation, Location) == 0x000000, "Member 'ExplosionComponent_ExplodeAtCustomLocation::Location' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ExplodeAtCustomLocation, ExplosionInstigator) == 0x000018, "Member 'ExplosionComponent_ExplodeAtCustomLocation::ExplosionInstigator' has a wrong offset!");

// Function Stalker2.ExplosionComponent.ExplodeWithCustomLocation
// 0x0020 (0x0020 - 0x0000)
struct ExplosionComponent_ExplodeWithCustomLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUID                                   ExplosionInstigatorUID;                            // 0x0018(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExplosionComponent_ExplodeWithCustomLocation) == 0x000008, "Wrong alignment on ExplosionComponent_ExplodeWithCustomLocation");
static_assert(sizeof(ExplosionComponent_ExplodeWithCustomLocation) == 0x000020, "Wrong size on ExplosionComponent_ExplodeWithCustomLocation");
static_assert(offsetof(ExplosionComponent_ExplodeWithCustomLocation, Location) == 0x000000, "Member 'ExplosionComponent_ExplodeWithCustomLocation::Location' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ExplodeWithCustomLocation, ExplosionInstigatorUID) == 0x000018, "Member 'ExplosionComponent_ExplodeWithCustomLocation::ExplosionInstigatorUID' has a wrong offset!");

// Function Stalker2.AnimNotify_PlayInteractablesFX.GetAvailableBones
// 0x0010 (0x0010 - 0x0000)
struct AnimNotify_PlayInteractablesFX_GetAvailableBones final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_PlayInteractablesFX_GetAvailableBones) == 0x000008, "Wrong alignment on AnimNotify_PlayInteractablesFX_GetAvailableBones");
static_assert(sizeof(AnimNotify_PlayInteractablesFX_GetAvailableBones) == 0x000010, "Wrong size on AnimNotify_PlayInteractablesFX_GetAvailableBones");
static_assert(offsetof(AnimNotify_PlayInteractablesFX_GetAvailableBones, ReturnValue) == 0x000000, "Member 'AnimNotify_PlayInteractablesFX_GetAvailableBones::ReturnValue' has a wrong offset!");

// Function Stalker2.GSCAblityBlueprintFunctions.ExecuteAbilityByActivationTagAttackPayload
// 0x0010 (0x0010 - 0x0000)
struct GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivationTag;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload) == 0x000008, "Wrong alignment on GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload");
static_assert(sizeof(GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload) == 0x000010, "Wrong size on GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload");
static_assert(offsetof(GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload, Actor) == 0x000000, "Member 'GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload::Actor' has a wrong offset!");
static_assert(offsetof(GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload, ActivationTag) == 0x000008, "Member 'GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload::ActivationTag' has a wrong offset!");

// Function Stalker2.OldSchoolTrigger.OnTriggerBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct OldSchoolTrigger_OnTriggerBeginOverlap final
{
public:
	const class UPrimitiveComponent*              Comp;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OtherActor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPrimitiveComponent*              OtherComp;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OldSchoolTrigger_OnTriggerBeginOverlap) == 0x000008, "Wrong alignment on OldSchoolTrigger_OnTriggerBeginOverlap");
static_assert(sizeof(OldSchoolTrigger_OnTriggerBeginOverlap) == 0x000108, "Wrong size on OldSchoolTrigger_OnTriggerBeginOverlap");
static_assert(offsetof(OldSchoolTrigger_OnTriggerBeginOverlap, Comp) == 0x000000, "Member 'OldSchoolTrigger_OnTriggerBeginOverlap::Comp' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerBeginOverlap, OtherActor) == 0x000008, "Member 'OldSchoolTrigger_OnTriggerBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerBeginOverlap, OtherComp) == 0x000010, "Member 'OldSchoolTrigger_OnTriggerBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'OldSchoolTrigger_OnTriggerBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerBeginOverlap, bFromSweep) == 0x00001C, "Member 'OldSchoolTrigger_OnTriggerBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerBeginOverlap, SweepResult) == 0x000020, "Member 'OldSchoolTrigger_OnTriggerBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.OldSchoolTrigger.OnTriggerEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct OldSchoolTrigger_OnTriggerEndOverlap final
{
public:
	const class UPrimitiveComponent*              OverlappedComponent;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OtherActor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPrimitiveComponent*              OtherComp;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OldSchoolTrigger_OnTriggerEndOverlap) == 0x000008, "Wrong alignment on OldSchoolTrigger_OnTriggerEndOverlap");
static_assert(sizeof(OldSchoolTrigger_OnTriggerEndOverlap) == 0x000020, "Wrong size on OldSchoolTrigger_OnTriggerEndOverlap");
static_assert(offsetof(OldSchoolTrigger_OnTriggerEndOverlap, OverlappedComponent) == 0x000000, "Member 'OldSchoolTrigger_OnTriggerEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerEndOverlap, OtherActor) == 0x000008, "Member 'OldSchoolTrigger_OnTriggerEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerEndOverlap, OtherComp) == 0x000010, "Member 'OldSchoolTrigger_OnTriggerEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(OldSchoolTrigger_OnTriggerEndOverlap, OtherBodyIndex) == 0x000018, "Member 'OldSchoolTrigger_OnTriggerEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.PC.SetInteractionTarget
// 0x0008 (0x0008 - 0x0000)
struct PC_SetInteractionTarget final
{
public:
	const class UInteractionComponent*            Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PC_SetInteractionTarget) == 0x000008, "Wrong alignment on PC_SetInteractionTarget");
static_assert(sizeof(PC_SetInteractionTarget) == 0x000008, "Wrong size on PC_SetInteractionTarget");
static_assert(offsetof(PC_SetInteractionTarget, Target) == 0x000000, "Member 'PC_SetInteractionTarget::Target' has a wrong offset!");

// Function Stalker2.PC.SetLegsIKEnabled
// 0x0001 (0x0001 - 0x0000)
struct PC_SetLegsIKEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PC_SetLegsIKEnabled) == 0x000001, "Wrong alignment on PC_SetLegsIKEnabled");
static_assert(sizeof(PC_SetLegsIKEnabled) == 0x000001, "Wrong size on PC_SetLegsIKEnabled");
static_assert(offsetof(PC_SetLegsIKEnabled, bEnabled) == 0x000000, "Member 'PC_SetLegsIKEnabled::bEnabled' has a wrong offset!");

// Function Stalker2.PC.GetInteractionTarget
// 0x0008 (0x0008 - 0x0000)
struct PC_GetInteractionTarget final
{
public:
	class UInteractionComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PC_GetInteractionTarget) == 0x000008, "Wrong alignment on PC_GetInteractionTarget");
static_assert(sizeof(PC_GetInteractionTarget) == 0x000008, "Wrong size on PC_GetInteractionTarget");
static_assert(offsetof(PC_GetInteractionTarget, ReturnValue) == 0x000000, "Member 'PC_GetInteractionTarget::ReturnValue' has a wrong offset!");

// Function Stalker2.Grenade.OnHit
// 0x0110 (0x0110 - 0x0000)
struct Grenade_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Grenade_OnHit) == 0x000008, "Wrong alignment on Grenade_OnHit");
static_assert(sizeof(Grenade_OnHit) == 0x000110, "Wrong size on Grenade_OnHit");
static_assert(offsetof(Grenade_OnHit, SelfActor) == 0x000000, "Member 'Grenade_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(Grenade_OnHit, OtherActor) == 0x000008, "Member 'Grenade_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Grenade_OnHit, NormalImpulse) == 0x000010, "Member 'Grenade_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Grenade_OnHit, Hit) == 0x000028, "Member 'Grenade_OnHit::Hit' has a wrong offset!");

// Function Stalker2.SettingsElementPercent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct SettingsElementPercent_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsElementPercent_SetValue) == 0x000004, "Wrong alignment on SettingsElementPercent_SetValue");
static_assert(sizeof(SettingsElementPercent_SetValue) == 0x000008, "Wrong size on SettingsElementPercent_SetValue");
static_assert(offsetof(SettingsElementPercent_SetValue, InValue) == 0x000000, "Member 'SettingsElementPercent_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(SettingsElementPercent_SetValue, bForce) == 0x000004, "Member 'SettingsElementPercent_SetValue::bForce' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.TransformUID
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_TransformUID final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_TransformUID) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_TransformUID");
static_assert(sizeof(CustomConsoleManagerRK_TransformUID) == 0x000004, "Wrong size on CustomConsoleManagerRK_TransformUID");
static_assert(offsetof(CustomConsoleManagerRK_TransformUID, UID) == 0x000000, "Member 'CustomConsoleManagerRK_TransformUID::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XApplyEffectOnInteractNPC
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerRK_XApplyEffectOnInteractNPC final
{
public:
	class FString                                 EffectPrototypeSID;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XApplyEffectOnInteractNPC) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XApplyEffectOnInteractNPC");
static_assert(sizeof(CustomConsoleManagerRK_XApplyEffectOnInteractNPC) == 0x000010, "Wrong size on CustomConsoleManagerRK_XApplyEffectOnInteractNPC");
static_assert(offsetof(CustomConsoleManagerRK_XApplyEffectOnInteractNPC, EffectPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerRK_XApplyEffectOnInteractNPC::EffectPrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XApplyEffectOnNPCByUID
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerRK_XApplyEffectOnNPCByUID final
{
public:
	class FString                                 EffectPrototypeSID;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerRK_XApplyEffectOnNPCByUID) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XApplyEffectOnNPCByUID");
static_assert(sizeof(CustomConsoleManagerRK_XApplyEffectOnNPCByUID) == 0x000018, "Wrong size on CustomConsoleManagerRK_XApplyEffectOnNPCByUID");
static_assert(offsetof(CustomConsoleManagerRK_XApplyEffectOnNPCByUID, EffectPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerRK_XApplyEffectOnNPCByUID::EffectPrototypeSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XApplyEffectOnNPCByUID, UID) == 0x000010, "Member 'CustomConsoleManagerRK_XApplyEffectOnNPCByUID::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XApplyEffectOnPlayer
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerRK_XApplyEffectOnPlayer final
{
public:
	class FString                                 EffectPrototypeSID;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XApplyEffectOnPlayer) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XApplyEffectOnPlayer");
static_assert(sizeof(CustomConsoleManagerRK_XApplyEffectOnPlayer) == 0x000010, "Wrong size on CustomConsoleManagerRK_XApplyEffectOnPlayer");
static_assert(offsetof(CustomConsoleManagerRK_XApplyEffectOnPlayer, EffectPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerRK_XApplyEffectOnPlayer::EffectPrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XDisableFrictionForPlayerInBulb
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb final
{
public:
	bool                                          bInDrawBulbDebug;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb");
static_assert(sizeof(CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb) == 0x000001, "Wrong size on CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb");
static_assert(offsetof(CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb, bInDrawBulbDebug) == 0x000000, "Member 'CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb::bInDrawBulbDebug' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XDrawPsyFieldVolumes
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XDrawPsyFieldVolumes final
{
public:
	bool                                          bInDrawPsyField;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XDrawPsyFieldVolumes) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XDrawPsyFieldVolumes");
static_assert(sizeof(CustomConsoleManagerRK_XDrawPsyFieldVolumes) == 0x000001, "Wrong size on CustomConsoleManagerRK_XDrawPsyFieldVolumes");
static_assert(offsetof(CustomConsoleManagerRK_XDrawPsyFieldVolumes, bInDrawPsyField) == 0x000000, "Member 'CustomConsoleManagerRK_XDrawPsyFieldVolumes::bInDrawPsyField' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XIncreaseEnsuresLimit
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XIncreaseEnsuresLimit final
{
public:
	int32                                         IncreaseLimit;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XIncreaseEnsuresLimit) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XIncreaseEnsuresLimit");
static_assert(sizeof(CustomConsoleManagerRK_XIncreaseEnsuresLimit) == 0x000004, "Wrong size on CustomConsoleManagerRK_XIncreaseEnsuresLimit");
static_assert(offsetof(CustomConsoleManagerRK_XIncreaseEnsuresLimit, IncreaseLimit) == 0x000000, "Member 'CustomConsoleManagerRK_XIncreaseEnsuresLimit::IncreaseLimit' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetGlobalBool
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerRK_XSetGlobalBool final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerRK_XSetGlobalBool) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XSetGlobalBool");
static_assert(sizeof(CustomConsoleManagerRK_XSetGlobalBool) == 0x000018, "Wrong size on CustomConsoleManagerRK_XSetGlobalBool");
static_assert(offsetof(CustomConsoleManagerRK_XSetGlobalBool, SID) == 0x000000, "Member 'CustomConsoleManagerRK_XSetGlobalBool::SID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetGlobalBool, InValue) == 0x000010, "Member 'CustomConsoleManagerRK_XSetGlobalBool::InValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetGlobalObjectPath
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerRK_XSetGlobalObjectPath final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSetGlobalObjectPath) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XSetGlobalObjectPath");
static_assert(sizeof(CustomConsoleManagerRK_XSetGlobalObjectPath) == 0x000020, "Wrong size on CustomConsoleManagerRK_XSetGlobalObjectPath");
static_assert(offsetof(CustomConsoleManagerRK_XSetGlobalObjectPath, SID) == 0x000000, "Member 'CustomConsoleManagerRK_XSetGlobalObjectPath::SID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetGlobalObjectPath, InValue) == 0x000010, "Member 'CustomConsoleManagerRK_XSetGlobalObjectPath::InValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetPsyNPCFilterParams
// 0x0040 (0x0040 - 0x0000)
struct CustomConsoleManagerRK_XSetPsyNPCFilterParams final
{
public:
	bool                                          bIsPsyPhantom;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EAgentType                                    AgentType1;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAgentType                                    AgentType2;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ObjPrototypeFilter1;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjPrototypeFilter2;                               // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjPrototypeFilter3;                               // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSetPsyNPCFilterParams) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XSetPsyNPCFilterParams");
static_assert(sizeof(CustomConsoleManagerRK_XSetPsyNPCFilterParams) == 0x000040, "Wrong size on CustomConsoleManagerRK_XSetPsyNPCFilterParams");
static_assert(offsetof(CustomConsoleManagerRK_XSetPsyNPCFilterParams, bIsPsyPhantom) == 0x000000, "Member 'CustomConsoleManagerRK_XSetPsyNPCFilterParams::bIsPsyPhantom' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetPsyNPCFilterParams, AgentType1) == 0x000004, "Member 'CustomConsoleManagerRK_XSetPsyNPCFilterParams::AgentType1' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetPsyNPCFilterParams, AgentType2) == 0x000008, "Member 'CustomConsoleManagerRK_XSetPsyNPCFilterParams::AgentType2' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetPsyNPCFilterParams, ObjPrototypeFilter1) == 0x000010, "Member 'CustomConsoleManagerRK_XSetPsyNPCFilterParams::ObjPrototypeFilter1' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetPsyNPCFilterParams, ObjPrototypeFilter2) == 0x000020, "Member 'CustomConsoleManagerRK_XSetPsyNPCFilterParams::ObjPrototypeFilter2' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSetPsyNPCFilterParams, ObjPrototypeFilter3) == 0x000030, "Member 'CustomConsoleManagerRK_XSetPsyNPCFilterParams::ObjPrototypeFilter3' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetWeatherLocked
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XSetWeatherLocked final
{
public:
	bool                                          bNowLocked;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSetWeatherLocked) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XSetWeatherLocked");
static_assert(sizeof(CustomConsoleManagerRK_XSetWeatherLocked) == 0x000001, "Wrong size on CustomConsoleManagerRK_XSetWeatherLocked");
static_assert(offsetof(CustomConsoleManagerRK_XSetWeatherLocked, bNowLocked) == 0x000000, "Member 'CustomConsoleManagerRK_XSetWeatherLocked::bNowLocked' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSpawnPsyNPC
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerRK_XSpawnPsyNPC final
{
public:
	bool                                          bIsPsyPhantom;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ObjPrototypeSID;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERank                                         Rank;                                              // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSpawnPsyNPC) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XSpawnPsyNPC");
static_assert(sizeof(CustomConsoleManagerRK_XSpawnPsyNPC) == 0x000020, "Wrong size on CustomConsoleManagerRK_XSpawnPsyNPC");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnPsyNPC, bIsPsyPhantom) == 0x000000, "Member 'CustomConsoleManagerRK_XSpawnPsyNPC::bIsPsyPhantom' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnPsyNPC, ObjPrototypeSID) == 0x000008, "Member 'CustomConsoleManagerRK_XSpawnPsyNPC::ObjPrototypeSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnPsyNPC, Rank) == 0x000018, "Member 'CustomConsoleManagerRK_XSpawnPsyNPC::Rank' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnPsyNPC, Count) == 0x00001C, "Member 'CustomConsoleManagerRK_XSpawnPsyNPC::Count' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XStartBenchmark
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerRK_XStartBenchmark final
{
public:
	float                                         CameraHeight;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleRadius;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialPitch;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialYaw;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BenchRuns;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProfileCsv;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerRK_XStartBenchmark) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XStartBenchmark");
static_assert(sizeof(CustomConsoleManagerRK_XStartBenchmark) == 0x000018, "Wrong size on CustomConsoleManagerRK_XStartBenchmark");
static_assert(offsetof(CustomConsoleManagerRK_XStartBenchmark, CameraHeight) == 0x000000, "Member 'CustomConsoleManagerRK_XStartBenchmark::CameraHeight' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartBenchmark, CircleRadius) == 0x000004, "Member 'CustomConsoleManagerRK_XStartBenchmark::CircleRadius' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartBenchmark, InitialPitch) == 0x000008, "Member 'CustomConsoleManagerRK_XStartBenchmark::InitialPitch' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartBenchmark, InitialYaw) == 0x00000C, "Member 'CustomConsoleManagerRK_XStartBenchmark::InitialYaw' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartBenchmark, BenchRuns) == 0x000010, "Member 'CustomConsoleManagerRK_XStartBenchmark::BenchRuns' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartBenchmark, bProfileCsv) == 0x000014, "Member 'CustomConsoleManagerRK_XStartBenchmark::bProfileCsv' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XStartGSCBackgroundProfiler
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerRK_XStartGSCBackgroundProfiler final
{
public:
	float                                         MsecThreshold;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RamMBThreshold;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InFramesToCaptureOnSpike;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InFrameCountToComputeAverage;                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XStartGSCBackgroundProfiler) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XStartGSCBackgroundProfiler");
static_assert(sizeof(CustomConsoleManagerRK_XStartGSCBackgroundProfiler) == 0x000010, "Wrong size on CustomConsoleManagerRK_XStartGSCBackgroundProfiler");
static_assert(offsetof(CustomConsoleManagerRK_XStartGSCBackgroundProfiler, MsecThreshold) == 0x000000, "Member 'CustomConsoleManagerRK_XStartGSCBackgroundProfiler::MsecThreshold' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartGSCBackgroundProfiler, RamMBThreshold) == 0x000004, "Member 'CustomConsoleManagerRK_XStartGSCBackgroundProfiler::RamMBThreshold' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartGSCBackgroundProfiler, InFramesToCaptureOnSpike) == 0x000008, "Member 'CustomConsoleManagerRK_XStartGSCBackgroundProfiler::InFramesToCaptureOnSpike' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XStartGSCBackgroundProfiler, InFrameCountToComputeAverage) == 0x00000C, "Member 'CustomConsoleManagerRK_XStartGSCBackgroundProfiler::InFrameCountToComputeAverage' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XTeleportToObjUID
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XTeleportToObjUID final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XTeleportToObjUID) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XTeleportToObjUID");
static_assert(sizeof(CustomConsoleManagerRK_XTeleportToObjUID) == 0x000004, "Wrong size on CustomConsoleManagerRK_XTeleportToObjUID");
static_assert(offsetof(CustomConsoleManagerRK_XTeleportToObjUID, ObjUID) == 0x000000, "Member 'CustomConsoleManagerRK_XTeleportToObjUID::ObjUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XToggleDetailedVitalsStat
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XToggleDetailedVitalsStat final
{
public:
	EVitalType                                    VitalType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XToggleDetailedVitalsStat) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XToggleDetailedVitalsStat");
static_assert(sizeof(CustomConsoleManagerRK_XToggleDetailedVitalsStat) == 0x000001, "Wrong size on CustomConsoleManagerRK_XToggleDetailedVitalsStat");
static_assert(offsetof(CustomConsoleManagerRK_XToggleDetailedVitalsStat, VitalType) == 0x000000, "Member 'CustomConsoleManagerRK_XToggleDetailedVitalsStat::VitalType' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XToggleDrawInteractNPCStats
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerRK_XToggleDrawInteractNPCStats final
{
public:
	float                                         ValueFontXSizeCoef;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueFontYSizeCoef;                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XToggleDrawInteractNPCStats) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XToggleDrawInteractNPCStats");
static_assert(sizeof(CustomConsoleManagerRK_XToggleDrawInteractNPCStats) == 0x000008, "Wrong size on CustomConsoleManagerRK_XToggleDrawInteractNPCStats");
static_assert(offsetof(CustomConsoleManagerRK_XToggleDrawInteractNPCStats, ValueFontXSizeCoef) == 0x000000, "Member 'CustomConsoleManagerRK_XToggleDrawInteractNPCStats::ValueFontXSizeCoef' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XToggleDrawInteractNPCStats, ValueFontYSizeCoef) == 0x000004, "Member 'CustomConsoleManagerRK_XToggleDrawInteractNPCStats::ValueFontYSizeCoef' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XToggleDrawPlayerStats
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerRK_XToggleDrawPlayerStats final
{
public:
	float                                         ValueFontXSizeCoef;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueFontYSizeCoef;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XToggleDrawPlayerStats) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XToggleDrawPlayerStats");
static_assert(sizeof(CustomConsoleManagerRK_XToggleDrawPlayerStats) == 0x000008, "Wrong size on CustomConsoleManagerRK_XToggleDrawPlayerStats");
static_assert(offsetof(CustomConsoleManagerRK_XToggleDrawPlayerStats, ValueFontXSizeCoef) == 0x000000, "Member 'CustomConsoleManagerRK_XToggleDrawPlayerStats::ValueFontXSizeCoef' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XToggleDrawPlayerStats, ValueFontYSizeCoef) == 0x000004, "Member 'CustomConsoleManagerRK_XToggleDrawPlayerStats::ValueFontYSizeCoef' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XToggleHUDElements
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XToggleHUDElements final
{
public:
	EHUDElements                                  ElementsToHide;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XToggleHUDElements) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XToggleHUDElements");
static_assert(sizeof(CustomConsoleManagerRK_XToggleHUDElements) == 0x000004, "Wrong size on CustomConsoleManagerRK_XToggleHUDElements");
static_assert(offsetof(CustomConsoleManagerRK_XToggleHUDElements, ElementsToHide) == 0x000000, "Member 'CustomConsoleManagerRK_XToggleHUDElements::ElementsToHide' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XToggleNPCFlashlight
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XToggleNPCFlashlight final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XToggleNPCFlashlight) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XToggleNPCFlashlight");
static_assert(sizeof(CustomConsoleManagerRK_XToggleNPCFlashlight) == 0x000004, "Wrong size on CustomConsoleManagerRK_XToggleNPCFlashlight");
static_assert(offsetof(CustomConsoleManagerRK_XToggleNPCFlashlight, UID) == 0x000000, "Member 'CustomConsoleManagerRK_XToggleNPCFlashlight::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XApplyUpgradeBySID
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerRK_XApplyUpgradeBySID final
{
public:
	class FString                                 ItemPrototypeSID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradePrototypeSID;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XApplyUpgradeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XApplyUpgradeBySID");
static_assert(sizeof(CustomConsoleManagerRK_XApplyUpgradeBySID) == 0x000020, "Wrong size on CustomConsoleManagerRK_XApplyUpgradeBySID");
static_assert(offsetof(CustomConsoleManagerRK_XApplyUpgradeBySID, ItemPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerRK_XApplyUpgradeBySID::ItemPrototypeSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XApplyUpgradeBySID, UpgradePrototypeSID) == 0x000010, "Member 'CustomConsoleManagerRK_XApplyUpgradeBySID::UpgradePrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XCreateItemInInventoryByID
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerRK_XCreateItemInInventoryByID final
{
public:
	class FString                                 PrototypeID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjUID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Durability;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerRK_XCreateItemInInventoryByID) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XCreateItemInInventoryByID");
static_assert(sizeof(CustomConsoleManagerRK_XCreateItemInInventoryByID) == 0x000020, "Wrong size on CustomConsoleManagerRK_XCreateItemInInventoryByID");
static_assert(offsetof(CustomConsoleManagerRK_XCreateItemInInventoryByID, PrototypeID) == 0x000000, "Member 'CustomConsoleManagerRK_XCreateItemInInventoryByID::PrototypeID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XCreateItemInInventoryByID, ObjUID) == 0x000010, "Member 'CustomConsoleManagerRK_XCreateItemInInventoryByID::ObjUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XCreateItemInInventoryByID, Count) == 0x000014, "Member 'CustomConsoleManagerRK_XCreateItemInInventoryByID::Count' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XCreateItemInInventoryByID, Durability) == 0x000018, "Member 'CustomConsoleManagerRK_XCreateItemInInventoryByID::Durability' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XDealDamage
// 0x0030 (0x0030 - 0x0000)
struct CustomConsoleManagerRK_XDealDamage final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorDamage;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorPiercing;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bleeding;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BleedingChanceIncrement;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneHit;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XDealDamage) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XDealDamage");
static_assert(sizeof(CustomConsoleManagerRK_XDealDamage) == 0x000030, "Wrong size on CustomConsoleManagerRK_XDealDamage");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, TargetUID) == 0x000000, "Member 'CustomConsoleManagerRK_XDealDamage::TargetUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, Damage) == 0x000004, "Member 'CustomConsoleManagerRK_XDealDamage::Damage' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, ArmorDamage) == 0x000008, "Member 'CustomConsoleManagerRK_XDealDamage::ArmorDamage' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, ArmorPiercing) == 0x00000C, "Member 'CustomConsoleManagerRK_XDealDamage::ArmorPiercing' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, Bleeding) == 0x000010, "Member 'CustomConsoleManagerRK_XDealDamage::Bleeding' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, BleedingChanceIncrement) == 0x000014, "Member 'CustomConsoleManagerRK_XDealDamage::BleedingChanceIncrement' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, Type) == 0x000018, "Member 'CustomConsoleManagerRK_XDealDamage::Type' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDamage, BoneHit) == 0x000020, "Member 'CustomConsoleManagerRK_XDealDamage::BoneHit' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XDealDurabilityDamage
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerRK_XDealDurabilityDamage final
{
public:
	int32                                         ItemUID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurabilityDamage;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XDealDurabilityDamage) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XDealDurabilityDamage");
static_assert(sizeof(CustomConsoleManagerRK_XDealDurabilityDamage) == 0x000008, "Wrong size on CustomConsoleManagerRK_XDealDurabilityDamage");
static_assert(offsetof(CustomConsoleManagerRK_XDealDurabilityDamage, ItemUID) == 0x000000, "Member 'CustomConsoleManagerRK_XDealDurabilityDamage::ItemUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XDealDurabilityDamage, DurabilityDamage) == 0x000004, "Member 'CustomConsoleManagerRK_XDealDurabilityDamage::DurabilityDamage' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XFileExists
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerRK_XFileExists final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XFileExists) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XFileExists");
static_assert(sizeof(CustomConsoleManagerRK_XFileExists) == 0x000010, "Wrong size on CustomConsoleManagerRK_XFileExists");
static_assert(offsetof(CustomConsoleManagerRK_XFileExists, FilePath) == 0x000000, "Member 'CustomConsoleManagerRK_XFileExists::FilePath' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XForceActorInteract
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerRK_XForceActorInteract final
{
public:
	int32                                         ActorUID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractableUID;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XForceActorInteract) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XForceActorInteract");
static_assert(sizeof(CustomConsoleManagerRK_XForceActorInteract) == 0x000008, "Wrong size on CustomConsoleManagerRK_XForceActorInteract");
static_assert(offsetof(CustomConsoleManagerRK_XForceActorInteract, ActorUID) == 0x000000, "Member 'CustomConsoleManagerRK_XForceActorInteract::ActorUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XForceActorInteract, InteractableUID) == 0x000004, "Member 'CustomConsoleManagerRK_XForceActorInteract::InteractableUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XModifyBleeding
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerRK_XModifyBleeding final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddBleeding;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XModifyBleeding) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XModifyBleeding");
static_assert(sizeof(CustomConsoleManagerRK_XModifyBleeding) == 0x000008, "Wrong size on CustomConsoleManagerRK_XModifyBleeding");
static_assert(offsetof(CustomConsoleManagerRK_XModifyBleeding, TargetUID) == 0x000000, "Member 'CustomConsoleManagerRK_XModifyBleeding::TargetUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XModifyBleeding, AddBleeding) == 0x000004, "Member 'CustomConsoleManagerRK_XModifyBleeding::AddBleeding' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XModifyStamina
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerRK_XModifyStamina final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FPSpent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XModifyStamina) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XModifyStamina");
static_assert(sizeof(CustomConsoleManagerRK_XModifyStamina) == 0x000008, "Wrong size on CustomConsoleManagerRK_XModifyStamina");
static_assert(offsetof(CustomConsoleManagerRK_XModifyStamina, TargetUID) == 0x000000, "Member 'CustomConsoleManagerRK_XModifyStamina::TargetUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XModifyStamina, FPSpent) == 0x000004, "Member 'CustomConsoleManagerRK_XModifyStamina::FPSpent' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XObjRecalcAllCachedStats
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XObjRecalcAllCachedStats final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XObjRecalcAllCachedStats) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XObjRecalcAllCachedStats");
static_assert(sizeof(CustomConsoleManagerRK_XObjRecalcAllCachedStats) == 0x000004, "Wrong size on CustomConsoleManagerRK_XObjRecalcAllCachedStats");
static_assert(offsetof(CustomConsoleManagerRK_XObjRecalcAllCachedStats, ObjUID) == 0x000000, "Member 'CustomConsoleManagerRK_XObjRecalcAllCachedStats::ObjUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XObjRecalcAllEquipment
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XObjRecalcAllEquipment final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XObjRecalcAllEquipment) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XObjRecalcAllEquipment");
static_assert(sizeof(CustomConsoleManagerRK_XObjRecalcAllEquipment) == 0x000004, "Wrong size on CustomConsoleManagerRK_XObjRecalcAllEquipment");
static_assert(offsetof(CustomConsoleManagerRK_XObjRecalcAllEquipment, ObjUID) == 0x000000, "Member 'CustomConsoleManagerRK_XObjRecalcAllEquipment::ObjUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XOpenDoor
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XOpenDoor final
{
public:
	int32                                         DoorUID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XOpenDoor) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XOpenDoor");
static_assert(sizeof(CustomConsoleManagerRK_XOpenDoor) == 0x000004, "Wrong size on CustomConsoleManagerRK_XOpenDoor");
static_assert(offsetof(CustomConsoleManagerRK_XOpenDoor, DoorUID) == 0x000000, "Member 'CustomConsoleManagerRK_XOpenDoor::DoorUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XRevertUpgradeBySID
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerRK_XRevertUpgradeBySID final
{
public:
	class FString                                 ItemPrototypeSID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UpgradePrototypeSID;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XRevertUpgradeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XRevertUpgradeBySID");
static_assert(sizeof(CustomConsoleManagerRK_XRevertUpgradeBySID) == 0x000020, "Wrong size on CustomConsoleManagerRK_XRevertUpgradeBySID");
static_assert(offsetof(CustomConsoleManagerRK_XRevertUpgradeBySID, ItemPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerRK_XRevertUpgradeBySID::ItemPrototypeSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XRevertUpgradeBySID, UpgradePrototypeSID) == 0x000010, "Member 'CustomConsoleManagerRK_XRevertUpgradeBySID::UpgradePrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetFullGodMode
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XSetFullGodMode final
{
public:
	bool                                          bGodMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSetFullGodMode) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XSetFullGodMode");
static_assert(sizeof(CustomConsoleManagerRK_XSetFullGodMode) == 0x000001, "Wrong size on CustomConsoleManagerRK_XSetFullGodMode");
static_assert(offsetof(CustomConsoleManagerRK_XSetFullGodMode, bGodMode) == 0x000000, "Member 'CustomConsoleManagerRK_XSetFullGodMode::bGodMode' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetGodMode
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XSetGodMode final
{
public:
	bool                                          bGodMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSetGodMode) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XSetGodMode");
static_assert(sizeof(CustomConsoleManagerRK_XSetGodMode) == 0x000001, "Wrong size on CustomConsoleManagerRK_XSetGodMode");
static_assert(offsetof(CustomConsoleManagerRK_XSetGodMode, bGodMode) == 0x000000, "Member 'CustomConsoleManagerRK_XSetGodMode::bGodMode' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSetGodModeForInteractObj
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerRK_XSetGodModeForInteractObj final
{
public:
	bool                                          bGodMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSetGodModeForInteractObj) == 0x000001, "Wrong alignment on CustomConsoleManagerRK_XSetGodModeForInteractObj");
static_assert(sizeof(CustomConsoleManagerRK_XSetGodModeForInteractObj) == 0x000001, "Wrong size on CustomConsoleManagerRK_XSetGodModeForInteractObj");
static_assert(offsetof(CustomConsoleManagerRK_XSetGodModeForInteractObj, bGodMode) == 0x000000, "Member 'CustomConsoleManagerRK_XSetGodModeForInteractObj::bGodMode' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSpawnItemContainer
// 0x0030 (0x0030 - 0x0000)
struct CustomConsoleManagerRK_XSpawnItemContainer final
{
public:
	class FString                                 PrototypeID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Px;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Py;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pz;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gold;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XSpawnItemContainer) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XSpawnItemContainer");
static_assert(sizeof(CustomConsoleManagerRK_XSpawnItemContainer) == 0x000030, "Wrong size on CustomConsoleManagerRK_XSpawnItemContainer");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, PrototypeID) == 0x000000, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::PrototypeID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Px) == 0x000010, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Px' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Py) == 0x000014, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Py' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Pz) == 0x000018, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Pz' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Gold) == 0x00001C, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Gold' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Pitch) == 0x000020, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Pitch' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Yaw) == 0x000024, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Yaw' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, Roll) == 0x000028, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::Roll' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnItemContainer, ReturnValue) == 0x00002C, "Member 'CustomConsoleManagerRK_XSpawnItemContainer::ReturnValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XSpawnObjBySID
// 0x0030 (0x0030 - 0x0000)
struct CustomConsoleManagerRK_XSpawnObjBySID final
{
public:
	class FString                                 PrototypeSID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERank                                         Rank;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyOnOffline;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Px;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Py;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pz;                                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerRK_XSpawnObjBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerRK_XSpawnObjBySID");
static_assert(sizeof(CustomConsoleManagerRK_XSpawnObjBySID) == 0x000030, "Wrong size on CustomConsoleManagerRK_XSpawnObjBySID");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, PrototypeSID) == 0x000000, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::PrototypeSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Rank) == 0x000010, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Rank' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, bDestroyOnOffline) == 0x000011, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::bDestroyOnOffline' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Px) == 0x000014, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Px' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Py) == 0x000018, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Py' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Pz) == 0x00001C, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Pz' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Pitch) == 0x000020, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Pitch' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Yaw) == 0x000024, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Yaw' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XSpawnObjBySID, Roll) == 0x000028, "Member 'CustomConsoleManagerRK_XSpawnObjBySID::Roll' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XTeleportTo
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerRK_XTeleportTo final
{
public:
	float                                         XCoord;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YCoord;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZCoord;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XTeleportTo) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XTeleportTo");
static_assert(sizeof(CustomConsoleManagerRK_XTeleportTo) == 0x00000C, "Wrong size on CustomConsoleManagerRK_XTeleportTo");
static_assert(offsetof(CustomConsoleManagerRK_XTeleportTo, XCoord) == 0x000000, "Member 'CustomConsoleManagerRK_XTeleportTo::XCoord' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XTeleportTo, YCoord) == 0x000004, "Member 'CustomConsoleManagerRK_XTeleportTo::YCoord' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerRK_XTeleportTo, ZCoord) == 0x000008, "Member 'CustomConsoleManagerRK_XTeleportTo::ZCoord' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerRK.XUnlockDoor
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerRK_XUnlockDoor final
{
public:
	int32                                         DoorUID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerRK_XUnlockDoor) == 0x000004, "Wrong alignment on CustomConsoleManagerRK_XUnlockDoor");
static_assert(sizeof(CustomConsoleManagerRK_XUnlockDoor) == 0x000004, "Wrong size on CustomConsoleManagerRK_XUnlockDoor");
static_assert(offsetof(CustomConsoleManagerRK_XUnlockDoor, DoorUID) == 0x000000, "Member 'CustomConsoleManagerRK_XUnlockDoor::DoorUID' has a wrong offset!");

// Function Stalker2.DestructibleObject.GSCFramework_OnPreTransition
// 0x00E8 (0x00E8 - 0x0000)
struct DestructibleObject_GSCFramework_OnPreTransition final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleObject_GSCFramework_OnPreTransition) == 0x000008, "Wrong alignment on DestructibleObject_GSCFramework_OnPreTransition");
static_assert(sizeof(DestructibleObject_GSCFramework_OnPreTransition) == 0x0000E8, "Wrong size on DestructibleObject_GSCFramework_OnPreTransition");
static_assert(offsetof(DestructibleObject_GSCFramework_OnPreTransition, HitResult) == 0x000000, "Member 'DestructibleObject_GSCFramework_OnPreTransition::HitResult' has a wrong offset!");

// Function Stalker2.DestructibleObject.OnDataLayersUpdated
// 0x0010 (0x0010 - 0x0000)
struct DestructibleObject_OnDataLayersUpdated final
{
public:
	const class UDataLayerInstance*               DataLayer;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DestructibleObject_OnDataLayersUpdated) == 0x000008, "Wrong alignment on DestructibleObject_OnDataLayersUpdated");
static_assert(sizeof(DestructibleObject_OnDataLayersUpdated) == 0x000010, "Wrong size on DestructibleObject_OnDataLayersUpdated");
static_assert(offsetof(DestructibleObject_OnDataLayersUpdated, DataLayer) == 0x000000, "Member 'DestructibleObject_OnDataLayersUpdated::DataLayer' has a wrong offset!");
static_assert(offsetof(DestructibleObject_OnDataLayersUpdated, State) == 0x000008, "Member 'DestructibleObject_OnDataLayersUpdated::State' has a wrong offset!");

// Function Stalker2.DestructibleObject.OnHit
// 0x0110 (0x0110 - 0x0000)
struct DestructibleObject_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleObject_OnHit) == 0x000008, "Wrong alignment on DestructibleObject_OnHit");
static_assert(sizeof(DestructibleObject_OnHit) == 0x000110, "Wrong size on DestructibleObject_OnHit");
static_assert(offsetof(DestructibleObject_OnHit, SelfActor) == 0x000000, "Member 'DestructibleObject_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(DestructibleObject_OnHit, OtherActor) == 0x000008, "Member 'DestructibleObject_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(DestructibleObject_OnHit, NormalImpulse) == 0x000010, "Member 'DestructibleObject_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(DestructibleObject_OnHit, Hit) == 0x000028, "Member 'DestructibleObject_OnHit::Hit' has a wrong offset!");

// Function Stalker2.DestructibleObject.GetCurrentPhaseIndex
// 0x0004 (0x0004 - 0x0000)
struct DestructibleObject_GetCurrentPhaseIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleObject_GetCurrentPhaseIndex) == 0x000004, "Wrong alignment on DestructibleObject_GetCurrentPhaseIndex");
static_assert(sizeof(DestructibleObject_GetCurrentPhaseIndex) == 0x000004, "Wrong size on DestructibleObject_GetCurrentPhaseIndex");
static_assert(offsetof(DestructibleObject_GetCurrentPhaseIndex, ReturnValue) == 0x000000, "Member 'DestructibleObject_GetCurrentPhaseIndex::ReturnValue' has a wrong offset!");

// Function Stalker2.DestructibleObject.GSCFramework_GetCurrentPhase
// 0x0028 (0x0028 - 0x0000)
struct DestructibleObject_GSCFramework_GetCurrentPhase final
{
public:
	struct FObjectPhaseSettings                   ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleObject_GSCFramework_GetCurrentPhase) == 0x000008, "Wrong alignment on DestructibleObject_GSCFramework_GetCurrentPhase");
static_assert(sizeof(DestructibleObject_GSCFramework_GetCurrentPhase) == 0x000028, "Wrong size on DestructibleObject_GSCFramework_GetCurrentPhase");
static_assert(offsetof(DestructibleObject_GSCFramework_GetCurrentPhase, ReturnValue) == 0x000000, "Member 'DestructibleObject_GSCFramework_GetCurrentPhase::ReturnValue' has a wrong offset!");

// Function Stalker2.DestructibleObject.GSCFramework_GetObjectPhases
// 0x0010 (0x0010 - 0x0000)
struct DestructibleObject_GSCFramework_GetObjectPhases final
{
public:
	TArray<struct FObjectPhaseSettings>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestructibleObject_GSCFramework_GetObjectPhases) == 0x000008, "Wrong alignment on DestructibleObject_GSCFramework_GetObjectPhases");
static_assert(sizeof(DestructibleObject_GSCFramework_GetObjectPhases) == 0x000010, "Wrong size on DestructibleObject_GSCFramework_GetObjectPhases");
static_assert(offsetof(DestructibleObject_GSCFramework_GetObjectPhases, ReturnValue) == 0x000000, "Member 'DestructibleObject_GSCFramework_GetObjectPhases::ReturnValue' has a wrong offset!");

// Function Stalker2.BookViewBase.ClickMenuButton
// 0x0004 (0x0004 - 0x0000)
struct BookViewBase_ClickMenuButton final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BookViewBase_ClickMenuButton) == 0x000004, "Wrong alignment on BookViewBase_ClickMenuButton");
static_assert(sizeof(BookViewBase_ClickMenuButton) == 0x000004, "Wrong size on BookViewBase_ClickMenuButton");
static_assert(offsetof(BookViewBase_ClickMenuButton, InButtonIndex) == 0x000000, "Member 'BookViewBase_ClickMenuButton::InButtonIndex' has a wrong offset!");

// Function Stalker2.AttachSelectorView.SetCurrentChooseLine
// 0x0001 (0x0001 - 0x0000)
struct AttachSelectorView_SetCurrentChooseLine final
{
public:
	ESlotDirection                                InCurrentChooseLine;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttachSelectorView_SetCurrentChooseLine) == 0x000001, "Wrong alignment on AttachSelectorView_SetCurrentChooseLine");
static_assert(sizeof(AttachSelectorView_SetCurrentChooseLine) == 0x000001, "Wrong size on AttachSelectorView_SetCurrentChooseLine");
static_assert(offsetof(AttachSelectorView_SetCurrentChooseLine, InCurrentChooseLine) == 0x000000, "Member 'AttachSelectorView_SetCurrentChooseLine::InCurrentChooseLine' has a wrong offset!");

// Function Stalker2.CustomConsoleManager.ExecuteScripts
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManager_ExecuteScripts final
{
public:
	TArray<class FString>                         ScriptArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManager_ExecuteScripts) == 0x000008, "Wrong alignment on CustomConsoleManager_ExecuteScripts");
static_assert(sizeof(CustomConsoleManager_ExecuteScripts) == 0x000010, "Wrong size on CustomConsoleManager_ExecuteScripts");
static_assert(offsetof(CustomConsoleManager_ExecuteScripts, ScriptArray) == 0x000000, "Member 'CustomConsoleManager_ExecuteScripts::ScriptArray' has a wrong offset!");

// Function Stalker2.CustomConsoleManager.XExecuteAdditionalScript
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManager_XExecuteAdditionalScript final
{
public:
	class FString                                 ScriptKeyName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManager_XExecuteAdditionalScript) == 0x000008, "Wrong alignment on CustomConsoleManager_XExecuteAdditionalScript");
static_assert(sizeof(CustomConsoleManager_XExecuteAdditionalScript) == 0x000010, "Wrong size on CustomConsoleManager_XExecuteAdditionalScript");
static_assert(offsetof(CustomConsoleManager_XExecuteAdditionalScript, ScriptKeyName) == 0x000000, "Member 'CustomConsoleManager_XExecuteAdditionalScript::ScriptKeyName' has a wrong offset!");

// Function Stalker2.CustomConsoleManager.XExecuteFromFile
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManager_XExecuteFromFile final
{
public:
	class FString                                 PathToFile;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManager_XExecuteFromFile) == 0x000008, "Wrong alignment on CustomConsoleManager_XExecuteFromFile");
static_assert(sizeof(CustomConsoleManager_XExecuteFromFile) == 0x000010, "Wrong size on CustomConsoleManager_XExecuteFromFile");
static_assert(offsetof(CustomConsoleManager_XExecuteFromFile, PathToFile) == 0x000000, "Member 'CustomConsoleManager_XExecuteFromFile::PathToFile' has a wrong offset!");

// Function Stalker2.CustomConsoleManager.XRunEngineCommand
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManager_XRunEngineCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManager_XRunEngineCommand) == 0x000008, "Wrong alignment on CustomConsoleManager_XRunEngineCommand");
static_assert(sizeof(CustomConsoleManager_XRunEngineCommand) == 0x000010, "Wrong size on CustomConsoleManager_XRunEngineCommand");
static_assert(offsetof(CustomConsoleManager_XRunEngineCommand, Command) == 0x000000, "Member 'CustomConsoleManager_XRunEngineCommand::Command' has a wrong offset!");

// Function Stalker2.BarbedWireComponent.OnCompHit
// 0x0118 (0x0118 - 0x0000)
struct BarbedWireComponent_OnCompHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarbedWireComponent_OnCompHit) == 0x000008, "Wrong alignment on BarbedWireComponent_OnCompHit");
static_assert(sizeof(BarbedWireComponent_OnCompHit) == 0x000118, "Wrong size on BarbedWireComponent_OnCompHit");
static_assert(offsetof(BarbedWireComponent_OnCompHit, HitComp) == 0x000000, "Member 'BarbedWireComponent_OnCompHit::HitComp' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnCompHit, OtherActor) == 0x000008, "Member 'BarbedWireComponent_OnCompHit::OtherActor' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnCompHit, OtherComp) == 0x000010, "Member 'BarbedWireComponent_OnCompHit::OtherComp' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnCompHit, NormalImpulse) == 0x000018, "Member 'BarbedWireComponent_OnCompHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnCompHit, Hit) == 0x000030, "Member 'BarbedWireComponent_OnCompHit::Hit' has a wrong offset!");

// Function Stalker2.BarbedWireComponent.OnOverlapBegin
// 0x0108 (0x0108 - 0x0000)
struct BarbedWireComponent_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlapComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarbedWireComponent_OnOverlapBegin) == 0x000008, "Wrong alignment on BarbedWireComponent_OnOverlapBegin");
static_assert(sizeof(BarbedWireComponent_OnOverlapBegin) == 0x000108, "Wrong size on BarbedWireComponent_OnOverlapBegin");
static_assert(offsetof(BarbedWireComponent_OnOverlapBegin, OverlapComponent) == 0x000000, "Member 'BarbedWireComponent_OnOverlapBegin::OverlapComponent' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapBegin, OtherActor) == 0x000008, "Member 'BarbedWireComponent_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapBegin, OtherComp) == 0x000010, "Member 'BarbedWireComponent_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'BarbedWireComponent_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'BarbedWireComponent_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapBegin, SweepResult) == 0x000020, "Member 'BarbedWireComponent_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function Stalker2.BarbedWireComponent.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct BarbedWireComponent_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BarbedWireComponent_OnOverlapEnd) == 0x000008, "Wrong alignment on BarbedWireComponent_OnOverlapEnd");
static_assert(sizeof(BarbedWireComponent_OnOverlapEnd) == 0x000020, "Wrong size on BarbedWireComponent_OnOverlapEnd");
static_assert(offsetof(BarbedWireComponent_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'BarbedWireComponent_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapEnd, OtherActor) == 0x000008, "Member 'BarbedWireComponent_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapEnd, OtherComp) == 0x000010, "Member 'BarbedWireComponent_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(BarbedWireComponent_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'BarbedWireComponent_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMH.XRemoveEffectFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerMH_XRemoveEffectFromPlayer final
{
public:
	class FString                                 EffectPrototypeSID;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMH_XRemoveEffectFromPlayer) == 0x000008, "Wrong alignment on CustomConsoleManagerMH_XRemoveEffectFromPlayer");
static_assert(sizeof(CustomConsoleManagerMH_XRemoveEffectFromPlayer) == 0x000010, "Wrong size on CustomConsoleManagerMH_XRemoveEffectFromPlayer");
static_assert(offsetof(CustomConsoleManagerMH_XRemoveEffectFromPlayer, EffectPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerMH_XRemoveEffectFromPlayer::EffectPrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMH.XSetFov
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerMH_XSetFov final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMH_XSetFov) == 0x000004, "Wrong alignment on CustomConsoleManagerMH_XSetFov");
static_assert(sizeof(CustomConsoleManagerMH_XSetFov) == 0x000004, "Wrong size on CustomConsoleManagerMH_XSetFov");
static_assert(offsetof(CustomConsoleManagerMH_XSetFov, FOV) == 0x000000, "Member 'CustomConsoleManagerMH_XSetFov::FOV' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMH.XToggleCustomFov
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerMH_XToggleCustomFov final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMH_XToggleCustomFov) == 0x000001, "Wrong alignment on CustomConsoleManagerMH_XToggleCustomFov");
static_assert(sizeof(CustomConsoleManagerMH_XToggleCustomFov) == 0x000001, "Wrong size on CustomConsoleManagerMH_XToggleCustomFov");
static_assert(offsetof(CustomConsoleManagerMH_XToggleCustomFov, bEnable) == 0x000000, "Member 'CustomConsoleManagerMH_XToggleCustomFov::bEnable' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMH.XToggleHubDoors
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerMH_XToggleHubDoors final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMH_XToggleHubDoors) == 0x000004, "Wrong alignment on CustomConsoleManagerMH_XToggleHubDoors");
static_assert(sizeof(CustomConsoleManagerMH_XToggleHubDoors) == 0x000008, "Wrong size on CustomConsoleManagerMH_XToggleHubDoors");
static_assert(offsetof(CustomConsoleManagerMH_XToggleHubDoors, bLocked) == 0x000000, "Member 'CustomConsoleManagerMH_XToggleHubDoors::bLocked' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMH_XToggleHubDoors, Radius) == 0x000004, "Member 'CustomConsoleManagerMH_XToggleHubDoors::Radius' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMH.XApplyMainHandWeaponUpgradeBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID final
{
public:
	class FString                                 UpgradePrototypeSID;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID");
static_assert(sizeof(CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID) == 0x000010, "Wrong size on CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID");
static_assert(offsetof(CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID, UpgradePrototypeSID) == 0x000000, "Member 'CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID::UpgradePrototypeSID' has a wrong offset!");

// Function Stalker2.TutorialPage.ClickButtonMenu
// 0x0008 (0x0008 - 0x0000)
struct TutorialPage_ClickButtonMenu final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPage_ClickButtonMenu) == 0x000004, "Wrong alignment on TutorialPage_ClickButtonMenu");
static_assert(sizeof(TutorialPage_ClickButtonMenu) == 0x000008, "Wrong size on TutorialPage_ClickButtonMenu");
static_assert(offsetof(TutorialPage_ClickButtonMenu, ButtonId) == 0x000000, "Member 'TutorialPage_ClickButtonMenu::ButtonId' has a wrong offset!");

// Function Stalker2.TutorialPage.ShowBlockListNavigation
// 0x0001 (0x0001 - 0x0000)
struct TutorialPage_ShowBlockListNavigation final
{
public:
	bool                                          bBlock;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPage_ShowBlockListNavigation) == 0x000001, "Wrong alignment on TutorialPage_ShowBlockListNavigation");
static_assert(sizeof(TutorialPage_ShowBlockListNavigation) == 0x000001, "Wrong size on TutorialPage_ShowBlockListNavigation");
static_assert(offsetof(TutorialPage_ShowBlockListNavigation, bBlock) == 0x000000, "Member 'TutorialPage_ShowBlockListNavigation::bBlock' has a wrong offset!");

// Function Stalker2.TutorialPage.ShowDetails
// 0x0001 (0x0001 - 0x0000)
struct TutorialPage_ShowDetails final
{
public:
	bool                                          bEmpty;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPage_ShowDetails) == 0x000001, "Wrong alignment on TutorialPage_ShowDetails");
static_assert(sizeof(TutorialPage_ShowDetails) == 0x000001, "Wrong size on TutorialPage_ShowDetails");
static_assert(offsetof(TutorialPage_ShowDetails, bEmpty) == 0x000000, "Member 'TutorialPage_ShowDetails::bEmpty' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerCamera.ForegroundDepthScale
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerCamera_ForegroundDepthScale final
{
public:
	float                                         DepthScale;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerCamera_ForegroundDepthScale) == 0x000004, "Wrong alignment on CustomConsoleManagerCamera_ForegroundDepthScale");
static_assert(sizeof(CustomConsoleManagerCamera_ForegroundDepthScale) == 0x000004, "Wrong size on CustomConsoleManagerCamera_ForegroundDepthScale");
static_assert(offsetof(CustomConsoleManagerCamera_ForegroundDepthScale, DepthScale) == 0x000000, "Member 'CustomConsoleManagerCamera_ForegroundDepthScale::DepthScale' has a wrong offset!");

// Function Stalker2.BaseInteractableAction.CanInteract
// 0x0001 (0x0001 - 0x0000)
struct BaseInteractableAction_CanInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseInteractableAction_CanInteract) == 0x000001, "Wrong alignment on BaseInteractableAction_CanInteract");
static_assert(sizeof(BaseInteractableAction_CanInteract) == 0x000001, "Wrong size on BaseInteractableAction_CanInteract");
static_assert(offsetof(BaseInteractableAction_CanInteract, ReturnValue) == 0x000000, "Member 'BaseInteractableAction_CanInteract::ReturnValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPS.XChangeCompasMarkers
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerPS_XChangeCompasMarkers final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPS_XChangeCompasMarkers) == 0x000004, "Wrong alignment on CustomConsoleManagerPS_XChangeCompasMarkers");
static_assert(sizeof(CustomConsoleManagerPS_XChangeCompasMarkers) == 0x000004, "Wrong size on CustomConsoleManagerPS_XChangeCompasMarkers");
static_assert(offsetof(CustomConsoleManagerPS_XChangeCompasMarkers, Index_0) == 0x000000, "Member 'CustomConsoleManagerPS_XChangeCompasMarkers::Index_0' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPS.XChangeInventoryScroll
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerPS_XChangeInventoryScroll final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPS_XChangeInventoryScroll) == 0x000004, "Wrong alignment on CustomConsoleManagerPS_XChangeInventoryScroll");
static_assert(sizeof(CustomConsoleManagerPS_XChangeInventoryScroll) == 0x000004, "Wrong size on CustomConsoleManagerPS_XChangeInventoryScroll");
static_assert(offsetof(CustomConsoleManagerPS_XChangeInventoryScroll, Index_0) == 0x000000, "Member 'CustomConsoleManagerPS_XChangeInventoryScroll::Index_0' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPS.XShowInventoryDebugItmesStats
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerPS_XShowInventoryDebugItmesStats final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPS_XShowInventoryDebugItmesStats) == 0x000001, "Wrong alignment on CustomConsoleManagerPS_XShowInventoryDebugItmesStats");
static_assert(sizeof(CustomConsoleManagerPS_XShowInventoryDebugItmesStats) == 0x000001, "Wrong size on CustomConsoleManagerPS_XShowInventoryDebugItmesStats");
static_assert(offsetof(CustomConsoleManagerPS_XShowInventoryDebugItmesStats, bShow) == 0x000000, "Member 'CustomConsoleManagerPS_XShowInventoryDebugItmesStats::bShow' has a wrong offset!");

// Function Stalker2.BedView.SetInteractiveState
// 0x0001 (0x0001 - 0x0000)
struct BedView_SetInteractiveState final
{
public:
	bool                                          bInteractive;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BedView_SetInteractiveState) == 0x000001, "Wrong alignment on BedView_SetInteractiveState");
static_assert(sizeof(BedView_SetInteractiveState) == 0x000001, "Wrong size on BedView_SetInteractiveState");
static_assert(offsetof(BedView_SetInteractiveState, bInteractive) == 0x000000, "Member 'BedView_SetInteractiveState::bInteractive' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIM.XHighlightCovers
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerIM_XHighlightCovers final
{
public:
	class FString                                 NavMeshAgentName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIM_XHighlightCovers) == 0x000008, "Wrong alignment on CustomConsoleManagerIM_XHighlightCovers");
static_assert(sizeof(CustomConsoleManagerIM_XHighlightCovers) == 0x000010, "Wrong size on CustomConsoleManagerIM_XHighlightCovers");
static_assert(offsetof(CustomConsoleManagerIM_XHighlightCovers, NavMeshAgentName) == 0x000000, "Member 'CustomConsoleManagerIM_XHighlightCovers::NavMeshAgentName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIM.XHighlightDangerAreas
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerIM_XHighlightDangerAreas final
{
public:
	class FString                                 NavMeshAgentName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIM_XHighlightDangerAreas) == 0x000008, "Wrong alignment on CustomConsoleManagerIM_XHighlightDangerAreas");
static_assert(sizeof(CustomConsoleManagerIM_XHighlightDangerAreas) == 0x000010, "Wrong size on CustomConsoleManagerIM_XHighlightDangerAreas");
static_assert(offsetof(CustomConsoleManagerIM_XHighlightDangerAreas, NavMeshAgentName) == 0x000000, "Member 'CustomConsoleManagerIM_XHighlightDangerAreas::NavMeshAgentName' has a wrong offset!");

// Function Stalker2.PDASlotBase.SetSelectPointTint
// 0x0010 (0x0010 - 0x0000)
struct PDASlotBase_SetSelectPointTint final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDASlotBase_SetSelectPointTint) == 0x000004, "Wrong alignment on PDASlotBase_SetSelectPointTint");
static_assert(sizeof(PDASlotBase_SetSelectPointTint) == 0x000010, "Wrong size on PDASlotBase_SetSelectPointTint");
static_assert(offsetof(PDASlotBase_SetSelectPointTint, InColor) == 0x000000, "Member 'PDASlotBase_SetSelectPointTint::InColor' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerSM.XStartEmissionBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerSM_XStartEmissionBySID final
{
public:
	class FString                                 PrototypeSID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerSM_XStartEmissionBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerSM_XStartEmissionBySID");
static_assert(sizeof(CustomConsoleManagerSM_XStartEmissionBySID) == 0x000010, "Wrong size on CustomConsoleManagerSM_XStartEmissionBySID");
static_assert(offsetof(CustomConsoleManagerSM_XStartEmissionBySID, PrototypeSID) == 0x000000, "Member 'CustomConsoleManagerSM_XStartEmissionBySID::PrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerSM.XShowProjectileTrajectory
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerSM_XShowProjectileTrajectory final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerSM_XShowProjectileTrajectory) == 0x000001, "Wrong alignment on CustomConsoleManagerSM_XShowProjectileTrajectory");
static_assert(sizeof(CustomConsoleManagerSM_XShowProjectileTrajectory) == 0x000001, "Wrong size on CustomConsoleManagerSM_XShowProjectileTrajectory");
static_assert(offsetof(CustomConsoleManagerSM_XShowProjectileTrajectory, bShow) == 0x000000, "Member 'CustomConsoleManagerSM_XShowProjectileTrajectory::bShow' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerSM.XSVFriendlyFire
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerSM_XSVFriendlyFire final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerSM_XSVFriendlyFire) == 0x000001, "Wrong alignment on CustomConsoleManagerSM_XSVFriendlyFire");
static_assert(sizeof(CustomConsoleManagerSM_XSVFriendlyFire) == 0x000001, "Wrong size on CustomConsoleManagerSM_XSVFriendlyFire");
static_assert(offsetof(CustomConsoleManagerSM_XSVFriendlyFire, bEnabled) == 0x000000, "Member 'CustomConsoleManagerSM_XSVFriendlyFire::bEnabled' has a wrong offset!");

// Function Stalker2.Bolt.OnComponentHit
// 0x0118 (0x0118 - 0x0000)
struct Bolt_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bolt_OnComponentHit) == 0x000008, "Wrong alignment on Bolt_OnComponentHit");
static_assert(sizeof(Bolt_OnComponentHit) == 0x000118, "Wrong size on Bolt_OnComponentHit");
static_assert(offsetof(Bolt_OnComponentHit, HitComponent) == 0x000000, "Member 'Bolt_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(Bolt_OnComponentHit, OtherActor) == 0x000008, "Member 'Bolt_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Bolt_OnComponentHit, OtherComp) == 0x000010, "Member 'Bolt_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Bolt_OnComponentHit, NormalImpulse) == 0x000018, "Member 'Bolt_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Bolt_OnComponentHit, Hit) == 0x000030, "Member 'Bolt_OnComponentHit::Hit' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAK.XPrintInventory
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAK_XPrintInventory final
{
public:
	int32                                         UnitUID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAK_XPrintInventory) == 0x000004, "Wrong alignment on CustomConsoleManagerAK_XPrintInventory");
static_assert(sizeof(CustomConsoleManagerAK_XPrintInventory) == 0x000004, "Wrong size on CustomConsoleManagerAK_XPrintInventory");
static_assert(offsetof(CustomConsoleManagerAK_XPrintInventory, UnitUID) == 0x000000, "Member 'CustomConsoleManagerAK_XPrintInventory::UnitUID' has a wrong offset!");

// Function Stalker2.StackSplitContextual.OnSplitValueChanged
// 0x0004 (0x0004 - 0x0000)
struct StackSplitContextual_OnSplitValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StackSplitContextual_OnSplitValueChanged) == 0x000004, "Wrong alignment on StackSplitContextual_OnSplitValueChanged");
static_assert(sizeof(StackSplitContextual_OnSplitValueChanged) == 0x000004, "Wrong size on StackSplitContextual_OnSplitValueChanged");
static_assert(offsetof(StackSplitContextual_OnSplitValueChanged, Value) == 0x000000, "Member 'StackSplitContextual_OnSplitValueChanged::Value' has a wrong offset!");

// Function Stalker2.GSCBPFunctionLibrary.SetAffectNavigationForComponent
// 0x0010 (0x0010 - 0x0000)
struct GSCBPFunctionLibrary_SetAffectNavigationForComponent final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAffect;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GSCBPFunctionLibrary_SetAffectNavigationForComponent) == 0x000008, "Wrong alignment on GSCBPFunctionLibrary_SetAffectNavigationForComponent");
static_assert(sizeof(GSCBPFunctionLibrary_SetAffectNavigationForComponent) == 0x000010, "Wrong size on GSCBPFunctionLibrary_SetAffectNavigationForComponent");
static_assert(offsetof(GSCBPFunctionLibrary_SetAffectNavigationForComponent, PrimitiveComponent) == 0x000000, "Member 'GSCBPFunctionLibrary_SetAffectNavigationForComponent::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(GSCBPFunctionLibrary_SetAffectNavigationForComponent, bCanAffect) == 0x000008, "Member 'GSCBPFunctionLibrary_SetAffectNavigationForComponent::bCanAffect' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.GetAllWidgetsOfClass
// 0x0028 (0x0028 - 0x0000)
struct VictoryBPFunctionLibrary_GetAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    FoundWidgets;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetAllWidgetsOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass) == 0x000028, "Wrong size on VictoryBPFunctionLibrary_GetAllWidgetsOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, FoundWidgets) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::FoundWidgets' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetAllWidgetsOfClass, TopLevelOnly) == 0x000020, "Member 'VictoryBPFunctionLibrary_GetAllWidgetsOfClass::TopLevelOnly' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.GetFirstWidgetOfClass
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_GetFirstWidgetOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TopLevelOnly;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetFirstWidgetOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_GetFirstWidgetOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, TopLevelOnly) == 0x000010, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::TopLevelOnly' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetFirstWidgetOfClass, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_GetFirstWidgetOfClass::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.GetObjectPath
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_GetObjectPath final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_GetObjectPath) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_GetObjectPath");
static_assert(sizeof(VictoryBPFunctionLibrary_GetObjectPath) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_GetObjectPath");
static_assert(offsetof(VictoryBPFunctionLibrary_GetObjectPath, Obj) == 0x000000, "Member 'VictoryBPFunctionLibrary_GetObjectPath::Obj' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_GetObjectPath, ReturnValue) == 0x000008, "Member 'VictoryBPFunctionLibrary_GetObjectPath::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.IsWidgetOfClassInViewport
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_IsWidgetOfClassInViewport final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_IsWidgetOfClassInViewport");
static_assert(sizeof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_IsWidgetOfClassInViewport");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_IsWidgetOfClassInViewport, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_IsWidgetOfClassInViewport::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.LoadObjectFromAssetPath
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_LoadObjectFromAssetPath final
{
public:
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Path;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_LoadObjectFromAssetPath");
static_assert(sizeof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_LoadObjectFromAssetPath");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, ObjectClass) == 0x000000, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::ObjectClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, Path) == 0x000008, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::Path' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, IsValid) == 0x000010, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::IsValid' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_LoadObjectFromAssetPath, ReturnValue) == 0x000018, "Member 'VictoryBPFunctionLibrary_LoadObjectFromAssetPath::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.MapRangeClamped
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_MapRangeClamped final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeA;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeB;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeA;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeB;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_MapRangeClamped) == 0x000004, "Wrong alignment on VictoryBPFunctionLibrary_MapRangeClamped");
static_assert(sizeof(VictoryBPFunctionLibrary_MapRangeClamped) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_MapRangeClamped");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, Value) == 0x000000, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::Value' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, InRangeA) == 0x000004, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::InRangeA' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, InRangeB) == 0x000008, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::InRangeB' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, OutRangeA) == 0x00000C, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::OutRangeA' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, OutRangeB) == 0x000010, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::OutRangeB' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_MapRangeClamped, ReturnValue) == 0x000014, "Member 'VictoryBPFunctionLibrary_MapRangeClamped::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.RemoveAllWidgetsOfClass
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass::WidgetClass' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.SaveConfigToFile
// 0x0020 (0x0020 - 0x0000)
struct VictoryBPFunctionLibrary_SaveConfigToFile final
{
public:
	TArray<struct FVictoryInput>                  VictoryInputs;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_SaveConfigToFile) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SaveConfigToFile");
static_assert(sizeof(VictoryBPFunctionLibrary_SaveConfigToFile) == 0x000020, "Wrong size on VictoryBPFunctionLibrary_SaveConfigToFile");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveConfigToFile, VictoryInputs) == 0x000000, "Member 'VictoryBPFunctionLibrary_SaveConfigToFile::VictoryInputs' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveConfigToFile, Filename) == 0x000010, "Member 'VictoryBPFunctionLibrary_SaveConfigToFile::Filename' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.SaveGameObject_GetAllSaveSlotFileNames
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames final
{
public:
	TArray<class FString>                         FileNames;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames");
static_assert(sizeof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames");
static_assert(offsetof(VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames, FileNames) == 0x000000, "Member 'VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames::FileNames' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.ScreenShots_Rename_Move_Most_Recent
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent final
{
public:
	class FString                                 OriginalFileName;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewAbsoluteFolderPath;                             // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HighResolution;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent");
static_assert(sizeof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, OriginalFileName) == 0x000000, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::OriginalFileName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, NewName) == 0x000010, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::NewName' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, NewAbsoluteFolderPath) == 0x000020, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::NewAbsoluteFolderPath' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, HighResolution) == 0x000030, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::HighResolution' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent, ReturnValue) == 0x000031, "Member 'VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetAllActionKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings final
{
public:
	TArray<struct FVictoryInput>                  Bindings;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings, Bindings) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings::Bindings' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetAllAxisAndActionMappingsForKey
// 0x0038 (0x0038 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVictoryInput>                  ActionBindings;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVictoryInputAxis>              AxisBindings;                                      // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey) == 0x000038, "Wrong size on VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey, Key) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey::Key' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey, ActionBindings) == 0x000018, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey::ActionBindings' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey, AxisBindings) == 0x000028, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey::AxisBindings' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetAllAxisKeyBindings
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings final
{
public:
	TArray<struct FVictoryInputAxis>              Bindings;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings, Bindings) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings::Bindings' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetVictoryInput
// 0x0080 (0x0080 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetVictoryInput final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVictoryInput                          ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetVictoryInput) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetVictoryInput");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetVictoryInput) == 0x000080, "Wrong size on VictoryBPFunctionLibrary_VictoryGetVictoryInput");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInput, KeyEvent) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInput::KeyEvent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInput, ReturnValue) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInput::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetVictoryInputAxis
// 0x0080 (0x0080 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis final
{
public:
	struct FKeyEvent                              KeyEvent;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVictoryInputAxis                      ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis) == 0x000080, "Wrong size on VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis, KeyEvent) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis::KeyEvent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis, ReturnValue) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryPaths__SavedDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__SavedDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__SavedDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__SavedDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__SavedDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__SavedDir::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryPaths__ScreenShotsDir
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir, ReturnValue) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryReBindActionKey
// 0x0088 (0x0088 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryReBindActionKey final
{
public:
	struct FVictoryInput                          Original;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FVictoryInput                          NewBinding;                                        // 0x0040(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryReBindActionKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryReBindActionKey");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryReBindActionKey) == 0x000088, "Wrong size on VictoryBPFunctionLibrary_VictoryReBindActionKey");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindActionKey, Original) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryReBindActionKey::Original' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindActionKey, NewBinding) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryReBindActionKey::NewBinding' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindActionKey, ReturnValue) == 0x000080, "Member 'VictoryBPFunctionLibrary_VictoryReBindActionKey::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryReBindAxisKey
// 0x0088 (0x0088 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryReBindAxisKey final
{
public:
	struct FVictoryInputAxis                      Original;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FVictoryInputAxis                      NewBinding;                                        // 0x0040(0x0040)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryReBindAxisKey) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryReBindAxisKey");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryReBindAxisKey) == 0x000088, "Wrong size on VictoryBPFunctionLibrary_VictoryReBindAxisKey");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindAxisKey, Original) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryReBindAxisKey::Original' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindAxisKey, NewBinding) == 0x000040, "Member 'VictoryBPFunctionLibrary_VictoryReBindAxisKey::NewBinding' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryReBindAxisKey, ReturnValue) == 0x000080, "Member 'VictoryBPFunctionLibrary_VictoryReBindAxisKey::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryRemoveActionKeyBind
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind final
{
public:
	struct FVictoryInput                          ToRemove;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind, ToRemove) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind::ToRemove' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictoryRemoveAxisKeyBind
// 0x0040 (0x0040 - 0x0000)
struct VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind final
{
public:
	struct FVictoryInputAxis                      ToRemove;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind");
static_assert(sizeof(VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind) == 0x000040, "Wrong size on VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind");
static_assert(offsetof(VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind, ToRemove) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind::ToRemove' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.VictorySoundVolumeChange
// 0x0010 (0x0010 - 0x0000)
struct VictoryBPFunctionLibrary_VictorySoundVolumeChange final
{
public:
	class USoundClass*                            SoundClassObject;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewVolume;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_VictorySoundVolumeChange) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_VictorySoundVolumeChange");
static_assert(sizeof(VictoryBPFunctionLibrary_VictorySoundVolumeChange) == 0x000010, "Wrong size on VictoryBPFunctionLibrary_VictorySoundVolumeChange");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySoundVolumeChange, SoundClassObject) == 0x000000, "Member 'VictoryBPFunctionLibrary_VictorySoundVolumeChange::SoundClassObject' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySoundVolumeChange, NewVolume) == 0x000008, "Member 'VictoryBPFunctionLibrary_VictorySoundVolumeChange::NewVolume' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_VictorySoundVolumeChange, ReturnValue) == 0x00000C, "Member 'VictoryBPFunctionLibrary_VictorySoundVolumeChange::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.Viewport__GetCenterOfViewport
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport final
{
public:
	const class APlayerController*                ThePC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport");
static_assert(sizeof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, ThePC) == 0x000000, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::ThePC' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, PosX) == 0x000008, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::PosX' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, PosY) == 0x00000C, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::PosY' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.WidgetGetParentOfClass
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetGetParentOfClass final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetGetParentOfClass) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetGetParentOfClass");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetGetParentOfClass) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_WidgetGetParentOfClass");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, ChildWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::ChildWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, WidgetClass) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetGetParentOfClass, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_WidgetGetParentOfClass::ReturnValue' has a wrong offset!");

// Function Stalker2.VictoryBPFunctionLibrary.WidgetIsChildOf
// 0x0018 (0x0018 - 0x0000)
struct VictoryBPFunctionLibrary_WidgetIsChildOf final
{
public:
	class UWidget*                                ChildWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                PossibleParent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VictoryBPFunctionLibrary_WidgetIsChildOf) == 0x000008, "Wrong alignment on VictoryBPFunctionLibrary_WidgetIsChildOf");
static_assert(sizeof(VictoryBPFunctionLibrary_WidgetIsChildOf) == 0x000018, "Wrong size on VictoryBPFunctionLibrary_WidgetIsChildOf");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetIsChildOf, ChildWidget) == 0x000000, "Member 'VictoryBPFunctionLibrary_WidgetIsChildOf::ChildWidget' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetIsChildOf, PossibleParent) == 0x000008, "Member 'VictoryBPFunctionLibrary_WidgetIsChildOf::PossibleParent' has a wrong offset!");
static_assert(offsetof(VictoryBPFunctionLibrary_WidgetIsChildOf, ReturnValue) == 0x000010, "Member 'VictoryBPFunctionLibrary_WidgetIsChildOf::ReturnValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOP.XNpcArraySetFaceBlendShapeState
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState final
{
public:
	int32                                         StartNpcUID;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndNpcUID;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState) == 0x000004, "Wrong alignment on CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState");
static_assert(sizeof(CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState) == 0x00000C, "Wrong size on CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState");
static_assert(offsetof(CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState, StartNpcUID) == 0x000000, "Member 'CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState::StartNpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState, EndNpcUID) == 0x000004, "Member 'CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState::EndNpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState, bEnabled) == 0x000008, "Member 'CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOP.XNpcFreezeRagdollPose
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOP_XNpcFreezeRagdollPose final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOP_XNpcFreezeRagdollPose) == 0x000004, "Wrong alignment on CustomConsoleManagerOP_XNpcFreezeRagdollPose");
static_assert(sizeof(CustomConsoleManagerOP_XNpcFreezeRagdollPose) == 0x000004, "Wrong size on CustomConsoleManagerOP_XNpcFreezeRagdollPose");
static_assert(offsetof(CustomConsoleManagerOP_XNpcFreezeRagdollPose, NpcUID) == 0x000000, "Member 'CustomConsoleManagerOP_XNpcFreezeRagdollPose::NpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOP.XNpcSetFaceBlendShapeState
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerOP_XNpcSetFaceBlendShapeState final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerOP_XNpcSetFaceBlendShapeState) == 0x000004, "Wrong alignment on CustomConsoleManagerOP_XNpcSetFaceBlendShapeState");
static_assert(sizeof(CustomConsoleManagerOP_XNpcSetFaceBlendShapeState) == 0x000008, "Wrong size on CustomConsoleManagerOP_XNpcSetFaceBlendShapeState");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetFaceBlendShapeState, NpcUID) == 0x000000, "Member 'CustomConsoleManagerOP_XNpcSetFaceBlendShapeState::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetFaceBlendShapeState, bEnabled) == 0x000004, "Member 'CustomConsoleManagerOP_XNpcSetFaceBlendShapeState::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOP.XNpcSetFaceBlockingBlendMask
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFaceBlockingBlendMasks                       FaceBlockingMask;                                  // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockingWeight;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask) == 0x000004, "Wrong alignment on CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask");
static_assert(sizeof(CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask) == 0x00000C, "Wrong size on CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask, NpcUID) == 0x000000, "Member 'CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask, FaceBlockingMask) == 0x000004, "Member 'CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask::FaceBlockingMask' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask, BlockingWeight) == 0x000008, "Member 'CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask::BlockingWeight' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOP.XNpcSetStateTag
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerOP_XNpcSetStateTag final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateTag                                     StateTag;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerOP_XNpcSetStateTag) == 0x000004, "Wrong alignment on CustomConsoleManagerOP_XNpcSetStateTag");
static_assert(sizeof(CustomConsoleManagerOP_XNpcSetStateTag) == 0x00000C, "Wrong size on CustomConsoleManagerOP_XNpcSetStateTag");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetStateTag, NpcUID) == 0x000000, "Member 'CustomConsoleManagerOP_XNpcSetStateTag::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetStateTag, StateTag) == 0x000004, "Member 'CustomConsoleManagerOP_XNpcSetStateTag::StateTag' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOP_XNpcSetStateTag, bEnabled) == 0x000008, "Member 'CustomConsoleManagerOP_XNpcSetStateTag::bEnabled' has a wrong offset!");

// Function Stalker2.BulbAnomaly.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BulbAnomaly_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulbAnomaly_OnBeginOverlap) == 0x000008, "Wrong alignment on BulbAnomaly_OnBeginOverlap");
static_assert(sizeof(BulbAnomaly_OnBeginOverlap) == 0x000108, "Wrong size on BulbAnomaly_OnBeginOverlap");
static_assert(offsetof(BulbAnomaly_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BulbAnomaly_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnBeginOverlap, OtherActor) == 0x000008, "Member 'BulbAnomaly_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnBeginOverlap, OtherComp) == 0x000010, "Member 'BulbAnomaly_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BulbAnomaly_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'BulbAnomaly_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnBeginOverlap, SweepResult) == 0x000020, "Member 'BulbAnomaly_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.BulbAnomaly.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BulbAnomaly_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulbAnomaly_OnEndOverlap) == 0x000008, "Wrong alignment on BulbAnomaly_OnEndOverlap");
static_assert(sizeof(BulbAnomaly_OnEndOverlap) == 0x000020, "Wrong size on BulbAnomaly_OnEndOverlap");
static_assert(offsetof(BulbAnomaly_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'BulbAnomaly_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnEndOverlap, OtherActor) == 0x000008, "Member 'BulbAnomaly_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnEndOverlap, OtherComp) == 0x000010, "Member 'BulbAnomaly_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BulbAnomaly_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BulbAnomaly_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDR.XInitializeBenchmarkSequence
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerDR_XInitializeBenchmarkSequence final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDR_XInitializeBenchmarkSequence) == 0x000008, "Wrong alignment on CustomConsoleManagerDR_XInitializeBenchmarkSequence");
static_assert(sizeof(CustomConsoleManagerDR_XInitializeBenchmarkSequence) == 0x000020, "Wrong size on CustomConsoleManagerDR_XInitializeBenchmarkSequence");
static_assert(offsetof(CustomConsoleManagerDR_XInitializeBenchmarkSequence, AssetPath) == 0x000000, "Member 'CustomConsoleManagerDR_XInitializeBenchmarkSequence::AssetPath' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDR_XInitializeBenchmarkSequence, AssetName) == 0x000010, "Member 'CustomConsoleManagerDR_XInitializeBenchmarkSequence::AssetName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDR.XForceWeather
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDR_XForceWeather final
{
public:
	EWeather                                      WeatherType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDR_XForceWeather) == 0x000001, "Wrong alignment on CustomConsoleManagerDR_XForceWeather");
static_assert(sizeof(CustomConsoleManagerDR_XForceWeather) == 0x000001, "Wrong size on CustomConsoleManagerDR_XForceWeather");
static_assert(offsetof(CustomConsoleManagerDR_XForceWeather, WeatherType) == 0x000000, "Member 'CustomConsoleManagerDR_XForceWeather::WeatherType' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDR.XSwitchToWeather
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDR_XSwitchToWeather final
{
public:
	EWeather                                      WeatherType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDR_XSwitchToWeather) == 0x000001, "Wrong alignment on CustomConsoleManagerDR_XSwitchToWeather");
static_assert(sizeof(CustomConsoleManagerDR_XSwitchToWeather) == 0x000001, "Wrong size on CustomConsoleManagerDR_XSwitchToWeather");
static_assert(offsetof(CustomConsoleManagerDR_XSwitchToWeather, WeatherType) == 0x000000, "Member 'CustomConsoleManagerDR_XSwitchToWeather::WeatherType' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.DebugUIShowTextSize
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerVC_DebugUIShowTextSize final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_DebugUIShowTextSize) == 0x000001, "Wrong alignment on CustomConsoleManagerVC_DebugUIShowTextSize");
static_assert(sizeof(CustomConsoleManagerVC_DebugUIShowTextSize) == 0x000001, "Wrong size on CustomConsoleManagerVC_DebugUIShowTextSize");
static_assert(offsetof(CustomConsoleManagerVC_DebugUIShowTextSize, bEnabled) == 0x000000, "Member 'CustomConsoleManagerVC_DebugUIShowTextSize::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XAddItemDragToQuickSlot
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVC_XAddItemDragToQuickSlot final
{
public:
	int32                                         IndexSlot;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XAddItemDragToQuickSlot) == 0x000004, "Wrong alignment on CustomConsoleManagerVC_XAddItemDragToQuickSlot");
static_assert(sizeof(CustomConsoleManagerVC_XAddItemDragToQuickSlot) == 0x000004, "Wrong size on CustomConsoleManagerVC_XAddItemDragToQuickSlot");
static_assert(offsetof(CustomConsoleManagerVC_XAddItemDragToQuickSlot, IndexSlot) == 0x000000, "Member 'CustomConsoleManagerVC_XAddItemDragToQuickSlot::IndexSlot' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XAddNotesById
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerVC_XAddNotesById final
{
public:
	class FString                                 InNotePrototypeID;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XAddNotesById) == 0x000008, "Wrong alignment on CustomConsoleManagerVC_XAddNotesById");
static_assert(sizeof(CustomConsoleManagerVC_XAddNotesById) == 0x000010, "Wrong size on CustomConsoleManagerVC_XAddNotesById");
static_assert(offsetof(CustomConsoleManagerVC_XAddNotesById, InNotePrototypeID) == 0x000000, "Member 'CustomConsoleManagerVC_XAddNotesById::InNotePrototypeID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XAddPDATutorialsBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerVC_XAddPDATutorialsBySID final
{
public:
	class FString                                 InPDATutorialPrototypeSID;                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XAddPDATutorialsBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerVC_XAddPDATutorialsBySID");
static_assert(sizeof(CustomConsoleManagerVC_XAddPDATutorialsBySID) == 0x000010, "Wrong size on CustomConsoleManagerVC_XAddPDATutorialsBySID");
static_assert(offsetof(CustomConsoleManagerVC_XAddPDATutorialsBySID, InPDATutorialPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerVC_XAddPDATutorialsBySID::InPDATutorialPrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XChangeLanguage
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVC_XChangeLanguage final
{
public:
	int32                                         LanguageIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XChangeLanguage) == 0x000004, "Wrong alignment on CustomConsoleManagerVC_XChangeLanguage");
static_assert(sizeof(CustomConsoleManagerVC_XChangeLanguage) == 0x000004, "Wrong size on CustomConsoleManagerVC_XChangeLanguage");
static_assert(offsetof(CustomConsoleManagerVC_XChangeLanguage, LanguageIndex) == 0x000000, "Member 'CustomConsoleManagerVC_XChangeLanguage::LanguageIndex' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XDialogFontSizeAnswer
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVC_XDialogFontSizeAnswer final
{
public:
	int32                                         InTextSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XDialogFontSizeAnswer) == 0x000004, "Wrong alignment on CustomConsoleManagerVC_XDialogFontSizeAnswer");
static_assert(sizeof(CustomConsoleManagerVC_XDialogFontSizeAnswer) == 0x000004, "Wrong size on CustomConsoleManagerVC_XDialogFontSizeAnswer");
static_assert(offsetof(CustomConsoleManagerVC_XDialogFontSizeAnswer, InTextSize) == 0x000000, "Member 'CustomConsoleManagerVC_XDialogFontSizeAnswer::InTextSize' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XDialogFontSizeSubtitle
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVC_XDialogFontSizeSubtitle final
{
public:
	int32                                         InTextSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XDialogFontSizeSubtitle) == 0x000004, "Wrong alignment on CustomConsoleManagerVC_XDialogFontSizeSubtitle");
static_assert(sizeof(CustomConsoleManagerVC_XDialogFontSizeSubtitle) == 0x000004, "Wrong size on CustomConsoleManagerVC_XDialogFontSizeSubtitle");
static_assert(offsetof(CustomConsoleManagerVC_XDialogFontSizeSubtitle, InTextSize) == 0x000000, "Member 'CustomConsoleManagerVC_XDialogFontSizeSubtitle::InTextSize' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XEnterRegion
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerVC_XEnterRegion final
{
public:
	class FString                                 RegionSID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XEnterRegion) == 0x000008, "Wrong alignment on CustomConsoleManagerVC_XEnterRegion");
static_assert(sizeof(CustomConsoleManagerVC_XEnterRegion) == 0x000010, "Wrong size on CustomConsoleManagerVC_XEnterRegion");
static_assert(offsetof(CustomConsoleManagerVC_XEnterRegion, RegionSID) == 0x000000, "Member 'CustomConsoleManagerVC_XEnterRegion::RegionSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XShowCompassAngle
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerVC_XShowCompassAngle final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XShowCompassAngle) == 0x000001, "Wrong alignment on CustomConsoleManagerVC_XShowCompassAngle");
static_assert(sizeof(CustomConsoleManagerVC_XShowCompassAngle) == 0x000001, "Wrong size on CustomConsoleManagerVC_XShowCompassAngle");
static_assert(offsetof(CustomConsoleManagerVC_XShowCompassAngle, bEnabled) == 0x000000, "Member 'CustomConsoleManagerVC_XShowCompassAngle::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XShowHUD
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerVC_XShowHUD final
{
public:
	bool                                          bIsShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XShowHUD) == 0x000001, "Wrong alignment on CustomConsoleManagerVC_XShowHUD");
static_assert(sizeof(CustomConsoleManagerVC_XShowHUD) == 0x000001, "Wrong size on CustomConsoleManagerVC_XShowHUD");
static_assert(offsetof(CustomConsoleManagerVC_XShowHUD, bIsShow) == 0x000000, "Member 'CustomConsoleManagerVC_XShowHUD::bIsShow' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XShowStatProgres
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerVC_XShowStatProgres final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XShowStatProgres) == 0x000001, "Wrong alignment on CustomConsoleManagerVC_XShowStatProgres");
static_assert(sizeof(CustomConsoleManagerVC_XShowStatProgres) == 0x000001, "Wrong size on CustomConsoleManagerVC_XShowStatProgres");
static_assert(offsetof(CustomConsoleManagerVC_XShowStatProgres, bEnabled) == 0x000000, "Member 'CustomConsoleManagerVC_XShowStatProgres::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVC.XShowUIDebugInput
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerVC_XShowUIDebugInput final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVC_XShowUIDebugInput) == 0x000001, "Wrong alignment on CustomConsoleManagerVC_XShowUIDebugInput");
static_assert(sizeof(CustomConsoleManagerVC_XShowUIDebugInput) == 0x000001, "Wrong size on CustomConsoleManagerVC_XShowUIDebugInput");
static_assert(offsetof(CustomConsoleManagerVC_XShowUIDebugInput, bEnabled) == 0x000000, "Member 'CustomConsoleManagerVC_XShowUIDebugInput::bEnabled' has a wrong offset!");

// Function Stalker2.StoreButtonStateDefiner.GetSubsystemOptions
// 0x0010 (0x0010 - 0x0000)
struct StoreButtonStateDefiner_GetSubsystemOptions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreButtonStateDefiner_GetSubsystemOptions) == 0x000008, "Wrong alignment on StoreButtonStateDefiner_GetSubsystemOptions");
static_assert(sizeof(StoreButtonStateDefiner_GetSubsystemOptions) == 0x000010, "Wrong size on StoreButtonStateDefiner_GetSubsystemOptions");
static_assert(offsetof(StoreButtonStateDefiner_GetSubsystemOptions, ReturnValue) == 0x000000, "Member 'StoreButtonStateDefiner_GetSubsystemOptions::ReturnValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMS.XCommitSuicide
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerMS_XCommitSuicide final
{
public:
	EDamageType                                   DamageType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMS_XCommitSuicide) == 0x000001, "Wrong alignment on CustomConsoleManagerMS_XCommitSuicide");
static_assert(sizeof(CustomConsoleManagerMS_XCommitSuicide) == 0x000001, "Wrong size on CustomConsoleManagerMS_XCommitSuicide");
static_assert(offsetof(CustomConsoleManagerMS_XCommitSuicide, DamageType) == 0x000000, "Member 'CustomConsoleManagerMS_XCommitSuicide::DamageType' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMS.XLaunchCustomAnimation
// 0x0028 (0x0028 - 0x0000)
struct CustomConsoleManagerMS_XLaunchCustomAnimation final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimPath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnimSlotName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMS_XLaunchCustomAnimation) == 0x000008, "Wrong alignment on CustomConsoleManagerMS_XLaunchCustomAnimation");
static_assert(sizeof(CustomConsoleManagerMS_XLaunchCustomAnimation) == 0x000028, "Wrong size on CustomConsoleManagerMS_XLaunchCustomAnimation");
static_assert(offsetof(CustomConsoleManagerMS_XLaunchCustomAnimation, ObjUID) == 0x000000, "Member 'CustomConsoleManagerMS_XLaunchCustomAnimation::ObjUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMS_XLaunchCustomAnimation, AnimPath) == 0x000008, "Member 'CustomConsoleManagerMS_XLaunchCustomAnimation::AnimPath' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMS_XLaunchCustomAnimation, AnimSlotName) == 0x000018, "Member 'CustomConsoleManagerMS_XLaunchCustomAnimation::AnimSlotName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMS.XSetAIStayGoal
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerMS_XSetAIStayGoal final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimPath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMS_XSetAIStayGoal) == 0x000008, "Wrong alignment on CustomConsoleManagerMS_XSetAIStayGoal");
static_assert(sizeof(CustomConsoleManagerMS_XSetAIStayGoal) == 0x000018, "Wrong size on CustomConsoleManagerMS_XSetAIStayGoal");
static_assert(offsetof(CustomConsoleManagerMS_XSetAIStayGoal, ObjUID) == 0x000000, "Member 'CustomConsoleManagerMS_XSetAIStayGoal::ObjUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMS_XSetAIStayGoal, AnimPath) == 0x000008, "Member 'CustomConsoleManagerMS_XSetAIStayGoal::AnimPath' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMS.XSetCameraShakeScale
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerMS_XSetCameraShakeScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMS_XSetCameraShakeScale) == 0x000004, "Wrong alignment on CustomConsoleManagerMS_XSetCameraShakeScale");
static_assert(sizeof(CustomConsoleManagerMS_XSetCameraShakeScale) == 0x000004, "Wrong size on CustomConsoleManagerMS_XSetCameraShakeScale");
static_assert(offsetof(CustomConsoleManagerMS_XSetCameraShakeScale, NewScale) == 0x000000, "Member 'CustomConsoleManagerMS_XSetCameraShakeScale::NewScale' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMS.XShowMaterial
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerMS_XShowMaterial final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMS_XShowMaterial) == 0x000004, "Wrong alignment on CustomConsoleManagerMS_XShowMaterial");
static_assert(sizeof(CustomConsoleManagerMS_XShowMaterial) == 0x00000C, "Wrong size on CustomConsoleManagerMS_XShowMaterial");
static_assert(offsetof(CustomConsoleManagerMS_XShowMaterial, ObjUID) == 0x000000, "Member 'CustomConsoleManagerMS_XShowMaterial::ObjUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMS_XShowMaterial, MaterialID) == 0x000004, "Member 'CustomConsoleManagerMS_XShowMaterial::MaterialID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMS_XShowMaterial, LODId) == 0x000008, "Member 'CustomConsoleManagerMS_XShowMaterial::LODId' has a wrong offset!");

// Function Stalker2.CameraModifier_AbilityCamModifier.UpdateCameraTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation) == 0x000008, "Wrong alignment on CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation");
static_assert(sizeof(CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation) == 0x000018, "Wrong size on CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation");
static_assert(offsetof(CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation, NewLocation) == 0x000000, "Member 'CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation::NewLocation' has a wrong offset!");

// Function Stalker2.CustomGrid.OnScrollBarScrolled
// 0x0004 (0x0004 - 0x0000)
struct CustomGrid_OnScrollBarScrolled final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomGrid_OnScrollBarScrolled) == 0x000004, "Wrong alignment on CustomGrid_OnScrollBarScrolled");
static_assert(sizeof(CustomGrid_OnScrollBarScrolled) == 0x000004, "Wrong size on CustomGrid_OnScrollBarScrolled");
static_assert(offsetof(CustomGrid_OnScrollBarScrolled, Offset) == 0x000000, "Member 'CustomGrid_OnScrollBarScrolled::Offset' has a wrong offset!");

// Function Stalker2.DealDamageComponent.DealDamage
// 0x0008 (0x0008 - 0x0000)
struct DealDamageComponent_DealDamage final
{
public:
	const class AActor*                           InTargetActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DealDamageComponent_DealDamage) == 0x000008, "Wrong alignment on DealDamageComponent_DealDamage");
static_assert(sizeof(DealDamageComponent_DealDamage) == 0x000008, "Wrong size on DealDamageComponent_DealDamage");
static_assert(offsetof(DealDamageComponent_DealDamage, InTargetActor) == 0x000000, "Member 'DealDamageComponent_DealDamage::InTargetActor' has a wrong offset!");

// Function Stalker2.PlaySoundQuestNodeListener.OnSoundFinished
// 0x0010 (0x0010 - 0x0000)
struct PlaySoundQuestNodeListener_OnSoundFinished final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlaySoundQuestNodeListener_OnSoundFinished) == 0x000008, "Wrong alignment on PlaySoundQuestNodeListener_OnSoundFinished");
static_assert(sizeof(PlaySoundQuestNodeListener_OnSoundFinished) == 0x000010, "Wrong size on PlaySoundQuestNodeListener_OnSoundFinished");
static_assert(offsetof(PlaySoundQuestNodeListener_OnSoundFinished, CallbackType) == 0x000000, "Member 'PlaySoundQuestNodeListener_OnSoundFinished::CallbackType' has a wrong offset!");
static_assert(offsetof(PlaySoundQuestNodeListener_OnSoundFinished, CallbackInfo) == 0x000008, "Member 'PlaySoundQuestNodeListener_OnSoundFinished::CallbackInfo' has a wrong offset!");

// Function Stalker2.DebugTextLineWidget.GetIndecRowSettings
// 0x0020 (0x0020 - 0x0000)
struct DebugTextLineWidget_GetIndecRowSettings final
{
public:
	int32                                         CurrentRow;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRengeSettings>                 RowSettings;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DebugTextLineWidget_GetIndecRowSettings) == 0x000008, "Wrong alignment on DebugTextLineWidget_GetIndecRowSettings");
static_assert(sizeof(DebugTextLineWidget_GetIndecRowSettings) == 0x000020, "Wrong size on DebugTextLineWidget_GetIndecRowSettings");
static_assert(offsetof(DebugTextLineWidget_GetIndecRowSettings, CurrentRow) == 0x000000, "Member 'DebugTextLineWidget_GetIndecRowSettings::CurrentRow' has a wrong offset!");
static_assert(offsetof(DebugTextLineWidget_GetIndecRowSettings, RowSettings) == 0x000008, "Member 'DebugTextLineWidget_GetIndecRowSettings::RowSettings' has a wrong offset!");
static_assert(offsetof(DebugTextLineWidget_GetIndecRowSettings, ReturnValue) == 0x000018, "Member 'DebugTextLineWidget_GetIndecRowSettings::ReturnValue' has a wrong offset!");

// Function Stalker2.CheckBoxWidget.SetChecked
// 0x0002 (0x0002 - 0x0000)
struct CheckBoxWidget_SetChecked final
{
public:
	bool                                          bInChecked;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrodcastOnChangeCheck;                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckBoxWidget_SetChecked) == 0x000001, "Wrong alignment on CheckBoxWidget_SetChecked");
static_assert(sizeof(CheckBoxWidget_SetChecked) == 0x000002, "Wrong size on CheckBoxWidget_SetChecked");
static_assert(offsetof(CheckBoxWidget_SetChecked, bInChecked) == 0x000000, "Member 'CheckBoxWidget_SetChecked::bInChecked' has a wrong offset!");
static_assert(offsetof(CheckBoxWidget_SetChecked, bBrodcastOnChangeCheck) == 0x000001, "Member 'CheckBoxWidget_SetChecked::bBrodcastOnChangeCheck' has a wrong offset!");

// Function Stalker2.CheckBoxWidget.GetChecked
// 0x0001 (0x0001 - 0x0000)
struct CheckBoxWidget_GetChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckBoxWidget_GetChecked) == 0x000001, "Wrong alignment on CheckBoxWidget_GetChecked");
static_assert(sizeof(CheckBoxWidget_GetChecked) == 0x000001, "Wrong size on CheckBoxWidget_GetChecked");
static_assert(offsetof(CheckBoxWidget_GetChecked, ReturnValue) == 0x000000, "Member 'CheckBoxWidget_GetChecked::ReturnValue' has a wrong offset!");

// Function Stalker2.PsyVolumeComponent.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct PsyVolumeComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PsyVolumeComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on PsyVolumeComponent_OnBeginOverlap");
static_assert(sizeof(PsyVolumeComponent_OnBeginOverlap) == 0x000108, "Wrong size on PsyVolumeComponent_OnBeginOverlap");
static_assert(offsetof(PsyVolumeComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'PsyVolumeComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'PsyVolumeComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'PsyVolumeComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PsyVolumeComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'PsyVolumeComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'PsyVolumeComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.PsyVolumeComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PsyVolumeComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PsyVolumeComponent_OnEndOverlap) == 0x000008, "Wrong alignment on PsyVolumeComponent_OnEndOverlap");
static_assert(sizeof(PsyVolumeComponent_OnEndOverlap) == 0x000020, "Wrong size on PsyVolumeComponent_OnEndOverlap");
static_assert(offsetof(PsyVolumeComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'PsyVolumeComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'PsyVolumeComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'PsyVolumeComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PsyVolumeComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'PsyVolumeComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.CinematicManager.OnFadeScreenEnd
// 0x001C (0x001C - 0x0000)
struct CinematicManager_OnFadeScreenEnd final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FadeTargetColor;                                   // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeAmount;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_OnFadeScreenEnd) == 0x000004, "Wrong alignment on CinematicManager_OnFadeScreenEnd");
static_assert(sizeof(CinematicManager_OnFadeScreenEnd) == 0x00001C, "Wrong size on CinematicManager_OnFadeScreenEnd");
static_assert(offsetof(CinematicManager_OnFadeScreenEnd, bFadeOut) == 0x000000, "Member 'CinematicManager_OnFadeScreenEnd::bFadeOut' has a wrong offset!");
static_assert(offsetof(CinematicManager_OnFadeScreenEnd, FadeTargetColor) == 0x000004, "Member 'CinematicManager_OnFadeScreenEnd::FadeTargetColor' has a wrong offset!");
static_assert(offsetof(CinematicManager_OnFadeScreenEnd, FadeAmount) == 0x000014, "Member 'CinematicManager_OnFadeScreenEnd::FadeAmount' has a wrong offset!");
static_assert(offsetof(CinematicManager_OnFadeScreenEnd, FadeTime) == 0x000018, "Member 'CinematicManager_OnFadeScreenEnd::FadeTime' has a wrong offset!");

// Function Stalker2.CinematicManager.OnKeyFrameSectionEnd
// 0x0008 (0x0008 - 0x0000)
struct CinematicManager_OnKeyFrameSectionEnd final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_OnKeyFrameSectionEnd) == 0x000004, "Wrong alignment on CinematicManager_OnKeyFrameSectionEnd");
static_assert(sizeof(CinematicManager_OnKeyFrameSectionEnd) == 0x000008, "Wrong size on CinematicManager_OnKeyFrameSectionEnd");
static_assert(offsetof(CinematicManager_OnKeyFrameSectionEnd, SectionName) == 0x000000, "Member 'CinematicManager_OnKeyFrameSectionEnd::SectionName' has a wrong offset!");

// Function Stalker2.CinematicManager.OnKeyFrameSectionStart
// 0x0034 (0x0034 - 0x0000)
struct CinematicManager_OnKeyFrameSectionStart final
{
public:
	struct FCinematicSectionParams                InCinematicSectionParams;                          // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_OnKeyFrameSectionStart) == 0x000004, "Wrong alignment on CinematicManager_OnKeyFrameSectionStart");
static_assert(sizeof(CinematicManager_OnKeyFrameSectionStart) == 0x000034, "Wrong size on CinematicManager_OnKeyFrameSectionStart");
static_assert(offsetof(CinematicManager_OnKeyFrameSectionStart, InCinematicSectionParams) == 0x000000, "Member 'CinematicManager_OnKeyFrameSectionStart::InCinematicSectionParams' has a wrong offset!");

// Function Stalker2.CinematicManager.OnSubtitleSectionStart
// 0x0020 (0x0020 - 0x0000)
struct CinematicManager_OnSubtitleSectionStart final
{
public:
	class FString                                 NPCSID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogSID;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_OnSubtitleSectionStart) == 0x000008, "Wrong alignment on CinematicManager_OnSubtitleSectionStart");
static_assert(sizeof(CinematicManager_OnSubtitleSectionStart) == 0x000020, "Wrong size on CinematicManager_OnSubtitleSectionStart");
static_assert(offsetof(CinematicManager_OnSubtitleSectionStart, NPCSID) == 0x000000, "Member 'CinematicManager_OnSubtitleSectionStart::NPCSID' has a wrong offset!");
static_assert(offsetof(CinematicManager_OnSubtitleSectionStart, DialogSID) == 0x000010, "Member 'CinematicManager_OnSubtitleSectionStart::DialogSID' has a wrong offset!");

// Function Stalker2.CinematicManager.OnHapticFeedbackEnd
// 0x0008 (0x0008 - 0x0000)
struct CinematicManager_OnHapticFeedbackEnd final
{
public:
	struct FGameplayTag                           ForceFeeedbackEffectTag;                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_OnHapticFeedbackEnd) == 0x000004, "Wrong alignment on CinematicManager_OnHapticFeedbackEnd");
static_assert(sizeof(CinematicManager_OnHapticFeedbackEnd) == 0x000008, "Wrong size on CinematicManager_OnHapticFeedbackEnd");
static_assert(offsetof(CinematicManager_OnHapticFeedbackEnd, ForceFeeedbackEffectTag) == 0x000000, "Member 'CinematicManager_OnHapticFeedbackEnd::ForceFeeedbackEffectTag' has a wrong offset!");

// Function Stalker2.CinematicManager.OnHapticFeedbackStart
// 0x0008 (0x0008 - 0x0000)
struct CinematicManager_OnHapticFeedbackStart final
{
public:
	struct FGameplayTag                           ForceFeeedbackEffectTag;                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_OnHapticFeedbackStart) == 0x000004, "Wrong alignment on CinematicManager_OnHapticFeedbackStart");
static_assert(sizeof(CinematicManager_OnHapticFeedbackStart) == 0x000008, "Wrong size on CinematicManager_OnHapticFeedbackStart");
static_assert(offsetof(CinematicManager_OnHapticFeedbackStart, ForceFeeedbackEffectTag) == 0x000000, "Member 'CinematicManager_OnHapticFeedbackStart::ForceFeeedbackEffectTag' has a wrong offset!");

// Function Stalker2.ClickerAnomaly.OnBeginParticleOverlap
// 0x0108 (0x0108 - 0x0000)
struct ClickerAnomaly_OnBeginParticleOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClickerAnomaly_OnBeginParticleOverlap) == 0x000008, "Wrong alignment on ClickerAnomaly_OnBeginParticleOverlap");
static_assert(sizeof(ClickerAnomaly_OnBeginParticleOverlap) == 0x000108, "Wrong size on ClickerAnomaly_OnBeginParticleOverlap");
static_assert(offsetof(ClickerAnomaly_OnBeginParticleOverlap, OverlappedComponent) == 0x000000, "Member 'ClickerAnomaly_OnBeginParticleOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ClickerAnomaly_OnBeginParticleOverlap, OtherActor) == 0x000008, "Member 'ClickerAnomaly_OnBeginParticleOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ClickerAnomaly_OnBeginParticleOverlap, OtherComp) == 0x000010, "Member 'ClickerAnomaly_OnBeginParticleOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ClickerAnomaly_OnBeginParticleOverlap, OtherBodyIndex) == 0x000018, "Member 'ClickerAnomaly_OnBeginParticleOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ClickerAnomaly_OnBeginParticleOverlap, bFromSweep) == 0x00001C, "Member 'ClickerAnomaly_OnBeginParticleOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ClickerAnomaly_OnBeginParticleOverlap, SweepResult) == 0x000020, "Member 'ClickerAnomaly_OnBeginParticleOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.FinalCreditsWithVideo.PlayVideo
// 0x0008 (0x0008 - 0x0000)
struct FinalCreditsWithVideo_PlayVideo final
{
public:
	class UMediaSource*                           VideoToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinalCreditsWithVideo_PlayVideo) == 0x000008, "Wrong alignment on FinalCreditsWithVideo_PlayVideo");
static_assert(sizeof(FinalCreditsWithVideo_PlayVideo) == 0x000008, "Wrong size on FinalCreditsWithVideo_PlayVideo");
static_assert(offsetof(FinalCreditsWithVideo_PlayVideo, VideoToPlay) == 0x000000, "Member 'FinalCreditsWithVideo_PlayVideo::VideoToPlay' has a wrong offset!");

// Function Stalker2.FinalCreditsWithVideo.GetVideoDuration
// 0x0004 (0x0004 - 0x0000)
struct FinalCreditsWithVideo_GetVideoDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FinalCreditsWithVideo_GetVideoDuration) == 0x000004, "Wrong alignment on FinalCreditsWithVideo_GetVideoDuration");
static_assert(sizeof(FinalCreditsWithVideo_GetVideoDuration) == 0x000004, "Wrong size on FinalCreditsWithVideo_GetVideoDuration");
static_assert(offsetof(FinalCreditsWithVideo_GetVideoDuration, ReturnValue) == 0x000000, "Member 'FinalCreditsWithVideo_GetVideoDuration::ReturnValue' has a wrong offset!");

// Function Stalker2.CustomSimplifiedGrid.OnScrollBarScrolled
// 0x0004 (0x0004 - 0x0000)
struct CustomSimplifiedGrid_OnScrollBarScrolled final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomSimplifiedGrid_OnScrollBarScrolled) == 0x000004, "Wrong alignment on CustomSimplifiedGrid_OnScrollBarScrolled");
static_assert(sizeof(CustomSimplifiedGrid_OnScrollBarScrolled) == 0x000004, "Wrong size on CustomSimplifiedGrid_OnScrollBarScrolled");
static_assert(offsetof(CustomSimplifiedGrid_OnScrollBarScrolled, Offset) == 0x000000, "Member 'CustomSimplifiedGrid_OnScrollBarScrolled::Offset' has a wrong offset!");

// Function Stalker2.FogActor.GetFogParamsForCurrentWeather
// 0x000C (0x000C - 0x0000)
struct FogActor_GetFogParamsForCurrentWeather final
{
public:
	struct FFogParams                             ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FogActor_GetFogParamsForCurrentWeather) == 0x000004, "Wrong alignment on FogActor_GetFogParamsForCurrentWeather");
static_assert(sizeof(FogActor_GetFogParamsForCurrentWeather) == 0x00000C, "Wrong size on FogActor_GetFogParamsForCurrentWeather");
static_assert(offsetof(FogActor_GetFogParamsForCurrentWeather, ReturnValue) == 0x000000, "Member 'FogActor_GetFogParamsForCurrentWeather::ReturnValue' has a wrong offset!");

// Function Stalker2.DeadBody.GetInteractedActor
// 0x0008 (0x0008 - 0x0000)
struct DeadBody_GetInteractedActor final
{
public:
	class AObj*                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeadBody_GetInteractedActor) == 0x000008, "Wrong alignment on DeadBody_GetInteractedActor");
static_assert(sizeof(DeadBody_GetInteractedActor) == 0x000008, "Wrong size on DeadBody_GetInteractedActor");
static_assert(offsetof(DeadBody_GetInteractedActor, ReturnValue) == 0x000000, "Member 'DeadBody_GetInteractedActor::ReturnValue' has a wrong offset!");

// Function Stalker2.CodelockSingleClickComponent.Interact
// 0x0008 (0x0008 - 0x0000)
struct CodelockSingleClickComponent_Interact final
{
public:
	class AObj*                                   InteractedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CodelockSingleClickComponent_Interact) == 0x000008, "Wrong alignment on CodelockSingleClickComponent_Interact");
static_assert(sizeof(CodelockSingleClickComponent_Interact) == 0x000008, "Wrong size on CodelockSingleClickComponent_Interact");
static_assert(offsetof(CodelockSingleClickComponent_Interact, InteractedActor) == 0x000000, "Member 'CodelockSingleClickComponent_Interact::InteractedActor' has a wrong offset!");

// Function Stalker2.DialogManager.OnToggleAudiolog
// 0x0001 (0x0001 - 0x0000)
struct DialogManager_OnToggleAudiolog final
{
public:
	bool                                          bPlayAudiolog;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogManager_OnToggleAudiolog) == 0x000001, "Wrong alignment on DialogManager_OnToggleAudiolog");
static_assert(sizeof(DialogManager_OnToggleAudiolog) == 0x000001, "Wrong size on DialogManager_OnToggleAudiolog");
static_assert(offsetof(DialogManager_OnToggleAudiolog, bPlayAudiolog) == 0x000000, "Member 'DialogManager_OnToggleAudiolog::bPlayAudiolog' has a wrong offset!");

// Function Stalker2.InteractableComponent.SetDisplayPriority
// 0x0001 (0x0001 - 0x0000)
struct InteractableComponent_SetDisplayPriority final
{
public:
	EDisplayPriority                              NewPriority;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableComponent_SetDisplayPriority) == 0x000001, "Wrong alignment on InteractableComponent_SetDisplayPriority");
static_assert(sizeof(InteractableComponent_SetDisplayPriority) == 0x000001, "Wrong size on InteractableComponent_SetDisplayPriority");
static_assert(offsetof(InteractableComponent_SetDisplayPriority, NewPriority) == 0x000000, "Member 'InteractableComponent_SetDisplayPriority::NewPriority' has a wrong offset!");

// Function Stalker2.InteractableComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractableComponent_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableComponent_SetEnabled) == 0x000001, "Wrong alignment on InteractableComponent_SetEnabled");
static_assert(sizeof(InteractableComponent_SetEnabled) == 0x000001, "Wrong size on InteractableComponent_SetEnabled");
static_assert(offsetof(InteractableComponent_SetEnabled, bInEnabled) == 0x000000, "Member 'InteractableComponent_SetEnabled::bInEnabled' has a wrong offset!");

// Function Stalker2.InteractableComponent.GetDisplayPriority
// 0x0001 (0x0001 - 0x0000)
struct InteractableComponent_GetDisplayPriority final
{
public:
	EDisplayPriority                              ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableComponent_GetDisplayPriority) == 0x000001, "Wrong alignment on InteractableComponent_GetDisplayPriority");
static_assert(sizeof(InteractableComponent_GetDisplayPriority) == 0x000001, "Wrong size on InteractableComponent_GetDisplayPriority");
static_assert(offsetof(InteractableComponent_GetDisplayPriority, ReturnValue) == 0x000000, "Member 'InteractableComponent_GetDisplayPriority::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableComponent.GetInteractionType
// 0x0001 (0x0001 - 0x0000)
struct InteractableComponent_GetInteractionType final
{
public:
	EInteractionType                              ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableComponent_GetInteractionType) == 0x000001, "Wrong alignment on InteractableComponent_GetInteractionType");
static_assert(sizeof(InteractableComponent_GetInteractionType) == 0x000001, "Wrong size on InteractableComponent_GetInteractionType");
static_assert(offsetof(InteractableComponent_GetInteractionType, ReturnValue) == 0x000000, "Member 'InteractableComponent_GetInteractionType::ReturnValue' has a wrong offset!");

// Function Stalker2.InteractableComponent.GetPreventDefaultInteract
// 0x0001 (0x0001 - 0x0000)
struct InteractableComponent_GetPreventDefaultInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableComponent_GetPreventDefaultInteract) == 0x000001, "Wrong alignment on InteractableComponent_GetPreventDefaultInteract");
static_assert(sizeof(InteractableComponent_GetPreventDefaultInteract) == 0x000001, "Wrong size on InteractableComponent_GetPreventDefaultInteract");
static_assert(offsetof(InteractableComponent_GetPreventDefaultInteract, ReturnValue) == 0x000000, "Member 'InteractableComponent_GetPreventDefaultInteract::ReturnValue' has a wrong offset!");

// Function Stalker2.PossessedObjectEventData.GetPossessedObject
// 0x0008 (0x0008 - 0x0000)
struct PossessedObjectEventData_GetPossessedObject final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessedObjectEventData_GetPossessedObject) == 0x000008, "Wrong alignment on PossessedObjectEventData_GetPossessedObject");
static_assert(sizeof(PossessedObjectEventData_GetPossessedObject) == 0x000008, "Wrong size on PossessedObjectEventData_GetPossessedObject");
static_assert(offsetof(PossessedObjectEventData_GetPossessedObject, ReturnValue) == 0x000000, "Member 'PossessedObjectEventData_GetPossessedObject::ReturnValue' has a wrong offset!");

// Function Stalker2.HintBase.HoverChangeHintTextColor
// 0x0018 (0x0018 - 0x0000)
struct HintBase_HoverChangeHintTextColor final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InStylePrefix;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintBase_HoverChangeHintTextColor) == 0x000008, "Wrong alignment on HintBase_HoverChangeHintTextColor");
static_assert(sizeof(HintBase_HoverChangeHintTextColor) == 0x000018, "Wrong size on HintBase_HoverChangeHintTextColor");
static_assert(offsetof(HintBase_HoverChangeHintTextColor, bShow) == 0x000000, "Member 'HintBase_HoverChangeHintTextColor::bShow' has a wrong offset!");
static_assert(offsetof(HintBase_HoverChangeHintTextColor, InStylePrefix) == 0x000008, "Member 'HintBase_HoverChangeHintTextColor::InStylePrefix' has a wrong offset!");

// Function Stalker2.HintBase.PostShowHover
// 0x0001 (0x0001 - 0x0000)
struct HintBase_PostShowHover final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintBase_PostShowHover) == 0x000001, "Wrong alignment on HintBase_PostShowHover");
static_assert(sizeof(HintBase_PostShowHover) == 0x000001, "Wrong size on HintBase_PostShowHover");
static_assert(offsetof(HintBase_PostShowHover, bInShow) == 0x000000, "Member 'HintBase_PostShowHover::bInShow' has a wrong offset!");

// Function Stalker2.HintBase.SetStylePrefix
// 0x0010 (0x0010 - 0x0000)
struct HintBase_SetStylePrefix final
{
public:
	class FString                                 InStylePrefix;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintBase_SetStylePrefix) == 0x000008, "Wrong alignment on HintBase_SetStylePrefix");
static_assert(sizeof(HintBase_SetStylePrefix) == 0x000010, "Wrong size on HintBase_SetStylePrefix");
static_assert(offsetof(HintBase_SetStylePrefix, InStylePrefix) == 0x000000, "Member 'HintBase_SetStylePrefix::InStylePrefix' has a wrong offset!");

// Function Stalker2.HintBase.SetText
// 0x0018 (0x0018 - 0x0000)
struct HintBase_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintBase_SetText) == 0x000008, "Wrong alignment on HintBase_SetText");
static_assert(sizeof(HintBase_SetText) == 0x000018, "Wrong size on HintBase_SetText");
static_assert(offsetof(HintBase_SetText, InText) == 0x000000, "Member 'HintBase_SetText::InText' has a wrong offset!");

// Function Stalker2.HintBase.GetHoverSettings
// 0x0010 (0x0010 - 0x0000)
struct HintBase_GetHoverSettings final
{
public:
	TArray<struct FHoverAction>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintBase_GetHoverSettings) == 0x000008, "Wrong alignment on HintBase_GetHoverSettings");
static_assert(sizeof(HintBase_GetHoverSettings) == 0x000010, "Wrong size on HintBase_GetHoverSettings");
static_assert(offsetof(HintBase_GetHoverSettings, ReturnValue) == 0x000000, "Member 'HintBase_GetHoverSettings::ReturnValue' has a wrong offset!");

// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap");
static_assert(sizeof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap) == 0x000108, "Wrong size on PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnBeginOverlapFlowers
// 0x0108 (0x0108 - 0x0000)
struct PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers) == 0x000008, "Wrong alignment on PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers");
static_assert(sizeof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers) == 0x000108, "Wrong size on PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers, OverlappedComponent) == 0x000000, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers, OtherActor) == 0x000008, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers::OtherActor' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers, OtherComp) == 0x000010, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers::OtherComp' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers, OtherBodyIndex) == 0x000018, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers, bFromSweep) == 0x00001C, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers::bFromSweep' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers, SweepResult) == 0x000020, "Member 'PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers::SweepResult' has a wrong offset!");

// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PoppyFieldAnomalyBehaviorComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlap) == 0x000008, "Wrong alignment on PoppyFieldAnomalyBehaviorComponent_OnEndOverlap");
static_assert(sizeof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlap) == 0x000020, "Wrong size on PoppyFieldAnomalyBehaviorComponent_OnEndOverlap");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnEndOverlapFlowers
// 0x0020 (0x0020 - 0x0000)
struct PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers) == 0x000008, "Wrong alignment on PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers");
static_assert(sizeof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers) == 0x000020, "Wrong size on PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers, OverlappedComponent) == 0x000000, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers, OtherActor) == 0x000008, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers::OtherActor' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers, OtherComp) == 0x000010, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers::OtherComp' has a wrong offset!");
static_assert(offsetof(PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers, OtherBodyIndex) == 0x000018, "Member 'PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XResurrectNPCAsZombie
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVP_XResurrectNPCAsZombie final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XResurrectNPCAsZombie) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XResurrectNPCAsZombie");
static_assert(sizeof(CustomConsoleManagerVP_XResurrectNPCAsZombie) == 0x000004, "Wrong size on CustomConsoleManagerVP_XResurrectNPCAsZombie");
static_assert(offsetof(CustomConsoleManagerVP_XResurrectNPCAsZombie, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XResurrectNPCAsZombie::NpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XWoundNpcByUID
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVP_XWoundNpcByUID final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XWoundNpcByUID) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XWoundNpcByUID");
static_assert(sizeof(CustomConsoleManagerVP_XWoundNpcByUID) == 0x000004, "Wrong size on CustomConsoleManagerVP_XWoundNpcByUID");
static_assert(offsetof(CustomConsoleManagerVP_XWoundNpcByUID, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XWoundNpcByUID::NpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XKnockDownNpc
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVP_XKnockDownNpc final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XKnockDownNpc) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XKnockDownNpc");
static_assert(sizeof(CustomConsoleManagerVP_XKnockDownNpc) == 0x000004, "Wrong size on CustomConsoleManagerVP_XKnockDownNpc");
static_assert(offsetof(CustomConsoleManagerVP_XKnockDownNpc, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XKnockDownNpc::NpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XKnockDownNpcByAnotherNpc
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackerNpcUID;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc");
static_assert(sizeof(CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc) == 0x000008, "Wrong size on CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc");
static_assert(offsetof(CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc, AttackerNpcUID) == 0x000004, "Member 'CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc::AttackerNpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XLaunchFacialAnimation
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerVP_XLaunchFacialAnimation final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnimPath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XLaunchFacialAnimation) == 0x000008, "Wrong alignment on CustomConsoleManagerVP_XLaunchFacialAnimation");
static_assert(sizeof(CustomConsoleManagerVP_XLaunchFacialAnimation) == 0x000018, "Wrong size on CustomConsoleManagerVP_XLaunchFacialAnimation");
static_assert(offsetof(CustomConsoleManagerVP_XLaunchFacialAnimation, ObjUID) == 0x000000, "Member 'CustomConsoleManagerVP_XLaunchFacialAnimation::ObjUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XLaunchFacialAnimation, AnimPath) == 0x000008, "Member 'CustomConsoleManagerVP_XLaunchFacialAnimation::AnimPath' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XLimitNpcBodyPartRotation
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerVP_XLimitNpcBodyPartRotation final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngle;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERotationPartType                             RotationPartType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerVP_XLimitNpcBodyPartRotation) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XLimitNpcBodyPartRotation");
static_assert(sizeof(CustomConsoleManagerVP_XLimitNpcBodyPartRotation) == 0x00000C, "Wrong size on CustomConsoleManagerVP_XLimitNpcBodyPartRotation");
static_assert(offsetof(CustomConsoleManagerVP_XLimitNpcBodyPartRotation, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XLimitNpcBodyPartRotation::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XLimitNpcBodyPartRotation, LimitAngle) == 0x000004, "Member 'CustomConsoleManagerVP_XLimitNpcBodyPartRotation::LimitAngle' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XLimitNpcBodyPartRotation, RotationPartType) == 0x000008, "Member 'CustomConsoleManagerVP_XLimitNpcBodyPartRotation::RotationPartType' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XNpcLookAt
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerVP_XNpcLookAt final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XNpcLookAt) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XNpcLookAt");
static_assert(sizeof(CustomConsoleManagerVP_XNpcLookAt) == 0x000010, "Wrong size on CustomConsoleManagerVP_XNpcLookAt");
static_assert(offsetof(CustomConsoleManagerVP_XNpcLookAt, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XNpcLookAt::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XNpcLookAt, X) == 0x000004, "Member 'CustomConsoleManagerVP_XNpcLookAt::X' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XNpcLookAt, Y) == 0x000008, "Member 'CustomConsoleManagerVP_XNpcLookAt::Y' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XNpcLookAt, Z) == 0x00000C, "Member 'CustomConsoleManagerVP_XNpcLookAt::Z' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XNpcLookAtNPC
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerVP_XNpcLookAtNPC final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetNpcUID;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVP_XNpcLookAtNPC) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XNpcLookAtNPC");
static_assert(sizeof(CustomConsoleManagerVP_XNpcLookAtNPC) == 0x000008, "Wrong size on CustomConsoleManagerVP_XNpcLookAtNPC");
static_assert(offsetof(CustomConsoleManagerVP_XNpcLookAtNPC, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XNpcLookAtNPC::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XNpcLookAtNPC, TargetNpcUID) == 0x000004, "Member 'CustomConsoleManagerVP_XNpcLookAtNPC::TargetNpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVP.XNpcSetLookAtOwnerState
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerVP_XNpcSetLookAtOwnerState final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELookAtOwnerState                             LookAtOwnerState;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerVP_XNpcSetLookAtOwnerState) == 0x000004, "Wrong alignment on CustomConsoleManagerVP_XNpcSetLookAtOwnerState");
static_assert(sizeof(CustomConsoleManagerVP_XNpcSetLookAtOwnerState) == 0x000008, "Wrong size on CustomConsoleManagerVP_XNpcSetLookAtOwnerState");
static_assert(offsetof(CustomConsoleManagerVP_XNpcSetLookAtOwnerState, NpcUID) == 0x000000, "Member 'CustomConsoleManagerVP_XNpcSetLookAtOwnerState::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVP_XNpcSetLookAtOwnerState, LookAtOwnerState) == 0x000004, "Member 'CustomConsoleManagerVP_XNpcSetLookAtOwnerState::LookAtOwnerState' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerYS.XSpawnALifeDirectorScenario
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerYS_XSpawnALifeDirectorScenario final
{
public:
	class FString                                 ScenarioSID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerYS_XSpawnALifeDirectorScenario) == 0x000008, "Wrong alignment on CustomConsoleManagerYS_XSpawnALifeDirectorScenario");
static_assert(sizeof(CustomConsoleManagerYS_XSpawnALifeDirectorScenario) == 0x000010, "Wrong size on CustomConsoleManagerYS_XSpawnALifeDirectorScenario");
static_assert(offsetof(CustomConsoleManagerYS_XSpawnALifeDirectorScenario, ScenarioSID) == 0x000000, "Member 'CustomConsoleManagerYS_XSpawnALifeDirectorScenario::ScenarioSID' has a wrong offset!");

// Function Stalker2.door.OnDoorMeshHit
// 0x0118 (0x0118 - 0x0000)
struct door_OnDoorMeshHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(door_OnDoorMeshHit) == 0x000008, "Wrong alignment on door_OnDoorMeshHit");
static_assert(sizeof(door_OnDoorMeshHit) == 0x000118, "Wrong size on door_OnDoorMeshHit");
static_assert(offsetof(door_OnDoorMeshHit, HitComp) == 0x000000, "Member 'door_OnDoorMeshHit::HitComp' has a wrong offset!");
static_assert(offsetof(door_OnDoorMeshHit, OtherActor) == 0x000008, "Member 'door_OnDoorMeshHit::OtherActor' has a wrong offset!");
static_assert(offsetof(door_OnDoorMeshHit, OtherComp) == 0x000010, "Member 'door_OnDoorMeshHit::OtherComp' has a wrong offset!");
static_assert(offsetof(door_OnDoorMeshHit, NormalImpulse) == 0x000018, "Member 'door_OnDoorMeshHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(door_OnDoorMeshHit, Hit) == 0x000030, "Member 'door_OnDoorMeshHit::Hit' has a wrong offset!");

// Function Stalker2.ContextualNavLinkProxy.OnStartUsingCustomLink
// 0x0020 (0x0020 - 0x0000)
struct ContextualNavLinkProxy_OnStartUsingCustomLink final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestinationPoint;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualNavLinkProxy_OnStartUsingCustomLink) == 0x000008, "Wrong alignment on ContextualNavLinkProxy_OnStartUsingCustomLink");
static_assert(sizeof(ContextualNavLinkProxy_OnStartUsingCustomLink) == 0x000020, "Wrong size on ContextualNavLinkProxy_OnStartUsingCustomLink");
static_assert(offsetof(ContextualNavLinkProxy_OnStartUsingCustomLink, MovingActor) == 0x000000, "Member 'ContextualNavLinkProxy_OnStartUsingCustomLink::MovingActor' has a wrong offset!");
static_assert(offsetof(ContextualNavLinkProxy_OnStartUsingCustomLink, DestinationPoint) == 0x000008, "Member 'ContextualNavLinkProxy_OnStartUsingCustomLink::DestinationPoint' has a wrong offset!");

// Function Stalker2.CppMediator.BindInteractPaintMaterial
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_BindInteractPaintMaterial final
{
public:
	class AActor*                                 AffectedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_BindInteractPaintMaterial) == 0x000008, "Wrong alignment on CppMediator_BindInteractPaintMaterial");
static_assert(sizeof(CppMediator_BindInteractPaintMaterial) == 0x000008, "Wrong size on CppMediator_BindInteractPaintMaterial");
static_assert(offsetof(CppMediator_BindInteractPaintMaterial, AffectedActor) == 0x000000, "Member 'CppMediator_BindInteractPaintMaterial::AffectedActor' has a wrong offset!");

// Function Stalker2.CppMediator.CanPlayAudiolog
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_CanPlayAudiolog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_CanPlayAudiolog) == 0x000001, "Wrong alignment on CppMediator_CanPlayAudiolog");
static_assert(sizeof(CppMediator_CanPlayAudiolog) == 0x000001, "Wrong size on CppMediator_CanPlayAudiolog");
static_assert(offsetof(CppMediator_CanPlayAudiolog, ReturnValue) == 0x000000, "Member 'CppMediator_CanPlayAudiolog::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.CreateAIEvent
// 0x0028 (0x0028 - 0x0000)
struct CppMediator_CreateAIEvent final
{
public:
	const class AObj*                             SenderObj;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESoundEventType                               EventType;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_CreateAIEvent) == 0x000008, "Wrong alignment on CppMediator_CreateAIEvent");
static_assert(sizeof(CppMediator_CreateAIEvent) == 0x000028, "Wrong size on CppMediator_CreateAIEvent");
static_assert(offsetof(CppMediator_CreateAIEvent, SenderObj) == 0x000000, "Member 'CppMediator_CreateAIEvent::SenderObj' has a wrong offset!");
static_assert(offsetof(CppMediator_CreateAIEvent, Location) == 0x000008, "Member 'CppMediator_CreateAIEvent::Location' has a wrong offset!");
static_assert(offsetof(CppMediator_CreateAIEvent, EventType) == 0x000020, "Member 'CppMediator_CreateAIEvent::EventType' has a wrong offset!");

// Function Stalker2.CppMediator.CreateAIVoiceEvent
// 0x0038 (0x0038 - 0x0000)
struct CppMediator_CreateAIVoiceEvent final
{
public:
	const class AObj*                             SenderObj;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_CreateAIVoiceEvent) == 0x000008, "Wrong alignment on CppMediator_CreateAIVoiceEvent");
static_assert(sizeof(CppMediator_CreateAIVoiceEvent) == 0x000038, "Wrong size on CppMediator_CreateAIVoiceEvent");
static_assert(offsetof(CppMediator_CreateAIVoiceEvent, SenderObj) == 0x000000, "Member 'CppMediator_CreateAIVoiceEvent::SenderObj' has a wrong offset!");
static_assert(offsetof(CppMediator_CreateAIVoiceEvent, Location) == 0x000008, "Member 'CppMediator_CreateAIVoiceEvent::Location' has a wrong offset!");
static_assert(offsetof(CppMediator_CreateAIVoiceEvent, Direction) == 0x000020, "Member 'CppMediator_CreateAIVoiceEvent::Direction' has a wrong offset!");

// Function Stalker2.CppMediator.DespawnSearchPoint
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_DespawnSearchPoint final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_DespawnSearchPoint) == 0x000008, "Wrong alignment on CppMediator_DespawnSearchPoint");
static_assert(sizeof(CppMediator_DespawnSearchPoint) == 0x000008, "Wrong size on CppMediator_DespawnSearchPoint");
static_assert(offsetof(CppMediator_DespawnSearchPoint, Obj) == 0x000000, "Member 'CppMediator_DespawnSearchPoint::Obj' has a wrong offset!");

// Function Stalker2.CppMediator.GetActiveMainQuests
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetActiveMainQuests final
{
public:
	TArray<struct FJournalQuest>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetActiveMainQuests) == 0x000008, "Wrong alignment on CppMediator_GetActiveMainQuests");
static_assert(sizeof(CppMediator_GetActiveMainQuests) == 0x000010, "Wrong size on CppMediator_GetActiveMainQuests");
static_assert(offsetof(CppMediator_GetActiveMainQuests, ReturnValue) == 0x000000, "Member 'CppMediator_GetActiveMainQuests::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetActiveSecondaryQuests
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetActiveSecondaryQuests final
{
public:
	TArray<struct FJournalQuest>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetActiveSecondaryQuests) == 0x000008, "Wrong alignment on CppMediator_GetActiveSecondaryQuests");
static_assert(sizeof(CppMediator_GetActiveSecondaryQuests) == 0x000010, "Wrong size on CppMediator_GetActiveSecondaryQuests");
static_assert(offsetof(CppMediator_GetActiveSecondaryQuests, ReturnValue) == 0x000000, "Member 'CppMediator_GetActiveSecondaryQuests::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetActorByGuid
// 0x0018 (0x0018 - 0x0000)
struct CppMediator_GetActorByGuid final
{
public:
	struct FGuid                                  TargetGUID;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetActorByGuid) == 0x000008, "Wrong alignment on CppMediator_GetActorByGuid");
static_assert(sizeof(CppMediator_GetActorByGuid) == 0x000018, "Wrong size on CppMediator_GetActorByGuid");
static_assert(offsetof(CppMediator_GetActorByGuid, TargetGUID) == 0x000000, "Member 'CppMediator_GetActorByGuid::TargetGUID' has a wrong offset!");
static_assert(offsetof(CppMediator_GetActorByGuid, ReturnValue) == 0x000010, "Member 'CppMediator_GetActorByGuid::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetAnomalyCullingRadius
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_GetAnomalyCullingRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetAnomalyCullingRadius) == 0x000004, "Wrong alignment on CppMediator_GetAnomalyCullingRadius");
static_assert(sizeof(CppMediator_GetAnomalyCullingRadius) == 0x000004, "Wrong size on CppMediator_GetAnomalyCullingRadius");
static_assert(offsetof(CppMediator_GetAnomalyCullingRadius, ReturnValue) == 0x000000, "Member 'CppMediator_GetAnomalyCullingRadius::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetAudiologAudioTimeSeconds
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_GetAudiologAudioTimeSeconds final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetAudiologAudioTimeSeconds) == 0x000008, "Wrong alignment on CppMediator_GetAudiologAudioTimeSeconds");
static_assert(sizeof(CppMediator_GetAudiologAudioTimeSeconds) == 0x000008, "Wrong size on CppMediator_GetAudiologAudioTimeSeconds");
static_assert(offsetof(CppMediator_GetAudiologAudioTimeSeconds, ReturnValue) == 0x000000, "Member 'CppMediator_GetAudiologAudioTimeSeconds::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetCurrentAudiologDuration
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_GetCurrentAudiologDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetCurrentAudiologDuration) == 0x000004, "Wrong alignment on CppMediator_GetCurrentAudiologDuration");
static_assert(sizeof(CppMediator_GetCurrentAudiologDuration) == 0x000004, "Wrong size on CppMediator_GetCurrentAudiologDuration");
static_assert(offsetof(CppMediator_GetCurrentAudiologDuration, ReturnValue) == 0x000000, "Member 'CppMediator_GetCurrentAudiologDuration::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetCurrentAudiologPlayedTime
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_GetCurrentAudiologPlayedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetCurrentAudiologPlayedTime) == 0x000004, "Wrong alignment on CppMediator_GetCurrentAudiologPlayedTime");
static_assert(sizeof(CppMediator_GetCurrentAudiologPlayedTime) == 0x000004, "Wrong size on CppMediator_GetCurrentAudiologPlayedTime");
static_assert(offsetof(CppMediator_GetCurrentAudiologPlayedTime, ReturnValue) == 0x000000, "Member 'CppMediator_GetCurrentAudiologPlayedTime::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetEmissionLocation
// 0x0018 (0x0018 - 0x0000)
struct CppMediator_GetEmissionLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetEmissionLocation) == 0x000008, "Wrong alignment on CppMediator_GetEmissionLocation");
static_assert(sizeof(CppMediator_GetEmissionLocation) == 0x000018, "Wrong size on CppMediator_GetEmissionLocation");
static_assert(offsetof(CppMediator_GetEmissionLocation, ReturnValue) == 0x000000, "Member 'CppMediator_GetEmissionLocation::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetFailedQuests
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetFailedQuests final
{
public:
	TArray<struct FJournalQuest>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetFailedQuests) == 0x000008, "Wrong alignment on CppMediator_GetFailedQuests");
static_assert(sizeof(CppMediator_GetFailedQuests) == 0x000010, "Wrong size on CppMediator_GetFailedQuests");
static_assert(offsetof(CppMediator_GetFailedQuests, ReturnValue) == 0x000000, "Member 'CppMediator_GetFailedQuests::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetFinishedQuests
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetFinishedQuests final
{
public:
	TArray<struct FJournalQuest>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetFinishedQuests) == 0x000008, "Wrong alignment on CppMediator_GetFinishedQuests");
static_assert(sizeof(CppMediator_GetFinishedQuests) == 0x000010, "Wrong size on CppMediator_GetFinishedQuests");
static_assert(offsetof(CppMediator_GetFinishedQuests, ReturnValue) == 0x000000, "Member 'CppMediator_GetFinishedQuests::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetFocusedEnemy
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetFocusedEnemy final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AObj*                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetFocusedEnemy) == 0x000008, "Wrong alignment on CppMediator_GetFocusedEnemy");
static_assert(sizeof(CppMediator_GetFocusedEnemy) == 0x000010, "Wrong size on CppMediator_GetFocusedEnemy");
static_assert(offsetof(CppMediator_GetFocusedEnemy, Obj) == 0x000000, "Member 'CppMediator_GetFocusedEnemy::Obj' has a wrong offset!");
static_assert(offsetof(CppMediator_GetFocusedEnemy, ReturnValue) == 0x000008, "Member 'CppMediator_GetFocusedEnemy::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetGUID
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetGUID final
{
public:
	const class AObj*                             Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_GetGUID) == 0x000008, "Wrong alignment on CppMediator_GetGUID");
static_assert(sizeof(CppMediator_GetGUID) == 0x000010, "Wrong size on CppMediator_GetGUID");
static_assert(offsetof(CppMediator_GetGUID, Actor) == 0x000000, "Member 'CppMediator_GetGUID::Actor' has a wrong offset!");
static_assert(offsetof(CppMediator_GetGUID, ReturnValue) == 0x000008, "Member 'CppMediator_GetGUID::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetItemsCountInInventory
// 0x0020 (0x0020 - 0x0000)
struct CppMediator_GetItemsCountInInventory final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemName;                                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_GetItemsCountInInventory) == 0x000008, "Wrong alignment on CppMediator_GetItemsCountInInventory");
static_assert(sizeof(CppMediator_GetItemsCountInInventory) == 0x000020, "Wrong size on CppMediator_GetItemsCountInInventory");
static_assert(offsetof(CppMediator_GetItemsCountInInventory, Obj) == 0x000000, "Member 'CppMediator_GetItemsCountInInventory::Obj' has a wrong offset!");
static_assert(offsetof(CppMediator_GetItemsCountInInventory, ItemName) == 0x000008, "Member 'CppMediator_GetItemsCountInInventory::ItemName' has a wrong offset!");
static_assert(offsetof(CppMediator_GetItemsCountInInventory, ReturnValue) == 0x000018, "Member 'CppMediator_GetItemsCountInInventory::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetMeshGenerators
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetMeshGenerators final
{
public:
	TArray<class UMeshGeneratorEditor*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetMeshGenerators) == 0x000008, "Wrong alignment on CppMediator_GetMeshGenerators");
static_assert(sizeof(CppMediator_GetMeshGenerators) == 0x000010, "Wrong size on CppMediator_GetMeshGenerators");
static_assert(offsetof(CppMediator_GetMeshGenerators, ReturnValue) == 0x000000, "Member 'CppMediator_GetMeshGenerators::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetNotePrototypeIDs
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetNotePrototypeIDs final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetNotePrototypeIDs) == 0x000008, "Wrong alignment on CppMediator_GetNotePrototypeIDs");
static_assert(sizeof(CppMediator_GetNotePrototypeIDs) == 0x000010, "Wrong size on CppMediator_GetNotePrototypeIDs");
static_assert(offsetof(CppMediator_GetNotePrototypeIDs, ReturnValue) == 0x000000, "Member 'CppMediator_GetNotePrototypeIDs::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetNotificationAudiologDelay
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_GetNotificationAudiologDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetNotificationAudiologDelay) == 0x000004, "Wrong alignment on CppMediator_GetNotificationAudiologDelay");
static_assert(sizeof(CppMediator_GetNotificationAudiologDelay) == 0x000004, "Wrong size on CppMediator_GetNotificationAudiologDelay");
static_assert(offsetof(CppMediator_GetNotificationAudiologDelay, ReturnValue) == 0x000000, "Member 'CppMediator_GetNotificationAudiologDelay::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetPrototypeID
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_GetPrototypeID final
{
public:
	const class AObj*                             Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_GetPrototypeID) == 0x000008, "Wrong alignment on CppMediator_GetPrototypeID");
static_assert(sizeof(CppMediator_GetPrototypeID) == 0x000010, "Wrong size on CppMediator_GetPrototypeID");
static_assert(offsetof(CppMediator_GetPrototypeID, Actor) == 0x000000, "Member 'CppMediator_GetPrototypeID::Actor' has a wrong offset!");
static_assert(offsetof(CppMediator_GetPrototypeID, ReturnValue) == 0x000008, "Member 'CppMediator_GetPrototypeID::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.GetSkyLightUpdateDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_GetSkyLightUpdateDeltaTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_GetSkyLightUpdateDeltaTime) == 0x000004, "Wrong alignment on CppMediator_GetSkyLightUpdateDeltaTime");
static_assert(sizeof(CppMediator_GetSkyLightUpdateDeltaTime) == 0x000004, "Wrong size on CppMediator_GetSkyLightUpdateDeltaTime");
static_assert(offsetof(CppMediator_GetSkyLightUpdateDeltaTime, ReturnValue) == 0x000000, "Member 'CppMediator_GetSkyLightUpdateDeltaTime::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.HasAnySignal
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_HasAnySignal final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_HasAnySignal) == 0x000008, "Wrong alignment on CppMediator_HasAnySignal");
static_assert(sizeof(CppMediator_HasAnySignal) == 0x000010, "Wrong size on CppMediator_HasAnySignal");
static_assert(offsetof(CppMediator_HasAnySignal, Actor) == 0x000000, "Member 'CppMediator_HasAnySignal::Actor' has a wrong offset!");
static_assert(offsetof(CppMediator_HasAnySignal, ReturnValue) == 0x000008, "Member 'CppMediator_HasAnySignal::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.HasValidGUID
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_HasValidGUID final
{
public:
	const class AObj*                             Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_HasValidGUID) == 0x000008, "Wrong alignment on CppMediator_HasValidGUID");
static_assert(sizeof(CppMediator_HasValidGUID) == 0x000010, "Wrong size on CppMediator_HasValidGUID");
static_assert(offsetof(CppMediator_HasValidGUID, Actor) == 0x000000, "Member 'CppMediator_HasValidGUID::Actor' has a wrong offset!");
static_assert(offsetof(CppMediator_HasValidGUID, ReturnValue) == 0x000008, "Member 'CppMediator_HasValidGUID::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsActorInGameWorld
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_IsActorInGameWorld final
{
public:
	class AActor*                                 ActorToCheck;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsActorInGameWorld) == 0x000008, "Wrong alignment on CppMediator_IsActorInGameWorld");
static_assert(sizeof(CppMediator_IsActorInGameWorld) == 0x000010, "Wrong size on CppMediator_IsActorInGameWorld");
static_assert(offsetof(CppMediator_IsActorInGameWorld, ActorToCheck) == 0x000000, "Member 'CppMediator_IsActorInGameWorld::ActorToCheck' has a wrong offset!");
static_assert(offsetof(CppMediator_IsActorInGameWorld, ReturnValue) == 0x000008, "Member 'CppMediator_IsActorInGameWorld::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsEmissionActive
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_IsEmissionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_IsEmissionActive) == 0x000001, "Wrong alignment on CppMediator_IsEmissionActive");
static_assert(sizeof(CppMediator_IsEmissionActive) == 0x000001, "Wrong size on CppMediator_IsEmissionActive");
static_assert(offsetof(CppMediator_IsEmissionActive, ReturnValue) == 0x000000, "Member 'CppMediator_IsEmissionActive::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsFarAwayFromPlayer
// 0x0020 (0x0020 - 0x0000)
struct CppMediator_IsFarAwayFromPlayer final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsFarAwayFromPlayer) == 0x000008, "Wrong alignment on CppMediator_IsFarAwayFromPlayer");
static_assert(sizeof(CppMediator_IsFarAwayFromPlayer) == 0x000020, "Wrong size on CppMediator_IsFarAwayFromPlayer");
static_assert(offsetof(CppMediator_IsFarAwayFromPlayer, Location) == 0x000000, "Member 'CppMediator_IsFarAwayFromPlayer::Location' has a wrong offset!");
static_assert(offsetof(CppMediator_IsFarAwayFromPlayer, ReturnValue) == 0x000018, "Member 'CppMediator_IsFarAwayFromPlayer::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsGamePlaying
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_IsGamePlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_IsGamePlaying) == 0x000001, "Wrong alignment on CppMediator_IsGamePlaying");
static_assert(sizeof(CppMediator_IsGamePlaying) == 0x000001, "Wrong size on CppMediator_IsGamePlaying");
static_assert(offsetof(CppMediator_IsGamePlaying, ReturnValue) == 0x000000, "Member 'CppMediator_IsGamePlaying::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsInteractionPaintEnabled
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_IsInteractionPaintEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_IsInteractionPaintEnabled) == 0x000001, "Wrong alignment on CppMediator_IsInteractionPaintEnabled");
static_assert(sizeof(CppMediator_IsInteractionPaintEnabled) == 0x000001, "Wrong size on CppMediator_IsInteractionPaintEnabled");
static_assert(offsetof(CppMediator_IsInteractionPaintEnabled, ReturnValue) == 0x000000, "Member 'CppMediator_IsInteractionPaintEnabled::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsMoving
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_IsMoving final
{
public:
	const class AObj*                             Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsMoving) == 0x000008, "Wrong alignment on CppMediator_IsMoving");
static_assert(sizeof(CppMediator_IsMoving) == 0x000010, "Wrong size on CppMediator_IsMoving");
static_assert(offsetof(CppMediator_IsMoving, Actor) == 0x000000, "Member 'CppMediator_IsMoving::Actor' has a wrong offset!");
static_assert(offsetof(CppMediator_IsMoving, ReturnValue) == 0x000008, "Member 'CppMediator_IsMoving::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsNaniteEnabledForMesh
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_IsNaniteEnabledForMesh final
{
public:
	const class UStaticMesh*                      Mesh;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsNaniteEnabledForMesh) == 0x000008, "Wrong alignment on CppMediator_IsNaniteEnabledForMesh");
static_assert(sizeof(CppMediator_IsNaniteEnabledForMesh) == 0x000010, "Wrong size on CppMediator_IsNaniteEnabledForMesh");
static_assert(offsetof(CppMediator_IsNaniteEnabledForMesh, Mesh) == 0x000000, "Member 'CppMediator_IsNaniteEnabledForMesh::Mesh' has a wrong offset!");
static_assert(offsetof(CppMediator_IsNaniteEnabledForMesh, ReturnValue) == 0x000008, "Member 'CppMediator_IsNaniteEnabledForMesh::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsObjAlive
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_IsObjAlive final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsObjAlive) == 0x000008, "Wrong alignment on CppMediator_IsObjAlive");
static_assert(sizeof(CppMediator_IsObjAlive) == 0x000010, "Wrong size on CppMediator_IsObjAlive");
static_assert(offsetof(CppMediator_IsObjAlive, Obj) == 0x000000, "Member 'CppMediator_IsObjAlive::Obj' has a wrong offset!");
static_assert(offsetof(CppMediator_IsObjAlive, ReturnValue) == 0x000008, "Member 'CppMediator_IsObjAlive::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsPendingLoadQuickSave
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_IsPendingLoadQuickSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_IsPendingLoadQuickSave) == 0x000001, "Wrong alignment on CppMediator_IsPendingLoadQuickSave");
static_assert(sizeof(CppMediator_IsPendingLoadQuickSave) == 0x000001, "Wrong size on CppMediator_IsPendingLoadQuickSave");
static_assert(offsetof(CppMediator_IsPendingLoadQuickSave, ReturnValue) == 0x000000, "Member 'CppMediator_IsPendingLoadQuickSave::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsQuestSelected
// 0x0078 (0x0078 - 0x0000)
struct CppMediator_IsQuestSelected final
{
public:
	struct FJournalQuest                          JournalQuest;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsQuestSelected) == 0x000008, "Wrong alignment on CppMediator_IsQuestSelected");
static_assert(sizeof(CppMediator_IsQuestSelected) == 0x000078, "Wrong size on CppMediator_IsQuestSelected");
static_assert(offsetof(CppMediator_IsQuestSelected, JournalQuest) == 0x000000, "Member 'CppMediator_IsQuestSelected::JournalQuest' has a wrong offset!");
static_assert(offsetof(CppMediator_IsQuestSelected, ReturnValue) == 0x000070, "Member 'CppMediator_IsQuestSelected::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsRunningWorldPartitionMigrationFromCommandlet
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_IsRunningWorldPartitionMigrationFromCommandlet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_IsRunningWorldPartitionMigrationFromCommandlet) == 0x000001, "Wrong alignment on CppMediator_IsRunningWorldPartitionMigrationFromCommandlet");
static_assert(sizeof(CppMediator_IsRunningWorldPartitionMigrationFromCommandlet) == 0x000001, "Wrong size on CppMediator_IsRunningWorldPartitionMigrationFromCommandlet");
static_assert(offsetof(CppMediator_IsRunningWorldPartitionMigrationFromCommandlet, ReturnValue) == 0x000000, "Member 'CppMediator_IsRunningWorldPartitionMigrationFromCommandlet::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsSoundInProximity
// 0x0028 (0x0028 - 0x0000)
struct CppMediator_IsSoundInProximity final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAkAudioEvent*                    AudioEvent;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsSoundInProximity) == 0x000008, "Wrong alignment on CppMediator_IsSoundInProximity");
static_assert(sizeof(CppMediator_IsSoundInProximity) == 0x000028, "Wrong size on CppMediator_IsSoundInProximity");
static_assert(offsetof(CppMediator_IsSoundInProximity, Location) == 0x000000, "Member 'CppMediator_IsSoundInProximity::Location' has a wrong offset!");
static_assert(offsetof(CppMediator_IsSoundInProximity, AudioEvent) == 0x000018, "Member 'CppMediator_IsSoundInProximity::AudioEvent' has a wrong offset!");
static_assert(offsetof(CppMediator_IsSoundInProximity, ReturnValue) == 0x000020, "Member 'CppMediator_IsSoundInProximity::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.IsWalking
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_IsWalking final
{
public:
	const class AObj*                             Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_IsWalking) == 0x000008, "Wrong alignment on CppMediator_IsWalking");
static_assert(sizeof(CppMediator_IsWalking) == 0x000010, "Wrong size on CppMediator_IsWalking");
static_assert(offsetof(CppMediator_IsWalking, Actor) == 0x000000, "Member 'CppMediator_IsWalking::Actor' has a wrong offset!");
static_assert(offsetof(CppMediator_IsWalking, ReturnValue) == 0x000008, "Member 'CppMediator_IsWalking::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.LerpPlayerToLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct CppMediator_LerpPlayerToLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_LerpPlayerToLocationAndRotation) == 0x000008, "Wrong alignment on CppMediator_LerpPlayerToLocationAndRotation");
static_assert(sizeof(CppMediator_LerpPlayerToLocationAndRotation) == 0x000030, "Wrong size on CppMediator_LerpPlayerToLocationAndRotation");
static_assert(offsetof(CppMediator_LerpPlayerToLocationAndRotation, Location) == 0x000000, "Member 'CppMediator_LerpPlayerToLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(CppMediator_LerpPlayerToLocationAndRotation, Rotation) == 0x000018, "Member 'CppMediator_LerpPlayerToLocationAndRotation::Rotation' has a wrong offset!");

// Function Stalker2.CppMediator.LogError
// 0x0018 (0x0018 - 0x0000)
struct CppMediator_LogError final
{
public:
	class AActor*                                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 errorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_LogError) == 0x000008, "Wrong alignment on CppMediator_LogError");
static_assert(sizeof(CppMediator_LogError) == 0x000018, "Wrong size on CppMediator_LogError");
static_assert(offsetof(CppMediator_LogError, Sender) == 0x000000, "Member 'CppMediator_LogError::Sender' has a wrong offset!");
static_assert(offsetof(CppMediator_LogError, errorMessage) == 0x000008, "Member 'CppMediator_LogError::errorMessage' has a wrong offset!");

// Function Stalker2.CppMediator.MakeInvalidGUID
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_MakeInvalidGUID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_MakeInvalidGUID) == 0x000004, "Wrong alignment on CppMediator_MakeInvalidGUID");
static_assert(sizeof(CppMediator_MakeInvalidGUID) == 0x000004, "Wrong size on CppMediator_MakeInvalidGUID");
static_assert(offsetof(CppMediator_MakeInvalidGUID, ReturnValue) == 0x000000, "Member 'CppMediator_MakeInvalidGUID::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.MakeInvulnerable
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_MakeInvulnerable final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_MakeInvulnerable) == 0x000008, "Wrong alignment on CppMediator_MakeInvulnerable");
static_assert(sizeof(CppMediator_MakeInvulnerable) == 0x000008, "Wrong size on CppMediator_MakeInvulnerable");
static_assert(offsetof(CppMediator_MakeInvulnerable, Obj) == 0x000000, "Member 'CppMediator_MakeInvulnerable::Obj' has a wrong offset!");

// Function Stalker2.CppMediator.MakeItemContainerUID
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_MakeItemContainerUID final
{
public:
	int32                                         RawInt32;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemContainerUID                      ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_MakeItemContainerUID) == 0x000004, "Wrong alignment on CppMediator_MakeItemContainerUID");
static_assert(sizeof(CppMediator_MakeItemContainerUID) == 0x000008, "Wrong size on CppMediator_MakeItemContainerUID");
static_assert(offsetof(CppMediator_MakeItemContainerUID, RawInt32) == 0x000000, "Member 'CppMediator_MakeItemContainerUID::RawInt32' has a wrong offset!");
static_assert(offsetof(CppMediator_MakeItemContainerUID, ReturnValue) == 0x000004, "Member 'CppMediator_MakeItemContainerUID::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.MakeItemUID
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_MakeItemUID final
{
public:
	int32                                         RawInt32;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemUID                               ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_MakeItemUID) == 0x000004, "Wrong alignment on CppMediator_MakeItemUID");
static_assert(sizeof(CppMediator_MakeItemUID) == 0x000008, "Wrong size on CppMediator_MakeItemUID");
static_assert(offsetof(CppMediator_MakeItemUID, RawInt32) == 0x000000, "Member 'CppMediator_MakeItemUID::RawInt32' has a wrong offset!");
static_assert(offsetof(CppMediator_MakeItemUID, ReturnValue) == 0x000004, "Member 'CppMediator_MakeItemUID::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.ObjGetHP
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_ObjGetHP final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_ObjGetHP) == 0x000008, "Wrong alignment on CppMediator_ObjGetHP");
static_assert(sizeof(CppMediator_ObjGetHP) == 0x000010, "Wrong size on CppMediator_ObjGetHP");
static_assert(offsetof(CppMediator_ObjGetHP, Obj) == 0x000000, "Member 'CppMediator_ObjGetHP::Obj' has a wrong offset!");
static_assert(offsetof(CppMediator_ObjGetHP, ReturnValue) == 0x000008, "Member 'CppMediator_ObjGetHP::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.OnToggleAudiolog
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_OnToggleAudiolog final
{
public:
	bool                                          bPlayAudiolog;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_OnToggleAudiolog) == 0x000001, "Wrong alignment on CppMediator_OnToggleAudiolog");
static_assert(sizeof(CppMediator_OnToggleAudiolog) == 0x000001, "Wrong size on CppMediator_OnToggleAudiolog");
static_assert(offsetof(CppMediator_OnToggleAudiolog, bPlayAudiolog) == 0x000000, "Member 'CppMediator_OnToggleAudiolog::bPlayAudiolog' has a wrong offset!");

// Function Stalker2.CppMediator.QuestInteractionComponentFinishAction
// 0x0018 (0x0018 - 0x0000)
struct CppMediator_QuestInteractionComponentFinishAction final
{
public:
	class UInteractionComponent*                  InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LauncherName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_QuestInteractionComponentFinishAction) == 0x000008, "Wrong alignment on CppMediator_QuestInteractionComponentFinishAction");
static_assert(sizeof(CppMediator_QuestInteractionComponentFinishAction) == 0x000018, "Wrong size on CppMediator_QuestInteractionComponentFinishAction");
static_assert(offsetof(CppMediator_QuestInteractionComponentFinishAction, InteractionComponent) == 0x000000, "Member 'CppMediator_QuestInteractionComponentFinishAction::InteractionComponent' has a wrong offset!");
static_assert(offsetof(CppMediator_QuestInteractionComponentFinishAction, LauncherName) == 0x000008, "Member 'CppMediator_QuestInteractionComponentFinishAction::LauncherName' has a wrong offset!");

// Function Stalker2.CppMediator.ResetComponentVelocity
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_ResetComponentVelocity final
{
public:
	const class USceneComponent*                  Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_ResetComponentVelocity) == 0x000008, "Wrong alignment on CppMediator_ResetComponentVelocity");
static_assert(sizeof(CppMediator_ResetComponentVelocity) == 0x000008, "Wrong size on CppMediator_ResetComponentVelocity");
static_assert(offsetof(CppMediator_ResetComponentVelocity, Component) == 0x000000, "Member 'CppMediator_ResetComponentVelocity::Component' has a wrong offset!");

// Function Stalker2.CppMediator.ResetInvulnerable
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_ResetInvulnerable final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_ResetInvulnerable) == 0x000008, "Wrong alignment on CppMediator_ResetInvulnerable");
static_assert(sizeof(CppMediator_ResetInvulnerable) == 0x000008, "Wrong size on CppMediator_ResetInvulnerable");
static_assert(offsetof(CppMediator_ResetInvulnerable, Obj) == 0x000000, "Member 'CppMediator_ResetInvulnerable::Obj' has a wrong offset!");

// Function Stalker2.CppMediator.RuntimeGetWorld
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_RuntimeGetWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_RuntimeGetWorld) == 0x000008, "Wrong alignment on CppMediator_RuntimeGetWorld");
static_assert(sizeof(CppMediator_RuntimeGetWorld) == 0x000008, "Wrong size on CppMediator_RuntimeGetWorld");
static_assert(offsetof(CppMediator_RuntimeGetWorld, ReturnValue) == 0x000000, "Member 'CppMediator_RuntimeGetWorld::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.SaveCharacter
// 0x0050 (0x0050 - 0x0000)
struct CppMediator_SaveCharacter final
{
public:
	class FString                                 CharacterSID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMeshGeneratorEditor*             MeshGenerator;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveObj;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveItemGenerator;                                // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SaveObjConfigPath;                                 // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentItemGenerator;                               // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewRank;                                           // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SaveCharacter) == 0x000008, "Wrong alignment on CppMediator_SaveCharacter");
static_assert(sizeof(CppMediator_SaveCharacter) == 0x000050, "Wrong size on CppMediator_SaveCharacter");
static_assert(offsetof(CppMediator_SaveCharacter, CharacterSID) == 0x000000, "Member 'CppMediator_SaveCharacter::CharacterSID' has a wrong offset!");
static_assert(offsetof(CppMediator_SaveCharacter, MeshGenerator) == 0x000010, "Member 'CppMediator_SaveCharacter::MeshGenerator' has a wrong offset!");
static_assert(offsetof(CppMediator_SaveCharacter, bSaveObj) == 0x000018, "Member 'CppMediator_SaveCharacter::bSaveObj' has a wrong offset!");
static_assert(offsetof(CppMediator_SaveCharacter, bSaveItemGenerator) == 0x000019, "Member 'CppMediator_SaveCharacter::bSaveItemGenerator' has a wrong offset!");
static_assert(offsetof(CppMediator_SaveCharacter, SaveObjConfigPath) == 0x000020, "Member 'CppMediator_SaveCharacter::SaveObjConfigPath' has a wrong offset!");
static_assert(offsetof(CppMediator_SaveCharacter, ParentItemGenerator) == 0x000030, "Member 'CppMediator_SaveCharacter::ParentItemGenerator' has a wrong offset!");
static_assert(offsetof(CppMediator_SaveCharacter, NewRank) == 0x000040, "Member 'CppMediator_SaveCharacter::NewRank' has a wrong offset!");

// Function Stalker2.CppMediator.SelectCurrentSettings
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_SelectCurrentSettings final
{
public:
	ESettingCategoryType                          SettingCategoryType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SelectCurrentSettings) == 0x000001, "Wrong alignment on CppMediator_SelectCurrentSettings");
static_assert(sizeof(CppMediator_SelectCurrentSettings) == 0x000001, "Wrong size on CppMediator_SelectCurrentSettings");
static_assert(offsetof(CppMediator_SelectCurrentSettings, SettingCategoryType) == 0x000000, "Member 'CppMediator_SelectCurrentSettings::SettingCategoryType' has a wrong offset!");

// Function Stalker2.CppMediator.SerializeCoverOffsetsToConfig
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_SerializeCoverOffsetsToConfig final
{
public:
	const class UHumanDefaultAnimCollection*      HumanDefaultAnimCollection;                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SerializeCoverOffsetsToConfig) == 0x000008, "Wrong alignment on CppMediator_SerializeCoverOffsetsToConfig");
static_assert(sizeof(CppMediator_SerializeCoverOffsetsToConfig) == 0x000008, "Wrong size on CppMediator_SerializeCoverOffsetsToConfig");
static_assert(offsetof(CppMediator_SerializeCoverOffsetsToConfig, HumanDefaultAnimCollection) == 0x000000, "Member 'CppMediator_SerializeCoverOffsetsToConfig::HumanDefaultAnimCollection' has a wrong offset!");

// Function Stalker2.CppMediator.SetAimMouseSensitivityCoef
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_SetAimMouseSensitivityCoef final
{
public:
	float                                         InAimMouseSensitivityCoef;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetAimMouseSensitivityCoef) == 0x000004, "Wrong alignment on CppMediator_SetAimMouseSensitivityCoef");
static_assert(sizeof(CppMediator_SetAimMouseSensitivityCoef) == 0x000004, "Wrong size on CppMediator_SetAimMouseSensitivityCoef");
static_assert(offsetof(CppMediator_SetAimMouseSensitivityCoef, InAimMouseSensitivityCoef) == 0x000000, "Member 'CppMediator_SetAimMouseSensitivityCoef::InAimMouseSensitivityCoef' has a wrong offset!");

// Function Stalker2.CppMediator.SetDialogueVolume
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_SetDialogueVolume final
{
public:
	float                                         InDialogueVolume;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetDialogueVolume) == 0x000004, "Wrong alignment on CppMediator_SetDialogueVolume");
static_assert(sizeof(CppMediator_SetDialogueVolume) == 0x000004, "Wrong size on CppMediator_SetDialogueVolume");
static_assert(offsetof(CppMediator_SetDialogueVolume, InDialogueVolume) == 0x000000, "Member 'CppMediator_SetDialogueVolume::InDialogueVolume' has a wrong offset!");

// Function Stalker2.CppMediator.SetEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_SetEffectsVolume final
{
public:
	float                                         InEffectsVolume;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetEffectsVolume) == 0x000004, "Wrong alignment on CppMediator_SetEffectsVolume");
static_assert(sizeof(CppMediator_SetEffectsVolume) == 0x000004, "Wrong size on CppMediator_SetEffectsVolume");
static_assert(offsetof(CppMediator_SetEffectsVolume, InEffectsVolume) == 0x000000, "Member 'CppMediator_SetEffectsVolume::InEffectsVolume' has a wrong offset!");

// Function Stalker2.CppMediator.SetMainVolume
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_SetMainVolume final
{
public:
	float                                         InVolume;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetMainVolume) == 0x000004, "Wrong alignment on CppMediator_SetMainVolume");
static_assert(sizeof(CppMediator_SetMainVolume) == 0x000004, "Wrong size on CppMediator_SetMainVolume");
static_assert(offsetof(CppMediator_SetMainVolume, InVolume) == 0x000000, "Member 'CppMediator_SetMainVolume::InVolume' has a wrong offset!");

// Function Stalker2.CppMediator.SetMeshNaniteSettings
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_SetMeshNaniteSettings final
{
public:
	const class UStaticMesh*                      Mesh;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_SetMeshNaniteSettings) == 0x000008, "Wrong alignment on CppMediator_SetMeshNaniteSettings");
static_assert(sizeof(CppMediator_SetMeshNaniteSettings) == 0x000010, "Wrong size on CppMediator_SetMeshNaniteSettings");
static_assert(offsetof(CppMediator_SetMeshNaniteSettings, Mesh) == 0x000000, "Member 'CppMediator_SetMeshNaniteSettings::Mesh' has a wrong offset!");
static_assert(offsetof(CppMediator_SetMeshNaniteSettings, bEnable) == 0x000008, "Member 'CppMediator_SetMeshNaniteSettings::bEnable' has a wrong offset!");

// Function Stalker2.CppMediator.SetMouseSensitivityCoef
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_SetMouseSensitivityCoef final
{
public:
	float                                         InMouseSensitivityCoef;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetMouseSensitivityCoef) == 0x000004, "Wrong alignment on CppMediator_SetMouseSensitivityCoef");
static_assert(sizeof(CppMediator_SetMouseSensitivityCoef) == 0x000004, "Wrong size on CppMediator_SetMouseSensitivityCoef");
static_assert(offsetof(CppMediator_SetMouseSensitivityCoef, InMouseSensitivityCoef) == 0x000000, "Member 'CppMediator_SetMouseSensitivityCoef::InMouseSensitivityCoef' has a wrong offset!");

// Function Stalker2.CppMediator.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct CppMediator_SetMusicVolume final
{
public:
	float                                         InMusicVolume;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetMusicVolume) == 0x000004, "Wrong alignment on CppMediator_SetMusicVolume");
static_assert(sizeof(CppMediator_SetMusicVolume) == 0x000004, "Wrong size on CppMediator_SetMusicVolume");
static_assert(offsetof(CppMediator_SetMusicVolume, InMusicVolume) == 0x000000, "Member 'CppMediator_SetMusicVolume::InMusicVolume' has a wrong offset!");

// Function Stalker2.CppMediator.SetMuteAllVolume
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_SetMuteAllVolume final
{
public:
	bool                                          bInMuteAllVolume;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetMuteAllVolume) == 0x000001, "Wrong alignment on CppMediator_SetMuteAllVolume");
static_assert(sizeof(CppMediator_SetMuteAllVolume) == 0x000001, "Wrong size on CppMediator_SetMuteAllVolume");
static_assert(offsetof(CppMediator_SetMuteAllVolume, bInMuteAllVolume) == 0x000000, "Member 'CppMediator_SetMuteAllVolume::bInMuteAllVolume' has a wrong offset!");

// Function Stalker2.CppMediator.SetSelectedAudioLanguage
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_SetSelectedAudioLanguage final
{
public:
	ELocalizationLanguage                         InSelectedLanguage;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetSelectedAudioLanguage) == 0x000001, "Wrong alignment on CppMediator_SetSelectedAudioLanguage");
static_assert(sizeof(CppMediator_SetSelectedAudioLanguage) == 0x000001, "Wrong size on CppMediator_SetSelectedAudioLanguage");
static_assert(offsetof(CppMediator_SetSelectedAudioLanguage, InSelectedLanguage) == 0x000000, "Member 'CppMediator_SetSelectedAudioLanguage::InSelectedLanguage' has a wrong offset!");

// Function Stalker2.CppMediator.SetSelectedLanguage
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_SetSelectedLanguage final
{
public:
	ELocalizationLanguage                         InSelectedLanguage;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetSelectedLanguage) == 0x000001, "Wrong alignment on CppMediator_SetSelectedLanguage");
static_assert(sizeof(CppMediator_SetSelectedLanguage) == 0x000001, "Wrong size on CppMediator_SetSelectedLanguage");
static_assert(offsetof(CppMediator_SetSelectedLanguage, InSelectedLanguage) == 0x000000, "Member 'CppMediator_SetSelectedLanguage::InSelectedLanguage' has a wrong offset!");

// Function Stalker2.CppMediator.SetSelectedTextLanguage
// 0x0001 (0x0001 - 0x0000)
struct CppMediator_SetSelectedTextLanguage final
{
public:
	ELocalizationLanguage                         InSelectedLanguage;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetSelectedTextLanguage) == 0x000001, "Wrong alignment on CppMediator_SetSelectedTextLanguage");
static_assert(sizeof(CppMediator_SetSelectedTextLanguage) == 0x000001, "Wrong size on CppMediator_SetSelectedTextLanguage");
static_assert(offsetof(CppMediator_SetSelectedTextLanguage, InSelectedLanguage) == 0x000000, "Member 'CppMediator_SetSelectedTextLanguage::InSelectedLanguage' has a wrong offset!");

// Function Stalker2.CppMediator.SetupMaterialForInteractPaint
// 0x0070 (0x0070 - 0x0000)
struct CppMediator_SetupMaterialForInteractPaint final
{
public:
	class UMeshComponent*                         AffectedMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      YellowPaintMaterial;                               // 0x0008(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      DefaultMaterial;                                   // 0x0038(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPaintEnabled;                                     // 0x0068(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaterialSlot;                                      // 0x006C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SetupMaterialForInteractPaint) == 0x000008, "Wrong alignment on CppMediator_SetupMaterialForInteractPaint");
static_assert(sizeof(CppMediator_SetupMaterialForInteractPaint) == 0x000070, "Wrong size on CppMediator_SetupMaterialForInteractPaint");
static_assert(offsetof(CppMediator_SetupMaterialForInteractPaint, AffectedMesh) == 0x000000, "Member 'CppMediator_SetupMaterialForInteractPaint::AffectedMesh' has a wrong offset!");
static_assert(offsetof(CppMediator_SetupMaterialForInteractPaint, YellowPaintMaterial) == 0x000008, "Member 'CppMediator_SetupMaterialForInteractPaint::YellowPaintMaterial' has a wrong offset!");
static_assert(offsetof(CppMediator_SetupMaterialForInteractPaint, DefaultMaterial) == 0x000038, "Member 'CppMediator_SetupMaterialForInteractPaint::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(CppMediator_SetupMaterialForInteractPaint, bPaintEnabled) == 0x000068, "Member 'CppMediator_SetupMaterialForInteractPaint::bPaintEnabled' has a wrong offset!");
static_assert(offsetof(CppMediator_SetupMaterialForInteractPaint, MaterialSlot) == 0x00006C, "Member 'CppMediator_SetupMaterialForInteractPaint::MaterialSlot' has a wrong offset!");

// Function Stalker2.CppMediator.ShouldUpdateSolarTime
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_ShouldUpdateSolarTime final
{
public:
	float                                         PrevSolarTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolarTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateSunDeltaTime;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_ShouldUpdateSolarTime) == 0x000004, "Wrong alignment on CppMediator_ShouldUpdateSolarTime");
static_assert(sizeof(CppMediator_ShouldUpdateSolarTime) == 0x000010, "Wrong size on CppMediator_ShouldUpdateSolarTime");
static_assert(offsetof(CppMediator_ShouldUpdateSolarTime, PrevSolarTime) == 0x000000, "Member 'CppMediator_ShouldUpdateSolarTime::PrevSolarTime' has a wrong offset!");
static_assert(offsetof(CppMediator_ShouldUpdateSolarTime, SolarTime) == 0x000004, "Member 'CppMediator_ShouldUpdateSolarTime::SolarTime' has a wrong offset!");
static_assert(offsetof(CppMediator_ShouldUpdateSolarTime, UpdateSunDeltaTime) == 0x000008, "Member 'CppMediator_ShouldUpdateSolarTime::UpdateSunDeltaTime' has a wrong offset!");
static_assert(offsetof(CppMediator_ShouldUpdateSolarTime, ReturnValue) == 0x00000C, "Member 'CppMediator_ShouldUpdateSolarTime::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.SpawnSearchPoint
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_SpawnSearchPoint final
{
public:
	const class AObj*                             Obj;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOnMap;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOnCompass;                                    // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CppMediator_SpawnSearchPoint) == 0x000008, "Wrong alignment on CppMediator_SpawnSearchPoint");
static_assert(sizeof(CppMediator_SpawnSearchPoint) == 0x000010, "Wrong size on CppMediator_SpawnSearchPoint");
static_assert(offsetof(CppMediator_SpawnSearchPoint, Obj) == 0x000000, "Member 'CppMediator_SpawnSearchPoint::Obj' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnSearchPoint, bShowOnMap) == 0x000008, "Member 'CppMediator_SpawnSearchPoint::bShowOnMap' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnSearchPoint, bShowOnCompass) == 0x000009, "Member 'CppMediator_SpawnSearchPoint::bShowOnCompass' has a wrong offset!");

// Function Stalker2.CppMediator.SpawnTriplanarDecalAtLocation
// 0x0068 (0x0068 - 0x0000)
struct CppMediator_SpawnTriplanarDecalAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTriplanarDecalComponent*               ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_SpawnTriplanarDecalAtLocation) == 0x000008, "Wrong alignment on CppMediator_SpawnTriplanarDecalAtLocation");
static_assert(sizeof(CppMediator_SpawnTriplanarDecalAtLocation) == 0x000068, "Wrong size on CppMediator_SpawnTriplanarDecalAtLocation");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, WorldContextObject) == 0x000000, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, DecalMaterial) == 0x000008, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::DecalMaterial' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, DecalSize) == 0x000010, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::DecalSize' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, Location) == 0x000028, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::Location' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, Rotation) == 0x000040, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, LifeSpan) == 0x000058, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::LifeSpan' has a wrong offset!");
static_assert(offsetof(CppMediator_SpawnTriplanarDecalAtLocation, ReturnValue) == 0x000060, "Member 'CppMediator_SpawnTriplanarDecalAtLocation::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.StartQuestNode
// 0x0040 (0x0040 - 0x0000)
struct CppMediator_StartQuestNode final
{
public:
	struct FPrototypeSID                          SID;                                               // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_StartQuestNode) == 0x000008, "Wrong alignment on CppMediator_StartQuestNode");
static_assert(sizeof(CppMediator_StartQuestNode) == 0x000040, "Wrong size on CppMediator_StartQuestNode");
static_assert(offsetof(CppMediator_StartQuestNode, SID) == 0x000000, "Member 'CppMediator_StartQuestNode::SID' has a wrong offset!");

// Function Stalker2.CppMediator.UIManagerGenerateAndGetDefaultNameSave
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_UIManagerGenerateAndGetDefaultNameSave final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_UIManagerGenerateAndGetDefaultNameSave) == 0x000008, "Wrong alignment on CppMediator_UIManagerGenerateAndGetDefaultNameSave");
static_assert(sizeof(CppMediator_UIManagerGenerateAndGetDefaultNameSave) == 0x000010, "Wrong size on CppMediator_UIManagerGenerateAndGetDefaultNameSave");
static_assert(offsetof(CppMediator_UIManagerGenerateAndGetDefaultNameSave, ReturnValue) == 0x000000, "Member 'CppMediator_UIManagerGenerateAndGetDefaultNameSave::ReturnValue' has a wrong offset!");

// Function Stalker2.CppMediator.UIManagerOnQuestDeselected
// 0x0010 (0x0010 - 0x0000)
struct CppMediator_UIManagerOnQuestDeselected final
{
public:
	class FString                                 PrototypeID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_UIManagerOnQuestDeselected) == 0x000008, "Wrong alignment on CppMediator_UIManagerOnQuestDeselected");
static_assert(sizeof(CppMediator_UIManagerOnQuestDeselected) == 0x000010, "Wrong size on CppMediator_UIManagerOnQuestDeselected");
static_assert(offsetof(CppMediator_UIManagerOnQuestDeselected, PrototypeID) == 0x000000, "Member 'CppMediator_UIManagerOnQuestDeselected::PrototypeID' has a wrong offset!");

// Function Stalker2.CppMediator.UnbindInteractPaintMaterial
// 0x0008 (0x0008 - 0x0000)
struct CppMediator_UnbindInteractPaintMaterial final
{
public:
	class AActor*                                 AffectedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CppMediator_UnbindInteractPaintMaterial) == 0x000008, "Wrong alignment on CppMediator_UnbindInteractPaintMaterial");
static_assert(sizeof(CppMediator_UnbindInteractPaintMaterial) == 0x000008, "Wrong size on CppMediator_UnbindInteractPaintMaterial");
static_assert(offsetof(CppMediator_UnbindInteractPaintMaterial, AffectedActor) == 0x000000, "Member 'CppMediator_UnbindInteractPaintMaterial::AffectedActor' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetAkVisualizationRadius
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XSetAkVisualizationRadius final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetAkVisualizationRadius) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XSetAkVisualizationRadius");
static_assert(sizeof(CustomConsoleManagerAA_XSetAkVisualizationRadius) == 0x000004, "Wrong size on CustomConsoleManagerAA_XSetAkVisualizationRadius");
static_assert(offsetof(CustomConsoleManagerAA_XSetAkVisualizationRadius, NewValue) == 0x000000, "Member 'CustomConsoleManagerAA_XSetAkVisualizationRadius::NewValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSimulateWaitForProfileSettingUp
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp final
{
public:
	float                                         SetupDuration;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp");
static_assert(sizeof(CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp) == 0x000004, "Wrong size on CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp");
static_assert(offsetof(CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp, SetupDuration) == 0x000000, "Member 'CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp::SetupDuration' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XToggleAkVisualization
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XToggleAkVisualization final
{
public:
	class FString                                 Types;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XToggleAkVisualization) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XToggleAkVisualization");
static_assert(sizeof(CustomConsoleManagerAA_XToggleAkVisualization) == 0x000010, "Wrong size on CustomConsoleManagerAA_XToggleAkVisualization");
static_assert(offsetof(CustomConsoleManagerAA_XToggleAkVisualization, Types) == 0x000000, "Member 'CustomConsoleManagerAA_XToggleAkVisualization::Types' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XTryReceiveSignal
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XTryReceiveSignal final
{
public:
	class FString                                 Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XTryReceiveSignal) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XTryReceiveSignal");
static_assert(sizeof(CustomConsoleManagerAA_XTryReceiveSignal) == 0x000010, "Wrong size on CustomConsoleManagerAA_XTryReceiveSignal");
static_assert(offsetof(CustomConsoleManagerAA_XTryReceiveSignal, Guid) == 0x000000, "Member 'CustomConsoleManagerAA_XTryReceiveSignal::Guid' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XAddMoneyToPlayer
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XAddMoneyToPlayer final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XAddMoneyToPlayer) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XAddMoneyToPlayer");
static_assert(sizeof(CustomConsoleManagerAA_XAddMoneyToPlayer) == 0x000004, "Wrong size on CustomConsoleManagerAA_XAddMoneyToPlayer");
static_assert(offsetof(CustomConsoleManagerAA_XAddMoneyToPlayer, Value) == 0x000000, "Member 'CustomConsoleManagerAA_XAddMoneyToPlayer::Value' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XDebugAddHelloDialogsToQueue
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogsCount;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue");
static_assert(sizeof(CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue) == 0x000008, "Wrong size on CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue");
static_assert(offsetof(CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue, TargetUID) == 0x000000, "Member 'CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue::TargetUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue, DialogsCount) == 0x000004, "Member 'CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue::DialogsCount' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XDespawnAliveNPCsAtRadius
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius");
static_assert(sizeof(CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius) == 0x000004, "Wrong size on CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius");
static_assert(offsetof(CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius, Radius) == 0x000000, "Member 'CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius::Radius' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XDespawnDeadNPCsAtRadius
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius");
static_assert(sizeof(CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius) == 0x000004, "Wrong size on CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius");
static_assert(offsetof(CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius, Radius) == 0x000000, "Member 'CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius::Radius' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XDespawnNPCsAtRadius
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XDespawnNPCsAtRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XDespawnNPCsAtRadius) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XDespawnNPCsAtRadius");
static_assert(sizeof(CustomConsoleManagerAA_XDespawnNPCsAtRadius) == 0x000004, "Wrong size on CustomConsoleManagerAA_XDespawnNPCsAtRadius");
static_assert(offsetof(CustomConsoleManagerAA_XDespawnNPCsAtRadius, Radius) == 0x000000, "Member 'CustomConsoleManagerAA_XDespawnNPCsAtRadius::Radius' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XDiscoverMarker
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XDiscoverMarker final
{
public:
	class FString                                 MarkerSID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XDiscoverMarker) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XDiscoverMarker");
static_assert(sizeof(CustomConsoleManagerAA_XDiscoverMarker) == 0x000010, "Wrong size on CustomConsoleManagerAA_XDiscoverMarker");
static_assert(offsetof(CustomConsoleManagerAA_XDiscoverMarker, MarkerSID) == 0x000000, "Member 'CustomConsoleManagerAA_XDiscoverMarker::MarkerSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XEndQuest
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XEndQuest final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XEndQuest) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XEndQuest");
static_assert(sizeof(CustomConsoleManagerAA_XEndQuest) == 0x000010, "Wrong size on CustomConsoleManagerAA_XEndQuest");
static_assert(offsetof(CustomConsoleManagerAA_XEndQuest, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XEndQuest::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XEndQuestBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XEndQuestBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XEndQuestBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XEndQuestBySID");
static_assert(sizeof(CustomConsoleManagerAA_XEndQuestBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XEndQuestBySID");
static_assert(offsetof(CustomConsoleManagerAA_XEndQuestBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XEndQuestBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XEndQuestNode
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XEndQuestNode final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XEndQuestNode) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XEndQuestNode");
static_assert(sizeof(CustomConsoleManagerAA_XEndQuestNode) == 0x000010, "Wrong size on CustomConsoleManagerAA_XEndQuestNode");
static_assert(offsetof(CustomConsoleManagerAA_XEndQuestNode, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XEndQuestNode::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XEndQuestNodeBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XEndQuestNodeBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XEndQuestNodeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XEndQuestNodeBySID");
static_assert(sizeof(CustomConsoleManagerAA_XEndQuestNodeBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XEndQuestNodeBySID");
static_assert(offsetof(CustomConsoleManagerAA_XEndQuestNodeBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XEndQuestNodeBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XExcludeQuest
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XExcludeQuest final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XExcludeQuest) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XExcludeQuest");
static_assert(sizeof(CustomConsoleManagerAA_XExcludeQuest) == 0x000010, "Wrong size on CustomConsoleManagerAA_XExcludeQuest");
static_assert(offsetof(CustomConsoleManagerAA_XExcludeQuest, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XExcludeQuest::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XExcludeQuestBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XExcludeQuestBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XExcludeQuestBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XExcludeQuestBySID");
static_assert(sizeof(CustomConsoleManagerAA_XExcludeQuestBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XExcludeQuestBySID");
static_assert(offsetof(CustomConsoleManagerAA_XExcludeQuestBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XExcludeQuestBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XExcludeQuestNode
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XExcludeQuestNode final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XExcludeQuestNode) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XExcludeQuestNode");
static_assert(sizeof(CustomConsoleManagerAA_XExcludeQuestNode) == 0x000010, "Wrong size on CustomConsoleManagerAA_XExcludeQuestNode");
static_assert(offsetof(CustomConsoleManagerAA_XExcludeQuestNode, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XExcludeQuestNode::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XExcludeQuestNodeBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XExcludeQuestNodeBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XExcludeQuestNodeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XExcludeQuestNodeBySID");
static_assert(sizeof(CustomConsoleManagerAA_XExcludeQuestNodeBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XExcludeQuestNodeBySID");
static_assert(offsetof(CustomConsoleManagerAA_XExcludeQuestNodeBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XExcludeQuestNodeBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XKillNPCInRadius
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerAA_XKillNPCInRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimalReputationToKill;                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxReputationToKill;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XKillNPCInRadius) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XKillNPCInRadius");
static_assert(sizeof(CustomConsoleManagerAA_XKillNPCInRadius) == 0x00000C, "Wrong size on CustomConsoleManagerAA_XKillNPCInRadius");
static_assert(offsetof(CustomConsoleManagerAA_XKillNPCInRadius, Radius) == 0x000000, "Member 'CustomConsoleManagerAA_XKillNPCInRadius::Radius' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XKillNPCInRadius, MinimalReputationToKill) == 0x000004, "Member 'CustomConsoleManagerAA_XKillNPCInRadius::MinimalReputationToKill' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XKillNPCInRadius, MaxReputationToKill) == 0x000008, "Member 'CustomConsoleManagerAA_XKillNPCInRadius::MaxReputationToKill' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XListMapMarkers
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XListMapMarkers final
{
public:
	class FString                                 MarkerType;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XListMapMarkers) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XListMapMarkers");
static_assert(sizeof(CustomConsoleManagerAA_XListMapMarkers) == 0x000010, "Wrong size on CustomConsoleManagerAA_XListMapMarkers");
static_assert(offsetof(CustomConsoleManagerAA_XListMapMarkers, MarkerType) == 0x000000, "Member 'CustomConsoleManagerAA_XListMapMarkers::MarkerType' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XPlayCommentFromPool
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerAA_XPlayCommentFromPool final
{
public:
	class FString                                 DialogEventTypeName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCUIDValue;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerAA_XPlayCommentFromPool) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XPlayCommentFromPool");
static_assert(sizeof(CustomConsoleManagerAA_XPlayCommentFromPool) == 0x000018, "Wrong size on CustomConsoleManagerAA_XPlayCommentFromPool");
static_assert(offsetof(CustomConsoleManagerAA_XPlayCommentFromPool, DialogEventTypeName) == 0x000000, "Member 'CustomConsoleManagerAA_XPlayCommentFromPool::DialogEventTypeName' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XPlayCommentFromPool, NPCUIDValue) == 0x000010, "Member 'CustomConsoleManagerAA_XPlayCommentFromPool::NPCUIDValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XPlayDialogFromPool
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerAA_XPlayDialogFromPool final
{
public:
	class FString                                 DialogEventTypeName;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCUIDValue1;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCUIDValue2;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XPlayDialogFromPool) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XPlayDialogFromPool");
static_assert(sizeof(CustomConsoleManagerAA_XPlayDialogFromPool) == 0x000018, "Wrong size on CustomConsoleManagerAA_XPlayDialogFromPool");
static_assert(offsetof(CustomConsoleManagerAA_XPlayDialogFromPool, DialogEventTypeName) == 0x000000, "Member 'CustomConsoleManagerAA_XPlayDialogFromPool::DialogEventTypeName' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XPlayDialogFromPool, NPCUIDValue1) == 0x000010, "Member 'CustomConsoleManagerAA_XPlayDialogFromPool::NPCUIDValue1' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XPlayDialogFromPool, NPCUIDValue2) == 0x000014, "Member 'CustomConsoleManagerAA_XPlayDialogFromPool::NPCUIDValue2' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XPlayDialogLine
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerAA_XPlayDialogLine final
{
public:
	int32                                         SpeakerUID;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DialogPrototypeSID;                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XPlayDialogLine) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XPlayDialogLine");
static_assert(sizeof(CustomConsoleManagerAA_XPlayDialogLine) == 0x000018, "Wrong size on CustomConsoleManagerAA_XPlayDialogLine");
static_assert(offsetof(CustomConsoleManagerAA_XPlayDialogLine, SpeakerUID) == 0x000000, "Member 'CustomConsoleManagerAA_XPlayDialogLine::SpeakerUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XPlayDialogLine, DialogPrototypeSID) == 0x000008, "Member 'CustomConsoleManagerAA_XPlayDialogLine::DialogPrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XPrintGlobalVariable
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XPrintGlobalVariable final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XPrintGlobalVariable) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XPrintGlobalVariable");
static_assert(sizeof(CustomConsoleManagerAA_XPrintGlobalVariable) == 0x000010, "Wrong size on CustomConsoleManagerAA_XPrintGlobalVariable");
static_assert(offsetof(CustomConsoleManagerAA_XPrintGlobalVariable, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XPrintGlobalVariable::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XResetQuestBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XResetQuestBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XResetQuestBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XResetQuestBySID");
static_assert(sizeof(CustomConsoleManagerAA_XResetQuestBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XResetQuestBySID");
static_assert(offsetof(CustomConsoleManagerAA_XResetQuestBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XResetQuestBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XResetRandomNode
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XResetRandomNode final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XResetRandomNode) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XResetRandomNode");
static_assert(sizeof(CustomConsoleManagerAA_XResetRandomNode) == 0x000010, "Wrong size on CustomConsoleManagerAA_XResetRandomNode");
static_assert(offsetof(CustomConsoleManagerAA_XResetRandomNode, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XResetRandomNode::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XResetRandomNodeBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XResetRandomNodeBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XResetRandomNodeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XResetRandomNodeBySID");
static_assert(sizeof(CustomConsoleManagerAA_XResetRandomNodeBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XResetRandomNodeBySID");
static_assert(offsetof(CustomConsoleManagerAA_XResetRandomNodeBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XResetRandomNodeBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetAudioLanguage
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XSetAudioLanguage final
{
public:
	class FString                                 LocaleString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetAudioLanguage) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XSetAudioLanguage");
static_assert(sizeof(CustomConsoleManagerAA_XSetAudioLanguage) == 0x000010, "Wrong size on CustomConsoleManagerAA_XSetAudioLanguage");
static_assert(offsetof(CustomConsoleManagerAA_XSetAudioLanguage, LocaleString) == 0x000000, "Member 'CustomConsoleManagerAA_XSetAudioLanguage::LocaleString' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetDifficultySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XSetDifficultySID final
{
public:
	class FString                                 DifficultySID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetDifficultySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XSetDifficultySID");
static_assert(sizeof(CustomConsoleManagerAA_XSetDifficultySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XSetDifficultySID");
static_assert(offsetof(CustomConsoleManagerAA_XSetDifficultySID, DifficultySID) == 0x000000, "Member 'CustomConsoleManagerAA_XSetDifficultySID::DifficultySID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetGameTime
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerAA_XSetGameTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetGameTime) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XSetGameTime");
static_assert(sizeof(CustomConsoleManagerAA_XSetGameTime) == 0x00000C, "Wrong size on CustomConsoleManagerAA_XSetGameTime");
static_assert(offsetof(CustomConsoleManagerAA_XSetGameTime, Hour) == 0x000000, "Member 'CustomConsoleManagerAA_XSetGameTime::Hour' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetGameTime, Minute) == 0x000004, "Member 'CustomConsoleManagerAA_XSetGameTime::Minute' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetGameTime, Second) == 0x000008, "Member 'CustomConsoleManagerAA_XSetGameTime::Second' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetRandomNodeDefinedPin
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerAA_XSetRandomNodeDefinedPin final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PinNumber;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerAA_XSetRandomNodeDefinedPin) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XSetRandomNodeDefinedPin");
static_assert(sizeof(CustomConsoleManagerAA_XSetRandomNodeDefinedPin) == 0x000018, "Wrong size on CustomConsoleManagerAA_XSetRandomNodeDefinedPin");
static_assert(offsetof(CustomConsoleManagerAA_XSetRandomNodeDefinedPin, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XSetRandomNodeDefinedPin::ID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetRandomNodeDefinedPin, PinNumber) == 0x000010, "Member 'CustomConsoleManagerAA_XSetRandomNodeDefinedPin::PinNumber' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetRandomNodeDefinedPinBySID
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PinNumber;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID");
static_assert(sizeof(CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID) == 0x000018, "Wrong size on CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID");
static_assert(offsetof(CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID::SID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID, PinNumber) == 0x000010, "Member 'CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID::PinNumber' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetRelationsInRadius
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerAA_XSetRelationsInRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationValue;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetRelationsInRadius) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XSetRelationsInRadius");
static_assert(sizeof(CustomConsoleManagerAA_XSetRelationsInRadius) == 0x000008, "Wrong size on CustomConsoleManagerAA_XSetRelationsInRadius");
static_assert(offsetof(CustomConsoleManagerAA_XSetRelationsInRadius, Radius) == 0x000000, "Member 'CustomConsoleManagerAA_XSetRelationsInRadius::Radius' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetRelationsInRadius, RelationValue) == 0x000004, "Member 'CustomConsoleManagerAA_XSetRelationsInRadius::RelationValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetSearchpointDebugState
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerAA_XSetSearchpointDebugState final
{
public:
	bool                                          bState;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetSearchpointDebugState) == 0x000001, "Wrong alignment on CustomConsoleManagerAA_XSetSearchpointDebugState");
static_assert(sizeof(CustomConsoleManagerAA_XSetSearchpointDebugState) == 0x000001, "Wrong size on CustomConsoleManagerAA_XSetSearchpointDebugState");
static_assert(offsetof(CustomConsoleManagerAA_XSetSearchpointDebugState, bState) == 0x000000, "Member 'CustomConsoleManagerAA_XSetSearchpointDebugState::bState' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetTextLanguage
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XSetTextLanguage final
{
public:
	class FString                                 LocaleString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetTextLanguage) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XSetTextLanguage");
static_assert(sizeof(CustomConsoleManagerAA_XSetTextLanguage) == 0x000010, "Wrong size on CustomConsoleManagerAA_XSetTextLanguage");
static_assert(offsetof(CustomConsoleManagerAA_XSetTextLanguage, LocaleString) == 0x000000, "Member 'CustomConsoleManagerAA_XSetTextLanguage::LocaleString' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetTimeSpeed
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAA_XSetTimeSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetTimeSpeed) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XSetTimeSpeed");
static_assert(sizeof(CustomConsoleManagerAA_XSetTimeSpeed) == 0x000004, "Wrong size on CustomConsoleManagerAA_XSetTimeSpeed");
static_assert(offsetof(CustomConsoleManagerAA_XSetTimeSpeed, Speed) == 0x000000, "Member 'CustomConsoleManagerAA_XSetTimeSpeed::Speed' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSetWeatherTime
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerAA_XSetWeatherTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSetWeatherTime) == 0x000004, "Wrong alignment on CustomConsoleManagerAA_XSetWeatherTime");
static_assert(sizeof(CustomConsoleManagerAA_XSetWeatherTime) == 0x00000C, "Wrong size on CustomConsoleManagerAA_XSetWeatherTime");
static_assert(offsetof(CustomConsoleManagerAA_XSetWeatherTime, Hour) == 0x000000, "Member 'CustomConsoleManagerAA_XSetWeatherTime::Hour' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetWeatherTime, Minute) == 0x000004, "Member 'CustomConsoleManagerAA_XSetWeatherTime::Minute' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAA_XSetWeatherTime, Second) == 0x000008, "Member 'CustomConsoleManagerAA_XSetWeatherTime::Second' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XShowHubOwner
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XShowHubOwner final
{
public:
	class FString                                 HubSID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XShowHubOwner) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XShowHubOwner");
static_assert(sizeof(CustomConsoleManagerAA_XShowHubOwner) == 0x000010, "Wrong size on CustomConsoleManagerAA_XShowHubOwner");
static_assert(offsetof(CustomConsoleManagerAA_XShowHubOwner, HubSID) == 0x000000, "Member 'CustomConsoleManagerAA_XShowHubOwner::HubSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XShowQuestTriggers
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerAA_XShowQuestTriggers final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XShowQuestTriggers) == 0x000001, "Wrong alignment on CustomConsoleManagerAA_XShowQuestTriggers");
static_assert(sizeof(CustomConsoleManagerAA_XShowQuestTriggers) == 0x000001, "Wrong size on CustomConsoleManagerAA_XShowQuestTriggers");
static_assert(offsetof(CustomConsoleManagerAA_XShowQuestTriggers, bShow) == 0x000000, "Member 'CustomConsoleManagerAA_XShowQuestTriggers::bShow' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XShowSpawnDebugInfo
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerAA_XShowSpawnDebugInfo final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XShowSpawnDebugInfo) == 0x000001, "Wrong alignment on CustomConsoleManagerAA_XShowSpawnDebugInfo");
static_assert(sizeof(CustomConsoleManagerAA_XShowSpawnDebugInfo) == 0x000001, "Wrong size on CustomConsoleManagerAA_XShowSpawnDebugInfo");
static_assert(offsetof(CustomConsoleManagerAA_XShowSpawnDebugInfo, Show) == 0x000000, "Member 'CustomConsoleManagerAA_XShowSpawnDebugInfo::Show' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XSkipToQuestNode
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XSkipToQuestNode final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XSkipToQuestNode) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XSkipToQuestNode");
static_assert(sizeof(CustomConsoleManagerAA_XSkipToQuestNode) == 0x000010, "Wrong size on CustomConsoleManagerAA_XSkipToQuestNode");
static_assert(offsetof(CustomConsoleManagerAA_XSkipToQuestNode, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XSkipToQuestNode::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XStartQuest
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XStartQuest final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XStartQuest) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XStartQuest");
static_assert(sizeof(CustomConsoleManagerAA_XStartQuest) == 0x000010, "Wrong size on CustomConsoleManagerAA_XStartQuest");
static_assert(offsetof(CustomConsoleManagerAA_XStartQuest, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XStartQuest::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XStartQuestBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XStartQuestBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XStartQuestBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XStartQuestBySID");
static_assert(sizeof(CustomConsoleManagerAA_XStartQuestBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XStartQuestBySID");
static_assert(offsetof(CustomConsoleManagerAA_XStartQuestBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XStartQuestBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XStartQuestNode
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XStartQuestNode final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XStartQuestNode) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XStartQuestNode");
static_assert(sizeof(CustomConsoleManagerAA_XStartQuestNode) == 0x000010, "Wrong size on CustomConsoleManagerAA_XStartQuestNode");
static_assert(offsetof(CustomConsoleManagerAA_XStartQuestNode, ID) == 0x000000, "Member 'CustomConsoleManagerAA_XStartQuestNode::ID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XStartQuestNodeBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XStartQuestNodeBySID final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XStartQuestNodeBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XStartQuestNodeBySID");
static_assert(sizeof(CustomConsoleManagerAA_XStartQuestNodeBySID) == 0x000010, "Wrong size on CustomConsoleManagerAA_XStartQuestNodeBySID");
static_assert(offsetof(CustomConsoleManagerAA_XStartQuestNodeBySID, SID) == 0x000000, "Member 'CustomConsoleManagerAA_XStartQuestNodeBySID::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XTeleportNPCToPlayer
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XTeleportNPCToPlayer final
{
public:
	class FString                                 NPCSID;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XTeleportNPCToPlayer) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XTeleportNPCToPlayer");
static_assert(sizeof(CustomConsoleManagerAA_XTeleportNPCToPlayer) == 0x000010, "Wrong size on CustomConsoleManagerAA_XTeleportNPCToPlayer");
static_assert(offsetof(CustomConsoleManagerAA_XTeleportNPCToPlayer, NPCSID) == 0x000000, "Member 'CustomConsoleManagerAA_XTeleportNPCToPlayer::NPCSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XTeleportNPCToSpawn
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XTeleportNPCToSpawn final
{
public:
	class FString                                 NPCSID;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XTeleportNPCToSpawn) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XTeleportNPCToSpawn");
static_assert(sizeof(CustomConsoleManagerAA_XTeleportNPCToSpawn) == 0x000010, "Wrong size on CustomConsoleManagerAA_XTeleportNPCToSpawn");
static_assert(offsetof(CustomConsoleManagerAA_XTeleportNPCToSpawn, NPCSID) == 0x000000, "Member 'CustomConsoleManagerAA_XTeleportNPCToSpawn::NPCSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAA.XTestJournalQuestRewardCategory
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAA_XTestJournalQuestRewardCategory final
{
public:
	class FString                                 QuestSID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAA_XTestJournalQuestRewardCategory) == 0x000008, "Wrong alignment on CustomConsoleManagerAA_XTestJournalQuestRewardCategory");
static_assert(sizeof(CustomConsoleManagerAA_XTestJournalQuestRewardCategory) == 0x000010, "Wrong size on CustomConsoleManagerAA_XTestJournalQuestRewardCategory");
static_assert(offsetof(CustomConsoleManagerAA_XTestJournalQuestRewardCategory, QuestSID) == 0x000000, "Member 'CustomConsoleManagerAA_XTestJournalQuestRewardCategory::QuestSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAI2.XSetRelation
// 0x000C (0x000C - 0x0000)
struct CustomConsoleManagerAI2_XSetRelation final
{
public:
	int32                                         FirstUID;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondUID;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Relation;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAI2_XSetRelation) == 0x000004, "Wrong alignment on CustomConsoleManagerAI2_XSetRelation");
static_assert(sizeof(CustomConsoleManagerAI2_XSetRelation) == 0x00000C, "Wrong size on CustomConsoleManagerAI2_XSetRelation");
static_assert(offsetof(CustomConsoleManagerAI2_XSetRelation, FirstUID) == 0x000000, "Member 'CustomConsoleManagerAI2_XSetRelation::FirstUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAI2_XSetRelation, SecondUID) == 0x000004, "Member 'CustomConsoleManagerAI2_XSetRelation::SecondUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAI2_XSetRelation, Relation) == 0x000008, "Member 'CustomConsoleManagerAI2_XSetRelation::Relation' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.GetRelationBetween
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerAM_GetRelationBetween final
{
public:
	int32                                         LHS;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_GetRelationBetween) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_GetRelationBetween");
static_assert(sizeof(CustomConsoleManagerAM_GetRelationBetween) == 0x000008, "Wrong size on CustomConsoleManagerAM_GetRelationBetween");
static_assert(offsetof(CustomConsoleManagerAM_GetRelationBetween, LHS) == 0x000000, "Member 'CustomConsoleManagerAM_GetRelationBetween::LHS' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAM_GetRelationBetween, RHS) == 0x000004, "Member 'CustomConsoleManagerAM_GetRelationBetween::RHS' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.StartFollowing
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerAM_StartFollowing final
{
public:
	int32                                         TargetUID;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOrientation;                                  // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZOffset;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_StartFollowing) == 0x000008, "Wrong alignment on CustomConsoleManagerAM_StartFollowing");
static_assert(sizeof(CustomConsoleManagerAM_StartFollowing) == 0x000010, "Wrong size on CustomConsoleManagerAM_StartFollowing");
static_assert(offsetof(CustomConsoleManagerAM_StartFollowing, TargetUID) == 0x000000, "Member 'CustomConsoleManagerAM_StartFollowing::TargetUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAM_StartFollowing, bLockOrientation) == 0x000004, "Member 'CustomConsoleManagerAM_StartFollowing::bLockOrientation' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAM_StartFollowing, ZOffset) == 0x000008, "Member 'CustomConsoleManagerAM_StartFollowing::ZOffset' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XActivateAIFeature
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAM_XActivateAIFeature final
{
public:
	EAIFeature                                    Feature;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_XActivateAIFeature) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XActivateAIFeature");
static_assert(sizeof(CustomConsoleManagerAM_XActivateAIFeature) == 0x000004, "Wrong size on CustomConsoleManagerAM_XActivateAIFeature");
static_assert(offsetof(CustomConsoleManagerAM_XActivateAIFeature, Feature) == 0x000000, "Member 'CustomConsoleManagerAM_XActivateAIFeature::Feature' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XAddMoveTo
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAM_XAddMoveTo final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_XAddMoveTo) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XAddMoveTo");
static_assert(sizeof(CustomConsoleManagerAM_XAddMoveTo) == 0x000004, "Wrong size on CustomConsoleManagerAM_XAddMoveTo");
static_assert(offsetof(CustomConsoleManagerAM_XAddMoveTo, UID) == 0x000000, "Member 'CustomConsoleManagerAM_XAddMoveTo::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XCallQuickLoad
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAM_XCallQuickLoad final
{
public:
	float                                         Angular;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_XCallQuickLoad) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XCallQuickLoad");
static_assert(sizeof(CustomConsoleManagerAM_XCallQuickLoad) == 0x000004, "Wrong size on CustomConsoleManagerAM_XCallQuickLoad");
static_assert(offsetof(CustomConsoleManagerAM_XCallQuickLoad, Angular) == 0x000000, "Member 'CustomConsoleManagerAM_XCallQuickLoad::Angular' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XCallQuickSave
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAM_XCallQuickSave final
{
public:
	float                                         Angular;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_XCallQuickSave) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XCallQuickSave");
static_assert(sizeof(CustomConsoleManagerAM_XCallQuickSave) == 0x000004, "Wrong size on CustomConsoleManagerAM_XCallQuickSave");
static_assert(offsetof(CustomConsoleManagerAM_XCallQuickSave, Angular) == 0x000000, "Member 'CustomConsoleManagerAM_XCallQuickSave::Angular' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XDeactivateAIFeature
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAM_XDeactivateAIFeature final
{
public:
	EAIFeature                                    Feature;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_XDeactivateAIFeature) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XDeactivateAIFeature");
static_assert(sizeof(CustomConsoleManagerAM_XDeactivateAIFeature) == 0x000004, "Wrong size on CustomConsoleManagerAM_XDeactivateAIFeature");
static_assert(offsetof(CustomConsoleManagerAM_XDeactivateAIFeature, Feature) == 0x000000, "Member 'CustomConsoleManagerAM_XDeactivateAIFeature::Feature' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XMoveToPlayer
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerAM_XMoveToPlayer final
{
public:
	int32                                         NPC_UID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementBehaviour                            Behaviour;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerAM_XMoveToPlayer) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XMoveToPlayer");
static_assert(sizeof(CustomConsoleManagerAM_XMoveToPlayer) == 0x000008, "Wrong size on CustomConsoleManagerAM_XMoveToPlayer");
static_assert(offsetof(CustomConsoleManagerAM_XMoveToPlayer, NPC_UID) == 0x000000, "Member 'CustomConsoleManagerAM_XMoveToPlayer::NPC_UID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerAM_XMoveToPlayer, Behaviour) == 0x000004, "Member 'CustomConsoleManagerAM_XMoveToPlayer::Behaviour' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerAM.XResetAI
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerAM_XResetAI final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerAM_XResetAI) == 0x000004, "Wrong alignment on CustomConsoleManagerAM_XResetAI");
static_assert(sizeof(CustomConsoleManagerAM_XResetAI) == 0x000004, "Wrong size on CustomConsoleManagerAM_XResetAI");
static_assert(offsetof(CustomConsoleManagerAM_XResetAI, UID) == 0x000000, "Member 'CustomConsoleManagerAM_XResetAI::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetFreeCameraSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier final
{
public:
	float                                         SpeedMultiplier;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier) == 0x000004, "Wrong alignment on CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier");
static_assert(sizeof(CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier) == 0x000004, "Wrong size on CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier");
static_assert(offsetof(CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier, SpeedMultiplier) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier::SpeedMultiplier' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetNoClipGSC
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerBuild_XSetNoClipGSC final
{
public:
	bool                                          bNoClipGSC;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerBuild_XSetNoClipGSC) == 0x000004, "Wrong alignment on CustomConsoleManagerBuild_XSetNoClipGSC");
static_assert(sizeof(CustomConsoleManagerBuild_XSetNoClipGSC) == 0x000008, "Wrong size on CustomConsoleManagerBuild_XSetNoClipGSC");
static_assert(offsetof(CustomConsoleManagerBuild_XSetNoClipGSC, bNoClipGSC) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetNoClipGSC::bNoClipGSC' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSetNoClipGSC, Speed) == 0x000004, "Member 'CustomConsoleManagerBuild_XSetNoClipGSC::Speed' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetPlayerSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier final
{
public:
	float                                         SpeedMultiplier;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier) == 0x000004, "Wrong alignment on CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier");
static_assert(sizeof(CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier) == 0x000004, "Wrong size on CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier");
static_assert(offsetof(CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier, SpeedMultiplier) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier::SpeedMultiplier' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetEntityUnkillableByUID
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerBuild_XSetEntityUnkillableByUID final
{
public:
	int32                                         EntityUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGodModeState;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerBuild_XSetEntityUnkillableByUID) == 0x000004, "Wrong alignment on CustomConsoleManagerBuild_XSetEntityUnkillableByUID");
static_assert(sizeof(CustomConsoleManagerBuild_XSetEntityUnkillableByUID) == 0x000008, "Wrong size on CustomConsoleManagerBuild_XSetEntityUnkillableByUID");
static_assert(offsetof(CustomConsoleManagerBuild_XSetEntityUnkillableByUID, EntityUID) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetEntityUnkillableByUID::EntityUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSetEntityUnkillableByUID, bGodModeState) == 0x000004, "Member 'CustomConsoleManagerBuild_XSetEntityUnkillableByUID::bGodModeState' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetFactionGodMode
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerBuild_XSetFactionGodMode final
{
public:
	class FString                                 CurrentFactionSelector;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGodModeState;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerBuild_XSetFactionGodMode) == 0x000008, "Wrong alignment on CustomConsoleManagerBuild_XSetFactionGodMode");
static_assert(sizeof(CustomConsoleManagerBuild_XSetFactionGodMode) == 0x000018, "Wrong size on CustomConsoleManagerBuild_XSetFactionGodMode");
static_assert(offsetof(CustomConsoleManagerBuild_XSetFactionGodMode, CurrentFactionSelector) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetFactionGodMode::CurrentFactionSelector' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSetFactionGodMode, bGodModeState) == 0x000010, "Member 'CustomConsoleManagerBuild_XSetFactionGodMode::bGodModeState' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetGodModeAllFactions
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerBuild_XSetGodModeAllFactions final
{
public:
	bool                                          bGodModeState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerBuild_XSetGodModeAllFactions) == 0x000001, "Wrong alignment on CustomConsoleManagerBuild_XSetGodModeAllFactions");
static_assert(sizeof(CustomConsoleManagerBuild_XSetGodModeAllFactions) == 0x000001, "Wrong size on CustomConsoleManagerBuild_XSetGodModeAllFactions");
static_assert(offsetof(CustomConsoleManagerBuild_XSetGodModeAllFactions, bGodModeState) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetGodModeAllFactions::bGodModeState' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSetGodModeByUID
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerBuild_XSetGodModeByUID final
{
public:
	int32                                         EntityUID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGodModeState;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerBuild_XSetGodModeByUID) == 0x000004, "Wrong alignment on CustomConsoleManagerBuild_XSetGodModeByUID");
static_assert(sizeof(CustomConsoleManagerBuild_XSetGodModeByUID) == 0x000008, "Wrong size on CustomConsoleManagerBuild_XSetGodModeByUID");
static_assert(offsetof(CustomConsoleManagerBuild_XSetGodModeByUID, EntityUID) == 0x000000, "Member 'CustomConsoleManagerBuild_XSetGodModeByUID::EntityUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSetGodModeByUID, bGodModeState) == 0x000004, "Member 'CustomConsoleManagerBuild_XSetGodModeByUID::bGodModeState' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSpawnItemInCoordinatesBySID
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID final
{
public:
	class FString                                 ItemPrototypeSID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Px;                                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Py;                                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pz;                                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID");
static_assert(sizeof(CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID) == 0x000020, "Wrong size on CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID");
static_assert(offsetof(CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID, ItemPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID::ItemPrototypeSID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID, Px) == 0x000010, "Member 'CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID::Px' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID, Py) == 0x000014, "Member 'CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID::Py' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID, Pz) == 0x000018, "Member 'CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID::Pz' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerBuild.XSpawnItemNearPlayerBySID
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID final
{
public:
	class FString                                 ItemPrototypeSID;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID) == 0x000008, "Wrong alignment on CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID");
static_assert(sizeof(CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID) == 0x000010, "Wrong size on CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID");
static_assert(offsetof(CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID, ItemPrototypeSID) == 0x000000, "Member 'CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID::ItemPrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XChangeDropBodyMethod
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerDC_XChangeDropBodyMethod final
{
public:
	bool                                          bShouldDrop;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XChangeDropBodyMethod) == 0x000001, "Wrong alignment on CustomConsoleManagerDC_XChangeDropBodyMethod");
static_assert(sizeof(CustomConsoleManagerDC_XChangeDropBodyMethod) == 0x000001, "Wrong size on CustomConsoleManagerDC_XChangeDropBodyMethod");
static_assert(offsetof(CustomConsoleManagerDC_XChangeDropBodyMethod, bShouldDrop) == 0x000000, "Member 'CustomConsoleManagerDC_XChangeDropBodyMethod::bShouldDrop' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XKillNpcByUID
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDC_XKillNpcByUID final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XKillNpcByUID) == 0x000004, "Wrong alignment on CustomConsoleManagerDC_XKillNpcByUID");
static_assert(sizeof(CustomConsoleManagerDC_XKillNpcByUID) == 0x000004, "Wrong size on CustomConsoleManagerDC_XKillNpcByUID");
static_assert(offsetof(CustomConsoleManagerDC_XKillNpcByUID, NpcUID) == 0x000000, "Member 'CustomConsoleManagerDC_XKillNpcByUID::NpcUID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XNPCAddAbility
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerDC_XNPCAddAbility final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbilityTag;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XNPCAddAbility) == 0x000008, "Wrong alignment on CustomConsoleManagerDC_XNPCAddAbility");
static_assert(sizeof(CustomConsoleManagerDC_XNPCAddAbility) == 0x000018, "Wrong size on CustomConsoleManagerDC_XNPCAddAbility");
static_assert(offsetof(CustomConsoleManagerDC_XNPCAddAbility, NpcUID) == 0x000000, "Member 'CustomConsoleManagerDC_XNPCAddAbility::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDC_XNPCAddAbility, AbilityTag) == 0x000008, "Member 'CustomConsoleManagerDC_XNPCAddAbility::AbilityTag' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XNPCRemoveAbility
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerDC_XNPCRemoveAbility final
{
public:
	int32                                         NpcUID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbilityTag;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XNPCRemoveAbility) == 0x000008, "Wrong alignment on CustomConsoleManagerDC_XNPCRemoveAbility");
static_assert(sizeof(CustomConsoleManagerDC_XNPCRemoveAbility) == 0x000018, "Wrong size on CustomConsoleManagerDC_XNPCRemoveAbility");
static_assert(offsetof(CustomConsoleManagerDC_XNPCRemoveAbility, NpcUID) == 0x000000, "Member 'CustomConsoleManagerDC_XNPCRemoveAbility::NpcUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDC_XNPCRemoveAbility, AbilityTag) == 0x000008, "Member 'CustomConsoleManagerDC_XNPCRemoveAbility::AbilityTag' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XSetCurrentCode
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerDC_XSetCurrentCode final
{
public:
	class FString                                 InCurrentCode;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XSetCurrentCode) == 0x000008, "Wrong alignment on CustomConsoleManagerDC_XSetCurrentCode");
static_assert(sizeof(CustomConsoleManagerDC_XSetCurrentCode) == 0x000010, "Wrong size on CustomConsoleManagerDC_XSetCurrentCode");
static_assert(offsetof(CustomConsoleManagerDC_XSetCurrentCode, InCurrentCode) == 0x000000, "Member 'CustomConsoleManagerDC_XSetCurrentCode::InCurrentCode' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XSetWeatherTransitionTimeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier final
{
public:
	float                                         WeatherTransitionTimeMultiplier;                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier) == 0x000004, "Wrong alignment on CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier");
static_assert(sizeof(CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier) == 0x000004, "Wrong size on CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier");
static_assert(offsetof(CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier, WeatherTransitionTimeMultiplier) == 0x000000, "Member 'CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier::WeatherTransitionTimeMultiplier' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XShowDebugInfoForStash
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerDC_XShowDebugInfoForStash final
{
public:
	class FString                                 InStashIdentifier;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XShowDebugInfoForStash) == 0x000008, "Wrong alignment on CustomConsoleManagerDC_XShowDebugInfoForStash");
static_assert(sizeof(CustomConsoleManagerDC_XShowDebugInfoForStash) == 0x000010, "Wrong size on CustomConsoleManagerDC_XShowDebugInfoForStash");
static_assert(offsetof(CustomConsoleManagerDC_XShowDebugInfoForStash, InStashIdentifier) == 0x000000, "Member 'CustomConsoleManagerDC_XShowDebugInfoForStash::InStashIdentifier' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XTeleportPlayerInForwardDirection
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerDC_XTeleportPlayerInForwardDirection final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XTeleportPlayerInForwardDirection) == 0x000004, "Wrong alignment on CustomConsoleManagerDC_XTeleportPlayerInForwardDirection");
static_assert(sizeof(CustomConsoleManagerDC_XTeleportPlayerInForwardDirection) == 0x000008, "Wrong size on CustomConsoleManagerDC_XTeleportPlayerInForwardDirection");
static_assert(offsetof(CustomConsoleManagerDC_XTeleportPlayerInForwardDirection, Distance) == 0x000000, "Member 'CustomConsoleManagerDC_XTeleportPlayerInForwardDirection::Distance' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerDC_XTeleportPlayerInForwardDirection, Delay) == 0x000004, "Member 'CustomConsoleManagerDC_XTeleportPlayerInForwardDirection::Delay' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XTeleportPlayerWithFade
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDC_XTeleportPlayerWithFade final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XTeleportPlayerWithFade) == 0x000004, "Wrong alignment on CustomConsoleManagerDC_XTeleportPlayerWithFade");
static_assert(sizeof(CustomConsoleManagerDC_XTeleportPlayerWithFade) == 0x000004, "Wrong size on CustomConsoleManagerDC_XTeleportPlayerWithFade");
static_assert(offsetof(CustomConsoleManagerDC_XTeleportPlayerWithFade, Distance) == 0x000000, "Member 'CustomConsoleManagerDC_XTeleportPlayerWithFade::Distance' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDC.XVideoTeleportPlayerWithFade
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDC_XVideoTeleportPlayerWithFade final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDC_XVideoTeleportPlayerWithFade) == 0x000004, "Wrong alignment on CustomConsoleManagerDC_XVideoTeleportPlayerWithFade");
static_assert(sizeof(CustomConsoleManagerDC_XVideoTeleportPlayerWithFade) == 0x000004, "Wrong size on CustomConsoleManagerDC_XVideoTeleportPlayerWithFade");
static_assert(offsetof(CustomConsoleManagerDC_XVideoTeleportPlayerWithFade, Distance) == 0x000000, "Member 'CustomConsoleManagerDC_XVideoTeleportPlayerWithFade::Distance' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDP.XPrintLocalizedTextByKey
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerDP_XPrintLocalizedTextByKey final
{
public:
	class FString                                 StringKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDP_XPrintLocalizedTextByKey) == 0x000008, "Wrong alignment on CustomConsoleManagerDP_XPrintLocalizedTextByKey");
static_assert(sizeof(CustomConsoleManagerDP_XPrintLocalizedTextByKey) == 0x000010, "Wrong size on CustomConsoleManagerDP_XPrintLocalizedTextByKey");
static_assert(offsetof(CustomConsoleManagerDP_XPrintLocalizedTextByKey, StringKey) == 0x000000, "Member 'CustomConsoleManagerDP_XPrintLocalizedTextByKey::StringKey' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerDP.XTestCrashStackOverflow
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerDP_XTestCrashStackOverflow final
{
public:
	int32                                         Counter;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerDP_XTestCrashStackOverflow) == 0x000004, "Wrong alignment on CustomConsoleManagerDP_XTestCrashStackOverflow");
static_assert(sizeof(CustomConsoleManagerDP_XTestCrashStackOverflow) == 0x000004, "Wrong size on CustomConsoleManagerDP_XTestCrashStackOverflow");
static_assert(offsetof(CustomConsoleManagerDP_XTestCrashStackOverflow, Counter) == 0x000000, "Member 'CustomConsoleManagerDP_XTestCrashStackOverflow::Counter' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIK.XInputActionBlock
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerIK_XInputActionBlock final
{
public:
	class FString                                 IAName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IMCName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIK_XInputActionBlock) == 0x000008, "Wrong alignment on CustomConsoleManagerIK_XInputActionBlock");
static_assert(sizeof(CustomConsoleManagerIK_XInputActionBlock) == 0x000020, "Wrong size on CustomConsoleManagerIK_XInputActionBlock");
static_assert(offsetof(CustomConsoleManagerIK_XInputActionBlock, IAName) == 0x000000, "Member 'CustomConsoleManagerIK_XInputActionBlock::IAName' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerIK_XInputActionBlock, IMCName) == 0x000010, "Member 'CustomConsoleManagerIK_XInputActionBlock::IMCName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIK.XInputActionUnlock
// 0x0020 (0x0020 - 0x0000)
struct CustomConsoleManagerIK_XInputActionUnlock final
{
public:
	class FString                                 IAName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IMCName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIK_XInputActionUnlock) == 0x000008, "Wrong alignment on CustomConsoleManagerIK_XInputActionUnlock");
static_assert(sizeof(CustomConsoleManagerIK_XInputActionUnlock) == 0x000020, "Wrong size on CustomConsoleManagerIK_XInputActionUnlock");
static_assert(offsetof(CustomConsoleManagerIK_XInputActionUnlock, IAName) == 0x000000, "Member 'CustomConsoleManagerIK_XInputActionUnlock::IAName' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerIK_XInputActionUnlock, IMCName) == 0x000010, "Member 'CustomConsoleManagerIK_XInputActionUnlock::IMCName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIK.XSetTwelveHourTime
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerIK_XSetTwelveHourTime final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIK_XSetTwelveHourTime) == 0x000001, "Wrong alignment on CustomConsoleManagerIK_XSetTwelveHourTime");
static_assert(sizeof(CustomConsoleManagerIK_XSetTwelveHourTime) == 0x000001, "Wrong size on CustomConsoleManagerIK_XSetTwelveHourTime");
static_assert(offsetof(CustomConsoleManagerIK_XSetTwelveHourTime, bSet) == 0x000000, "Member 'CustomConsoleManagerIK_XSetTwelveHourTime::bSet' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIK.XSkipTimeHours
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerIK_XSkipTimeHours final
{
public:
	float                                         Hours;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIK_XSkipTimeHours) == 0x000004, "Wrong alignment on CustomConsoleManagerIK_XSkipTimeHours");
static_assert(sizeof(CustomConsoleManagerIK_XSkipTimeHours) == 0x000004, "Wrong size on CustomConsoleManagerIK_XSkipTimeHours");
static_assert(offsetof(CustomConsoleManagerIK_XSkipTimeHours, Hours) == 0x000000, "Member 'CustomConsoleManagerIK_XSkipTimeHours::Hours' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerIK.XSwitchPlayerRank
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerIK_XSwitchPlayerRank final
{
public:
	ERank                                         Rank;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerIK_XSwitchPlayerRank) == 0x000001, "Wrong alignment on CustomConsoleManagerIK_XSwitchPlayerRank");
static_assert(sizeof(CustomConsoleManagerIK_XSwitchPlayerRank) == 0x000001, "Wrong size on CustomConsoleManagerIK_XSwitchPlayerRank");
static_assert(offsetof(CustomConsoleManagerIK_XSwitchPlayerRank, Rank) == 0x000000, "Member 'CustomConsoleManagerIK_XSwitchPlayerRank::Rank' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMB.XSetDrawDebugExplosion
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerMB_XSetDrawDebugExplosion final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugTime;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMB_XSetDrawDebugExplosion) == 0x000004, "Wrong alignment on CustomConsoleManagerMB_XSetDrawDebugExplosion");
static_assert(sizeof(CustomConsoleManagerMB_XSetDrawDebugExplosion) == 0x000008, "Wrong size on CustomConsoleManagerMB_XSetDrawDebugExplosion");
static_assert(offsetof(CustomConsoleManagerMB_XSetDrawDebugExplosion, bDebug) == 0x000000, "Member 'CustomConsoleManagerMB_XSetDrawDebugExplosion::bDebug' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMB_XSetDrawDebugExplosion, DebugTime) == 0x000004, "Member 'CustomConsoleManagerMB_XSetDrawDebugExplosion::DebugTime' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMP.XDisplayArtifactSpawnLuckStatus
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus final
{
public:
	class FString                                 ArtifactSpawnerSID;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus) == 0x000008, "Wrong alignment on CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus");
static_assert(sizeof(CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus) == 0x000010, "Wrong size on CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus");
static_assert(offsetof(CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus, ArtifactSpawnerSID) == 0x000000, "Member 'CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus::ArtifactSpawnerSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMP.XSetAimAssistEnabled
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerMP_XSetAimAssistEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMP_XSetAimAssistEnabled) == 0x000001, "Wrong alignment on CustomConsoleManagerMP_XSetAimAssistEnabled");
static_assert(sizeof(CustomConsoleManagerMP_XSetAimAssistEnabled) == 0x000001, "Wrong size on CustomConsoleManagerMP_XSetAimAssistEnabled");
static_assert(offsetof(CustomConsoleManagerMP_XSetAimAssistEnabled, bEnabled) == 0x000000, "Member 'CustomConsoleManagerMP_XSetAimAssistEnabled::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMP.XSetArtifactSpawnLuck
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerMP_XSetArtifactSpawnLuck final
{
public:
	float                                         LuckValue;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMP_XSetArtifactSpawnLuck) == 0x000004, "Wrong alignment on CustomConsoleManagerMP_XSetArtifactSpawnLuck");
static_assert(sizeof(CustomConsoleManagerMP_XSetArtifactSpawnLuck) == 0x000004, "Wrong size on CustomConsoleManagerMP_XSetArtifactSpawnLuck");
static_assert(offsetof(CustomConsoleManagerMP_XSetArtifactSpawnLuck, LuckValue) == 0x000000, "Member 'CustomConsoleManagerMP_XSetArtifactSpawnLuck::LuckValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMP.XSetClosestFaustCloneSwitchValue
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue final
{
public:
	float                                         SearchRadius;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchValue;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue) == 0x000004, "Wrong alignment on CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue");
static_assert(sizeof(CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue) == 0x000008, "Wrong size on CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue");
static_assert(offsetof(CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue, SearchRadius) == 0x000000, "Member 'CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue::SearchRadius' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue, SwitchValue) == 0x000004, "Member 'CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue::SwitchValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMP.XWeaponDrag
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerMP_XWeaponDrag final
{
public:
	int32                                         ModelUID;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMP_XWeaponDrag) == 0x000004, "Wrong alignment on CustomConsoleManagerMP_XWeaponDrag");
static_assert(sizeof(CustomConsoleManagerMP_XWeaponDrag) == 0x000008, "Wrong size on CustomConsoleManagerMP_XWeaponDrag");
static_assert(offsetof(CustomConsoleManagerMP_XWeaponDrag, ModelUID) == 0x000000, "Member 'CustomConsoleManagerMP_XWeaponDrag::ModelUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMP_XWeaponDrag, Delay) == 0x000004, "Member 'CustomConsoleManagerMP_XWeaponDrag::Delay' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMY.XPossessToCharacterByUID
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerMY_XPossessToCharacterByUID final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMY_XPossessToCharacterByUID) == 0x000004, "Wrong alignment on CustomConsoleManagerMY_XPossessToCharacterByUID");
static_assert(sizeof(CustomConsoleManagerMY_XPossessToCharacterByUID) == 0x000004, "Wrong size on CustomConsoleManagerMY_XPossessToCharacterByUID");
static_assert(offsetof(CustomConsoleManagerMY_XPossessToCharacterByUID, UID) == 0x000000, "Member 'CustomConsoleManagerMY_XPossessToCharacterByUID::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMY.XSetXRayMode
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerMY_XSetXRayMode final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMY_XSetXRayMode) == 0x000001, "Wrong alignment on CustomConsoleManagerMY_XSetXRayMode");
static_assert(sizeof(CustomConsoleManagerMY_XSetXRayMode) == 0x000001, "Wrong size on CustomConsoleManagerMY_XSetXRayMode");
static_assert(offsetof(CustomConsoleManagerMY_XSetXRayMode, bEnabled) == 0x000000, "Member 'CustomConsoleManagerMY_XSetXRayMode::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerMY.XSimulatePhysicsOnBoneForObj
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj final
{
public:
	int32                                         ObjUID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj) == 0x000008, "Wrong alignment on CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj");
static_assert(sizeof(CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj) == 0x000018, "Wrong size on CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj");
static_assert(offsetof(CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj, ObjUID) == 0x000000, "Member 'CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj::ObjUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj, BoneName) == 0x000008, "Member 'CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj::BoneName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOA.XDebugAudioScattererEvents
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerOA_XDebugAudioScattererEvents final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTime;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOA_XDebugAudioScattererEvents) == 0x000004, "Wrong alignment on CustomConsoleManagerOA_XDebugAudioScattererEvents");
static_assert(sizeof(CustomConsoleManagerOA_XDebugAudioScattererEvents) == 0x000008, "Wrong size on CustomConsoleManagerOA_XDebugAudioScattererEvents");
static_assert(offsetof(CustomConsoleManagerOA_XDebugAudioScattererEvents, bEnabled) == 0x000000, "Member 'CustomConsoleManagerOA_XDebugAudioScattererEvents::bEnabled' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerOA_XDebugAudioScattererEvents, DrawTime) == 0x000004, "Member 'CustomConsoleManagerOA_XDebugAudioScattererEvents::DrawTime' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOA.XDebugAudioScattererMap
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerOA_XDebugAudioScattererMap final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOA_XDebugAudioScattererMap) == 0x000001, "Wrong alignment on CustomConsoleManagerOA_XDebugAudioScattererMap");
static_assert(sizeof(CustomConsoleManagerOA_XDebugAudioScattererMap) == 0x000001, "Wrong size on CustomConsoleManagerOA_XDebugAudioScattererMap");
static_assert(offsetof(CustomConsoleManagerOA_XDebugAudioScattererMap, bEnabled) == 0x000000, "Member 'CustomConsoleManagerOA_XDebugAudioScattererMap::bEnabled' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOA.XHasDLC
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerOA_XHasDLC final
{
public:
	class FName                                   DLCName;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOA_XHasDLC) == 0x000004, "Wrong alignment on CustomConsoleManagerOA_XHasDLC");
static_assert(sizeof(CustomConsoleManagerOA_XHasDLC) == 0x000008, "Wrong size on CustomConsoleManagerOA_XHasDLC");
static_assert(offsetof(CustomConsoleManagerOA_XHasDLC, DLCName) == 0x000000, "Member 'CustomConsoleManagerOA_XHasDLC::DLCName' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOA.XPlayVideo
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerOA_XPlayVideo final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOA_XPlayVideo) == 0x000008, "Wrong alignment on CustomConsoleManagerOA_XPlayVideo");
static_assert(sizeof(CustomConsoleManagerOA_XPlayVideo) == 0x000010, "Wrong size on CustomConsoleManagerOA_XPlayVideo");
static_assert(offsetof(CustomConsoleManagerOA_XPlayVideo, Path) == 0x000000, "Member 'CustomConsoleManagerOA_XPlayVideo::Path' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselAngle
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselAngle) == 0x000004, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselAngle");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselAngle) == 0x000004, "Wrong size on CustomConsoleManagerOM_XSetCarouselAngle");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselAngle, Angle) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselAngle::Angle' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselDebugTrajectory
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselDebugTrajectory final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselDebugTrajectory) == 0x000001, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselDebugTrajectory");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselDebugTrajectory) == 0x000001, "Wrong size on CustomConsoleManagerOM_XSetCarouselDebugTrajectory");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselDebugTrajectory, bEnable) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselDebugTrajectory::bEnable' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselDuration
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselDuration) == 0x000004, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselDuration");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselDuration) == 0x000004, "Wrong size on CustomConsoleManagerOM_XSetCarouselDuration");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselDuration, Duration) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselDuration::Duration' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselForce
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselForce final
{
public:
	float                                         Force;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselForce) == 0x000004, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselForce");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselForce) == 0x000004, "Wrong size on CustomConsoleManagerOM_XSetCarouselForce");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselForce, Force) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselForce::Force' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselLiftUpTime
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselLiftUpTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselLiftUpTime) == 0x000004, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselLiftUpTime");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselLiftUpTime) == 0x000004, "Wrong size on CustomConsoleManagerOM_XSetCarouselLiftUpTime");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselLiftUpTime, Time) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselLiftUpTime::Time' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselRotation
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselRotation final
{
public:
	float                                         Rotation;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselRotation) == 0x000004, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselRotation");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselRotation) == 0x000004, "Wrong size on CustomConsoleManagerOM_XSetCarouselRotation");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselRotation, Rotation) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselRotation::Rotation' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerOM.XSetCarouselTimeToCenter
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerOM_XSetCarouselTimeToCenter final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerOM_XSetCarouselTimeToCenter) == 0x000004, "Wrong alignment on CustomConsoleManagerOM_XSetCarouselTimeToCenter");
static_assert(sizeof(CustomConsoleManagerOM_XSetCarouselTimeToCenter) == 0x000004, "Wrong size on CustomConsoleManagerOM_XSetCarouselTimeToCenter");
static_assert(offsetof(CustomConsoleManagerOM_XSetCarouselTimeToCenter, Time) == 0x000000, "Member 'CustomConsoleManagerOM_XSetCarouselTimeToCenter::Time' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPA.XTogglePhysicalMaterialDebug
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerPA_XTogglePhysicalMaterialDebug final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPA_XTogglePhysicalMaterialDebug) == 0x000004, "Wrong alignment on CustomConsoleManagerPA_XTogglePhysicalMaterialDebug");
static_assert(sizeof(CustomConsoleManagerPA_XTogglePhysicalMaterialDebug) == 0x000004, "Wrong size on CustomConsoleManagerPA_XTogglePhysicalMaterialDebug");
static_assert(offsetof(CustomConsoleManagerPA_XTogglePhysicalMaterialDebug, Distance) == 0x000000, "Member 'CustomConsoleManagerPA_XTogglePhysicalMaterialDebug::Distance' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPA.XChangePlayerMovementFXPrototype
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerPA_XChangePlayerMovementFXPrototype final
{
public:
	class FString                                 PrototypeSID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPA_XChangePlayerMovementFXPrototype) == 0x000008, "Wrong alignment on CustomConsoleManagerPA_XChangePlayerMovementFXPrototype");
static_assert(sizeof(CustomConsoleManagerPA_XChangePlayerMovementFXPrototype) == 0x000010, "Wrong size on CustomConsoleManagerPA_XChangePlayerMovementFXPrototype");
static_assert(offsetof(CustomConsoleManagerPA_XChangePlayerMovementFXPrototype, PrototypeSID) == 0x000000, "Member 'CustomConsoleManagerPA_XChangePlayerMovementFXPrototype::PrototypeSID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPA.XToggleGrenadeDebug
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerPA_XToggleGrenadeDebug final
{
public:
	EGrenadeDebugFlag                             FlagValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPA_XToggleGrenadeDebug) == 0x000004, "Wrong alignment on CustomConsoleManagerPA_XToggleGrenadeDebug");
static_assert(sizeof(CustomConsoleManagerPA_XToggleGrenadeDebug) == 0x000004, "Wrong size on CustomConsoleManagerPA_XToggleGrenadeDebug");
static_assert(offsetof(CustomConsoleManagerPA_XToggleGrenadeDebug, FlagValue) == 0x000000, "Member 'CustomConsoleManagerPA_XToggleGrenadeDebug::FlagValue' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerPU.XShowPopup
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerPU_XShowPopup final
{
public:
	int32                                         ButtonsNum;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerPU_XShowPopup) == 0x000004, "Wrong alignment on CustomConsoleManagerPU_XShowPopup");
static_assert(sizeof(CustomConsoleManagerPU_XShowPopup) == 0x000004, "Wrong size on CustomConsoleManagerPU_XShowPopup");
static_assert(offsetof(CustomConsoleManagerPU_XShowPopup, ButtonsNum) == 0x000000, "Member 'CustomConsoleManagerPU_XShowPopup::ButtonsNum' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerSD.XGetActorNameByUID
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerSD_XGetActorNameByUID final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerSD_XGetActorNameByUID) == 0x000004, "Wrong alignment on CustomConsoleManagerSD_XGetActorNameByUID");
static_assert(sizeof(CustomConsoleManagerSD_XGetActorNameByUID) == 0x000004, "Wrong size on CustomConsoleManagerSD_XGetActorNameByUID");
static_assert(offsetof(CustomConsoleManagerSD_XGetActorNameByUID, UID) == 0x000000, "Member 'CustomConsoleManagerSD_XGetActorNameByUID::UID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerSD.XTeleportToPlacesOfInterest
// 0x0010 (0x0010 - 0x0000)
struct CustomConsoleManagerSD_XTeleportToPlacesOfInterest final
{
public:
	class FString                                 SID;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerSD_XTeleportToPlacesOfInterest) == 0x000008, "Wrong alignment on CustomConsoleManagerSD_XTeleportToPlacesOfInterest");
static_assert(sizeof(CustomConsoleManagerSD_XTeleportToPlacesOfInterest) == 0x000010, "Wrong size on CustomConsoleManagerSD_XTeleportToPlacesOfInterest");
static_assert(offsetof(CustomConsoleManagerSD_XTeleportToPlacesOfInterest, SID) == 0x000000, "Member 'CustomConsoleManagerSD_XTeleportToPlacesOfInterest::SID' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVD.XProtectItemContainer
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerVD_XProtectItemContainer final
{
public:
	class FString                                 ContainerUID;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProtect;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerVD_XProtectItemContainer) == 0x000008, "Wrong alignment on CustomConsoleManagerVD_XProtectItemContainer");
static_assert(sizeof(CustomConsoleManagerVD_XProtectItemContainer) == 0x000018, "Wrong size on CustomConsoleManagerVD_XProtectItemContainer");
static_assert(offsetof(CustomConsoleManagerVD_XProtectItemContainer, ContainerUID) == 0x000000, "Member 'CustomConsoleManagerVD_XProtectItemContainer::ContainerUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVD_XProtectItemContainer, bProtect) == 0x000010, "Member 'CustomConsoleManagerVD_XProtectItemContainer::bProtect' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVD.XProtectSquad
// 0x0018 (0x0018 - 0x0000)
struct CustomConsoleManagerVD_XProtectSquad final
{
public:
	class FString                                 SquadUID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProtect;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomConsoleManagerVD_XProtectSquad) == 0x000008, "Wrong alignment on CustomConsoleManagerVD_XProtectSquad");
static_assert(sizeof(CustomConsoleManagerVD_XProtectSquad) == 0x000018, "Wrong size on CustomConsoleManagerVD_XProtectSquad");
static_assert(offsetof(CustomConsoleManagerVD_XProtectSquad, SquadUID) == 0x000000, "Member 'CustomConsoleManagerVD_XProtectSquad::SquadUID' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerVD_XProtectSquad, bProtect) == 0x000010, "Member 'CustomConsoleManagerVD_XProtectSquad::bProtect' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerVD.XShowUnitAndSquadUIDs
// 0x0004 (0x0004 - 0x0000)
struct CustomConsoleManagerVD_XShowUnitAndSquadUIDs final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerVD_XShowUnitAndSquadUIDs) == 0x000004, "Wrong alignment on CustomConsoleManagerVD_XShowUnitAndSquadUIDs");
static_assert(sizeof(CustomConsoleManagerVD_XShowUnitAndSquadUIDs) == 0x000004, "Wrong size on CustomConsoleManagerVD_XShowUnitAndSquadUIDs");
static_assert(offsetof(CustomConsoleManagerVD_XShowUnitAndSquadUIDs, Radius) == 0x000000, "Member 'CustomConsoleManagerVD_XShowUnitAndSquadUIDs::Radius' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerYK.XTestSetDiscount
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerYK_XTestSetDiscount final
{
public:
	bool                                          InbDiscount;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerYK_XTestSetDiscount) == 0x000001, "Wrong alignment on CustomConsoleManagerYK_XTestSetDiscount");
static_assert(sizeof(CustomConsoleManagerYK_XTestSetDiscount) == 0x000001, "Wrong size on CustomConsoleManagerYK_XTestSetDiscount");
static_assert(offsetof(CustomConsoleManagerYK_XTestSetDiscount, InbDiscount) == 0x000000, "Member 'CustomConsoleManagerYK_XTestSetDiscount::InbDiscount' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerYK.XBlockItemSelectorSlot
// 0x0008 (0x0008 - 0x0000)
struct CustomConsoleManagerYK_XBlockItemSelectorSlot final
{
public:
	bool                                          InBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSlotNum;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerYK_XBlockItemSelectorSlot) == 0x000004, "Wrong alignment on CustomConsoleManagerYK_XBlockItemSelectorSlot");
static_assert(sizeof(CustomConsoleManagerYK_XBlockItemSelectorSlot) == 0x000008, "Wrong size on CustomConsoleManagerYK_XBlockItemSelectorSlot");
static_assert(offsetof(CustomConsoleManagerYK_XBlockItemSelectorSlot, InBlock) == 0x000000, "Member 'CustomConsoleManagerYK_XBlockItemSelectorSlot::InBlock' has a wrong offset!");
static_assert(offsetof(CustomConsoleManagerYK_XBlockItemSelectorSlot, InSlotNum) == 0x000004, "Member 'CustomConsoleManagerYK_XBlockItemSelectorSlot::InSlotNum' has a wrong offset!");

// Function Stalker2.CustomConsoleManagerYK.XBlockItemSelectorSlots
// 0x0001 (0x0001 - 0x0000)
struct CustomConsoleManagerYK_XBlockItemSelectorSlots final
{
public:
	bool                                          InBlock;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomConsoleManagerYK_XBlockItemSelectorSlots) == 0x000001, "Wrong alignment on CustomConsoleManagerYK_XBlockItemSelectorSlots");
static_assert(sizeof(CustomConsoleManagerYK_XBlockItemSelectorSlots) == 0x000001, "Wrong size on CustomConsoleManagerYK_XBlockItemSelectorSlots");
static_assert(offsetof(CustomConsoleManagerYK_XBlockItemSelectorSlots, InBlock) == 0x000000, "Member 'CustomConsoleManagerYK_XBlockItemSelectorSlots::InBlock' has a wrong offset!");

// Function Stalker2.DataLayerPhysicsComponent.OnDataLayersUpdated
// 0x0010 (0x0010 - 0x0000)
struct DataLayerPhysicsComponent_OnDataLayersUpdated final
{
public:
	const class UDataLayerInstance*               DataLayer;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataLayerRuntimeState                        State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataLayerPhysicsComponent_OnDataLayersUpdated) == 0x000008, "Wrong alignment on DataLayerPhysicsComponent_OnDataLayersUpdated");
static_assert(sizeof(DataLayerPhysicsComponent_OnDataLayersUpdated) == 0x000010, "Wrong size on DataLayerPhysicsComponent_OnDataLayersUpdated");
static_assert(offsetof(DataLayerPhysicsComponent_OnDataLayersUpdated, DataLayer) == 0x000000, "Member 'DataLayerPhysicsComponent_OnDataLayersUpdated::DataLayer' has a wrong offset!");
static_assert(offsetof(DataLayerPhysicsComponent_OnDataLayersUpdated, State) == 0x000008, "Member 'DataLayerPhysicsComponent_OnDataLayersUpdated::State' has a wrong offset!");

// Function Stalker2.DialogueViewFolder.ChangeSelectFolder
// 0x0010 (0x0010 - 0x0000)
struct DialogueViewFolder_ChangeSelectFolder final
{
public:
	int32                                         IndexOldFolder;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AxisMove;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDialogueAnswer*                  ReturnValue;                                       // 0x0008(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueViewFolder_ChangeSelectFolder) == 0x000008, "Wrong alignment on DialogueViewFolder_ChangeSelectFolder");
static_assert(sizeof(DialogueViewFolder_ChangeSelectFolder) == 0x000010, "Wrong size on DialogueViewFolder_ChangeSelectFolder");
static_assert(offsetof(DialogueViewFolder_ChangeSelectFolder, IndexOldFolder) == 0x000000, "Member 'DialogueViewFolder_ChangeSelectFolder::IndexOldFolder' has a wrong offset!");
static_assert(offsetof(DialogueViewFolder_ChangeSelectFolder, AxisMove) == 0x000004, "Member 'DialogueViewFolder_ChangeSelectFolder::AxisMove' has a wrong offset!");
static_assert(offsetof(DialogueViewFolder_ChangeSelectFolder, ReturnValue) == 0x000008, "Member 'DialogueViewFolder_ChangeSelectFolder::ReturnValue' has a wrong offset!");

// Function Stalker2.DoorView.CloseDoor
// 0x0001 (0x0001 - 0x0000)
struct DoorView_CloseDoor final
{
public:
	bool                                          bCloseFast;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorView_CloseDoor) == 0x000001, "Wrong alignment on DoorView_CloseDoor");
static_assert(sizeof(DoorView_CloseDoor) == 0x000001, "Wrong size on DoorView_CloseDoor");
static_assert(offsetof(DoorView_CloseDoor, bCloseFast) == 0x000000, "Member 'DoorView_CloseDoor::bCloseFast' has a wrong offset!");

// Function Stalker2.DoorView.OnComponentHit
// 0x0118 (0x0118 - 0x0000)
struct DoorView_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorView_OnComponentHit) == 0x000008, "Wrong alignment on DoorView_OnComponentHit");
static_assert(sizeof(DoorView_OnComponentHit) == 0x000118, "Wrong size on DoorView_OnComponentHit");
static_assert(offsetof(DoorView_OnComponentHit, HitComponent) == 0x000000, "Member 'DoorView_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(DoorView_OnComponentHit, OtherActor) == 0x000008, "Member 'DoorView_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(DoorView_OnComponentHit, OtherComp) == 0x000010, "Member 'DoorView_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(DoorView_OnComponentHit, NormalImpulse) == 0x000018, "Member 'DoorView_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(DoorView_OnComponentHit, Hit) == 0x000030, "Member 'DoorView_OnComponentHit::Hit' has a wrong offset!");

// Function Stalker2.DoorView.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct DoorView_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorView_IsLocked) == 0x000001, "Wrong alignment on DoorView_IsLocked");
static_assert(sizeof(DoorView_IsLocked) == 0x000001, "Wrong size on DoorView_IsLocked");
static_assert(offsetof(DoorView_IsLocked, ReturnValue) == 0x000000, "Member 'DoorView_IsLocked::ReturnValue' has a wrong offset!");

// Function Stalker2.DoorView.SetDoubleDoor
// 0x0001 (0x0001 - 0x0000)
struct DoorView_SetDoubleDoor final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoorView_SetDoubleDoor) == 0x000001, "Wrong alignment on DoorView_SetDoubleDoor");
static_assert(sizeof(DoorView_SetDoubleDoor) == 0x000001, "Wrong size on DoorView_SetDoubleDoor");
static_assert(offsetof(DoorView_SetDoubleDoor, bValue) == 0x000000, "Member 'DoorView_SetDoubleDoor::bValue' has a wrong offset!");

// Function Stalker2.EditorTools.GetSkyLightUpdateDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct EditorTools_GetSkyLightUpdateDeltaTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorTools_GetSkyLightUpdateDeltaTime) == 0x000004, "Wrong alignment on EditorTools_GetSkyLightUpdateDeltaTime");
static_assert(sizeof(EditorTools_GetSkyLightUpdateDeltaTime) == 0x000004, "Wrong size on EditorTools_GetSkyLightUpdateDeltaTime");
static_assert(offsetof(EditorTools_GetSkyLightUpdateDeltaTime, ReturnValue) == 0x000000, "Member 'EditorTools_GetSkyLightUpdateDeltaTime::ReturnValue' has a wrong offset!");

// Function Stalker2.EditorTools.IsActorInGameWorld
// 0x0010 (0x0010 - 0x0000)
struct EditorTools_IsActorInGameWorld final
{
public:
	class AActor*                                 ActorToCheck;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorTools_IsActorInGameWorld) == 0x000008, "Wrong alignment on EditorTools_IsActorInGameWorld");
static_assert(sizeof(EditorTools_IsActorInGameWorld) == 0x000010, "Wrong size on EditorTools_IsActorInGameWorld");
static_assert(offsetof(EditorTools_IsActorInGameWorld, ActorToCheck) == 0x000000, "Member 'EditorTools_IsActorInGameWorld::ActorToCheck' has a wrong offset!");
static_assert(offsetof(EditorTools_IsActorInGameWorld, ReturnValue) == 0x000008, "Member 'EditorTools_IsActorInGameWorld::ReturnValue' has a wrong offset!");

// Function Stalker2.EditorTools.IsGameWorld
// 0x0010 (0x0010 - 0x0000)
struct EditorTools_IsGameWorld final
{
public:
	class UWorld*                                 GameWorld;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorTools_IsGameWorld) == 0x000008, "Wrong alignment on EditorTools_IsGameWorld");
static_assert(sizeof(EditorTools_IsGameWorld) == 0x000010, "Wrong size on EditorTools_IsGameWorld");
static_assert(offsetof(EditorTools_IsGameWorld, GameWorld) == 0x000000, "Member 'EditorTools_IsGameWorld::GameWorld' has a wrong offset!");
static_assert(offsetof(EditorTools_IsGameWorld, ReturnValue) == 0x000008, "Member 'EditorTools_IsGameWorld::ReturnValue' has a wrong offset!");

// Function Stalker2.EquipmentSlots.OnItemMouseEnter
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSlots_OnItemMouseEnter final
{
public:
	class UInteractableItemSlotBaseWidget*        ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSlots_OnItemMouseEnter) == 0x000008, "Wrong alignment on EquipmentSlots_OnItemMouseEnter");
static_assert(sizeof(EquipmentSlots_OnItemMouseEnter) == 0x000008, "Wrong size on EquipmentSlots_OnItemMouseEnter");
static_assert(offsetof(EquipmentSlots_OnItemMouseEnter, ItemWidget) == 0x000000, "Member 'EquipmentSlots_OnItemMouseEnter::ItemWidget' has a wrong offset!");

// Function Stalker2.EquipmentSlots.OnItemMouseLeave
// 0x0008 (0x0008 - 0x0000)
struct EquipmentSlots_OnItemMouseLeave final
{
public:
	class UInteractableItemSlotBaseWidget*        ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSlots_OnItemMouseLeave) == 0x000008, "Wrong alignment on EquipmentSlots_OnItemMouseLeave");
static_assert(sizeof(EquipmentSlots_OnItemMouseLeave) == 0x000008, "Wrong size on EquipmentSlots_OnItemMouseLeave");
static_assert(offsetof(EquipmentSlots_OnItemMouseLeave, ItemWidget) == 0x000000, "Member 'EquipmentSlots_OnItemMouseLeave::ItemWidget' has a wrong offset!");

// Function Stalker2.ExpulsionAnomaly.OnBoltCollided
// 0x0018 (0x0018 - 0x0000)
struct ExpulsionAnomaly_OnBoltCollided final
{
public:
	struct FVector                                LocalPoint;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExpulsionAnomaly_OnBoltCollided) == 0x000008, "Wrong alignment on ExpulsionAnomaly_OnBoltCollided");
static_assert(sizeof(ExpulsionAnomaly_OnBoltCollided) == 0x000018, "Wrong size on ExpulsionAnomaly_OnBoltCollided");
static_assert(offsetof(ExpulsionAnomaly_OnBoltCollided, LocalPoint) == 0x000000, "Member 'ExpulsionAnomaly_OnBoltCollided::LocalPoint' has a wrong offset!");

// Function Stalker2.OnAKEventFinished_Proxy.OnSoundFinished
// 0x0010 (0x0010 - 0x0000)
struct OnAKEventFinished_Proxy_OnSoundFinished final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnAKEventFinished_Proxy_OnSoundFinished) == 0x000008, "Wrong alignment on OnAKEventFinished_Proxy_OnSoundFinished");
static_assert(sizeof(OnAKEventFinished_Proxy_OnSoundFinished) == 0x000010, "Wrong size on OnAKEventFinished_Proxy_OnSoundFinished");
static_assert(offsetof(OnAKEventFinished_Proxy_OnSoundFinished, CallbackType) == 0x000000, "Member 'OnAKEventFinished_Proxy_OnSoundFinished::CallbackType' has a wrong offset!");
static_assert(offsetof(OnAKEventFinished_Proxy_OnSoundFinished, CallbackInfo) == 0x000008, "Member 'OnAKEventFinished_Proxy_OnSoundFinished::CallbackInfo' has a wrong offset!");

// Function Stalker2.FastDialogueView.EndSelectAnswer
// 0x0001 (0x0001 - 0x0000)
struct FastDialogueView_EndSelectAnswer final
{
public:
	bool                                          bIsRightAnswer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastDialogueView_EndSelectAnswer) == 0x000001, "Wrong alignment on FastDialogueView_EndSelectAnswer");
static_assert(sizeof(FastDialogueView_EndSelectAnswer) == 0x000001, "Wrong size on FastDialogueView_EndSelectAnswer");
static_assert(offsetof(FastDialogueView_EndSelectAnswer, bIsRightAnswer) == 0x000000, "Member 'FastDialogueView_EndSelectAnswer::bIsRightAnswer' has a wrong offset!");

// Function Stalker2.FastDialogueView.PostSelectAnswer
// 0x0001 (0x0001 - 0x0000)
struct FastDialogueView_PostSelectAnswer final
{
public:
	bool                                          bIsRightAnswer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FastDialogueView_PostSelectAnswer) == 0x000001, "Wrong alignment on FastDialogueView_PostSelectAnswer");
static_assert(sizeof(FastDialogueView_PostSelectAnswer) == 0x000001, "Wrong size on FastDialogueView_PostSelectAnswer");
static_assert(offsetof(FastDialogueView_PostSelectAnswer, bIsRightAnswer) == 0x000000, "Member 'FastDialogueView_PostSelectAnswer::bIsRightAnswer' has a wrong offset!");

// Function Stalker2.FireBreathArchiAnomaly.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct FireBreathArchiAnomaly_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireBreathArchiAnomaly_OnBeginOverlap) == 0x000008, "Wrong alignment on FireBreathArchiAnomaly_OnBeginOverlap");
static_assert(sizeof(FireBreathArchiAnomaly_OnBeginOverlap) == 0x000108, "Wrong size on FireBreathArchiAnomaly_OnBeginOverlap");
static_assert(offsetof(FireBreathArchiAnomaly_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'FireBreathArchiAnomaly_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnBeginOverlap, OtherActor) == 0x000008, "Member 'FireBreathArchiAnomaly_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnBeginOverlap, OtherComp) == 0x000010, "Member 'FireBreathArchiAnomaly_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FireBreathArchiAnomaly_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'FireBreathArchiAnomaly_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnBeginOverlap, SweepResult) == 0x000020, "Member 'FireBreathArchiAnomaly_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.FireBreathArchiAnomaly.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct FireBreathArchiAnomaly_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FireBreathArchiAnomaly_OnEndOverlap) == 0x000008, "Wrong alignment on FireBreathArchiAnomaly_OnEndOverlap");
static_assert(sizeof(FireBreathArchiAnomaly_OnEndOverlap) == 0x000020, "Wrong size on FireBreathArchiAnomaly_OnEndOverlap");
static_assert(offsetof(FireBreathArchiAnomaly_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'FireBreathArchiAnomaly_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnEndOverlap, OtherActor) == 0x000008, "Member 'FireBreathArchiAnomaly_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnEndOverlap, OtherComp) == 0x000010, "Member 'FireBreathArchiAnomaly_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FireBreathArchiAnomaly_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'FireBreathArchiAnomaly_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.FireBreathArchiAnomaly.SetScaleAlpha
// 0x0004 (0x0004 - 0x0000)
struct FireBreathArchiAnomaly_SetScaleAlpha final
{
public:
	float                                         InScaleAlpha;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireBreathArchiAnomaly_SetScaleAlpha) == 0x000004, "Wrong alignment on FireBreathArchiAnomaly_SetScaleAlpha");
static_assert(sizeof(FireBreathArchiAnomaly_SetScaleAlpha) == 0x000004, "Wrong size on FireBreathArchiAnomaly_SetScaleAlpha");
static_assert(offsetof(FireBreathArchiAnomaly_SetScaleAlpha, InScaleAlpha) == 0x000000, "Member 'FireBreathArchiAnomaly_SetScaleAlpha::InScaleAlpha' has a wrong offset!");

// Function Stalker2.FireBreathArchiAnomaly.SetTimeAlpha
// 0x0004 (0x0004 - 0x0000)
struct FireBreathArchiAnomaly_SetTimeAlpha final
{
public:
	float                                         InTimeAlpha;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireBreathArchiAnomaly_SetTimeAlpha) == 0x000004, "Wrong alignment on FireBreathArchiAnomaly_SetTimeAlpha");
static_assert(sizeof(FireBreathArchiAnomaly_SetTimeAlpha) == 0x000004, "Wrong size on FireBreathArchiAnomaly_SetTimeAlpha");
static_assert(offsetof(FireBreathArchiAnomaly_SetTimeAlpha, InTimeAlpha) == 0x000000, "Member 'FireBreathArchiAnomaly_SetTimeAlpha::InTimeAlpha' has a wrong offset!");

// Function Stalker2.FireBreathArchiAnomaly.GetScaleAlpha
// 0x0004 (0x0004 - 0x0000)
struct FireBreathArchiAnomaly_GetScaleAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireBreathArchiAnomaly_GetScaleAlpha) == 0x000004, "Wrong alignment on FireBreathArchiAnomaly_GetScaleAlpha");
static_assert(sizeof(FireBreathArchiAnomaly_GetScaleAlpha) == 0x000004, "Wrong size on FireBreathArchiAnomaly_GetScaleAlpha");
static_assert(offsetof(FireBreathArchiAnomaly_GetScaleAlpha, ReturnValue) == 0x000000, "Member 'FireBreathArchiAnomaly_GetScaleAlpha::ReturnValue' has a wrong offset!");

// Function Stalker2.FireBreathArchiAnomaly.GetTimeAlpha
// 0x0004 (0x0004 - 0x0000)
struct FireBreathArchiAnomaly_GetTimeAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireBreathArchiAnomaly_GetTimeAlpha) == 0x000004, "Wrong alignment on FireBreathArchiAnomaly_GetTimeAlpha");
static_assert(sizeof(FireBreathArchiAnomaly_GetTimeAlpha) == 0x000004, "Wrong size on FireBreathArchiAnomaly_GetTimeAlpha");
static_assert(offsetof(FireBreathArchiAnomaly_GetTimeAlpha, ReturnValue) == 0x000000, "Member 'FireBreathArchiAnomaly_GetTimeAlpha::ReturnValue' has a wrong offset!");

// Function Stalker2.ForceFeedbackSphereComponent.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct ForceFeedbackSphereComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForceFeedbackSphereComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on ForceFeedbackSphereComponent_OnBeginOverlap");
static_assert(sizeof(ForceFeedbackSphereComponent_OnBeginOverlap) == 0x000108, "Wrong size on ForceFeedbackSphereComponent_OnBeginOverlap");
static_assert(offsetof(ForceFeedbackSphereComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'ForceFeedbackSphereComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ForceFeedbackSphereComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'ForceFeedbackSphereComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ForceFeedbackSphereComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'ForceFeedbackSphereComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'ForceFeedbackSphereComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.ForceFeedbackSphereComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct ForceFeedbackSphereComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ForceFeedbackSphereComponent_OnEndOverlap) == 0x000008, "Wrong alignment on ForceFeedbackSphereComponent_OnEndOverlap");
static_assert(sizeof(ForceFeedbackSphereComponent_OnEndOverlap) == 0x000020, "Wrong size on ForceFeedbackSphereComponent_OnEndOverlap");
static_assert(offsetof(ForceFeedbackSphereComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'ForceFeedbackSphereComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'ForceFeedbackSphereComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'ForceFeedbackSphereComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ForceFeedbackSphereComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'ForceFeedbackSphereComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.AbilityEventData.GetAbilityType
// 0x0001 (0x0001 - 0x0000)
struct AbilityEventData_GetAbilityType final
{
public:
	EAbility                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityEventData_GetAbilityType) == 0x000001, "Wrong alignment on AbilityEventData_GetAbilityType");
static_assert(sizeof(AbilityEventData_GetAbilityType) == 0x000001, "Wrong size on AbilityEventData_GetAbilityType");
static_assert(offsetof(AbilityEventData_GetAbilityType, ReturnValue) == 0x000000, "Member 'AbilityEventData_GetAbilityType::ReturnValue' has a wrong offset!");

// Function Stalker2.AbilityEventData.GetActivationTag
// 0x0008 (0x0008 - 0x0000)
struct AbilityEventData_GetActivationTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityEventData_GetActivationTag) == 0x000004, "Wrong alignment on AbilityEventData_GetActivationTag");
static_assert(sizeof(AbilityEventData_GetActivationTag) == 0x000008, "Wrong size on AbilityEventData_GetActivationTag");
static_assert(offsetof(AbilityEventData_GetActivationTag, ReturnValue) == 0x000000, "Member 'AbilityEventData_GetActivationTag::ReturnValue' has a wrong offset!");

// Function Stalker2.SummonAbilityEventData.GetSummonLocations
// 0x0010 (0x0010 - 0x0000)
struct SummonAbilityEventData_GetSummonLocations final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonAbilityEventData_GetSummonLocations) == 0x000008, "Wrong alignment on SummonAbilityEventData_GetSummonLocations");
static_assert(sizeof(SummonAbilityEventData_GetSummonLocations) == 0x000010, "Wrong size on SummonAbilityEventData_GetSummonLocations");
static_assert(offsetof(SummonAbilityEventData_GetSummonLocations, ReturnValue) == 0x000000, "Member 'SummonAbilityEventData_GetSummonLocations::ReturnValue' has a wrong offset!");

// Function Stalker2.SummonAbilityEventData.ShouldSpawnEffects
// 0x0001 (0x0001 - 0x0000)
struct SummonAbilityEventData_ShouldSpawnEffects final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SummonAbilityEventData_ShouldSpawnEffects) == 0x000001, "Wrong alignment on SummonAbilityEventData_ShouldSpawnEffects");
static_assert(sizeof(SummonAbilityEventData_ShouldSpawnEffects) == 0x000001, "Wrong size on SummonAbilityEventData_ShouldSpawnEffects");
static_assert(offsetof(SummonAbilityEventData_ShouldSpawnEffects, ReturnValue) == 0x000000, "Member 'SummonAbilityEventData_ShouldSpawnEffects::ReturnValue' has a wrong offset!");

// Function Stalker2.GameplayEventListener.OnGameplayEvent
// 0x0010 (0x0010 - 0x0000)
struct GameplayEventListener_OnGameplayEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameplayEventData*               EventData;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayEventListener_OnGameplayEvent) == 0x000008, "Wrong alignment on GameplayEventListener_OnGameplayEvent");
static_assert(sizeof(GameplayEventListener_OnGameplayEvent) == 0x000010, "Wrong size on GameplayEventListener_OnGameplayEvent");
static_assert(offsetof(GameplayEventListener_OnGameplayEvent, EventTag) == 0x000000, "Member 'GameplayEventListener_OnGameplayEvent::EventTag' has a wrong offset!");
static_assert(offsetof(GameplayEventListener_OnGameplayEvent, EventData) == 0x000008, "Member 'GameplayEventListener_OnGameplayEvent::EventData' has a wrong offset!");

// Function Stalker2.GSCLocalPlayer.XFinishLoginProcess
// 0x0001 (0x0001 - 0x0000)
struct GSCLocalPlayer_XFinishLoginProcess final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GSCLocalPlayer_XFinishLoginProcess) == 0x000001, "Wrong alignment on GSCLocalPlayer_XFinishLoginProcess");
static_assert(sizeof(GSCLocalPlayer_XFinishLoginProcess) == 0x000001, "Wrong size on GSCLocalPlayer_XFinishLoginProcess");
static_assert(offsetof(GSCLocalPlayer_XFinishLoginProcess, bSuccess) == 0x000000, "Member 'GSCLocalPlayer_XFinishLoginProcess::bSuccess' has a wrong offset!");

// Function Stalker2.GuidInterface.GetGUID
// 0x0010 (0x0010 - 0x0000)
struct GuidInterface_GetGUID final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuidInterface_GetGUID) == 0x000004, "Wrong alignment on GuidInterface_GetGUID");
static_assert(sizeof(GuidInterface_GetGUID) == 0x000010, "Wrong size on GuidInterface_GetGUID");
static_assert(offsetof(GuidInterface_GetGUID, ReturnValue) == 0x000000, "Member 'GuidInterface_GetGUID::ReturnValue' has a wrong offset!");

// Function Stalker2.AsyncActionBase.ExecuteAction
// 0x0008 (0x0008 - 0x0000)
struct AsyncActionBase_ExecuteAction final
{
public:
	class UHintControllerBase*                    InHintController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionBase_ExecuteAction) == 0x000008, "Wrong alignment on AsyncActionBase_ExecuteAction");
static_assert(sizeof(AsyncActionBase_ExecuteAction) == 0x000008, "Wrong size on AsyncActionBase_ExecuteAction");
static_assert(offsetof(AsyncActionBase_ExecuteAction, InHintController) == 0x000000, "Member 'AsyncActionBase_ExecuteAction::InHintController' has a wrong offset!");

// Function Stalker2.SignalSenderComponent.Send
// 0x0008 (0x0008 - 0x0000)
struct SignalSenderComponent_Send final
{
public:
	class UObject*                                DataObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SignalSenderComponent_Send) == 0x000008, "Wrong alignment on SignalSenderComponent_Send");
static_assert(sizeof(SignalSenderComponent_Send) == 0x000008, "Wrong size on SignalSenderComponent_Send");
static_assert(offsetof(SignalSenderComponent_Send, DataObject) == 0x000000, "Member 'SignalSenderComponent_Send::DataObject' has a wrong offset!");

// Function Stalker2.HintKey.PlayHintAnimation
// 0x0001 (0x0001 - 0x0000)
struct HintKey_PlayHintAnimation final
{
public:
	bool                                          bSingleClick;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintKey_PlayHintAnimation) == 0x000001, "Wrong alignment on HintKey_PlayHintAnimation");
static_assert(sizeof(HintKey_PlayHintAnimation) == 0x000001, "Wrong size on HintKey_PlayHintAnimation");
static_assert(offsetof(HintKey_PlayHintAnimation, bSingleClick) == 0x000000, "Member 'HintKey_PlayHintAnimation::bSingleClick' has a wrong offset!");

// Function Stalker2.HintKey.SetHintKeyLockState
// 0x0002 (0x0002 - 0x0000)
struct HintKey_SetHintKeyLockState final
{
public:
	bool                                          ShowIcon;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKeyAvailable;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintKey_SetHintKeyLockState) == 0x000001, "Wrong alignment on HintKey_SetHintKeyLockState");
static_assert(sizeof(HintKey_SetHintKeyLockState) == 0x000002, "Wrong size on HintKey_SetHintKeyLockState");
static_assert(offsetof(HintKey_SetHintKeyLockState, ShowIcon) == 0x000000, "Member 'HintKey_SetHintKeyLockState::ShowIcon' has a wrong offset!");
static_assert(offsetof(HintKey_SetHintKeyLockState, IsKeyAvailable) == 0x000001, "Member 'HintKey_SetHintKeyLockState::IsKeyAvailable' has a wrong offset!");

// Function Stalker2.HintKey.SetHintState
// 0x0001 (0x0001 - 0x0000)
struct HintKey_SetHintState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintKey_SetHintState) == 0x000001, "Wrong alignment on HintKey_SetHintState");
static_assert(sizeof(HintKey_SetHintState) == 0x000001, "Wrong size on HintKey_SetHintState");
static_assert(offsetof(HintKey_SetHintState, IsActive) == 0x000000, "Member 'HintKey_SetHintState::IsActive' has a wrong offset!");

// Function Stalker2.HintKey.SetLowHealthState
// 0x0001 (0x0001 - 0x0000)
struct HintKey_SetLowHealthState final
{
public:
	bool                                          ShowIcon;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintKey_SetLowHealthState) == 0x000001, "Wrong alignment on HintKey_SetLowHealthState");
static_assert(sizeof(HintKey_SetLowHealthState) == 0x000001, "Wrong size on HintKey_SetLowHealthState");
static_assert(offsetof(HintKey_SetLowHealthState, ShowIcon) == 0x000000, "Member 'HintKey_SetLowHealthState::ShowIcon' has a wrong offset!");

// Function Stalker2.SpaceRestrictorsCheats.XRestrictorsShowResponse
// 0x0004 (0x0004 - 0x0000)
struct SpaceRestrictorsCheats_XRestrictorsShowResponse final
{
public:
	int32                                         UID;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpaceRestrictorsCheats_XRestrictorsShowResponse) == 0x000004, "Wrong alignment on SpaceRestrictorsCheats_XRestrictorsShowResponse");
static_assert(sizeof(SpaceRestrictorsCheats_XRestrictorsShowResponse) == 0x000004, "Wrong size on SpaceRestrictorsCheats_XRestrictorsShowResponse");
static_assert(offsetof(SpaceRestrictorsCheats_XRestrictorsShowResponse, UID) == 0x000000, "Member 'SpaceRestrictorsCheats_XRestrictorsShowResponse::UID' has a wrong offset!");

// Function Stalker2.HumanDefaultAnimCollection.GetDialogAnimations
// 0x0058 (0x0058 - 0x0000)
struct HumanDefaultAnimCollection_GetDialogAnimations final
{
public:
	class FName                                   DialogAnimationType;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ELookAtOwnerState, struct FAnimSequenceArray> ReturnValue;                                  // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanDefaultAnimCollection_GetDialogAnimations) == 0x000008, "Wrong alignment on HumanDefaultAnimCollection_GetDialogAnimations");
static_assert(sizeof(HumanDefaultAnimCollection_GetDialogAnimations) == 0x000058, "Wrong size on HumanDefaultAnimCollection_GetDialogAnimations");
static_assert(offsetof(HumanDefaultAnimCollection_GetDialogAnimations, DialogAnimationType) == 0x000000, "Member 'HumanDefaultAnimCollection_GetDialogAnimations::DialogAnimationType' has a wrong offset!");
static_assert(offsetof(HumanDefaultAnimCollection_GetDialogAnimations, ReturnValue) == 0x000008, "Member 'HumanDefaultAnimCollection_GetDialogAnimations::ReturnValue' has a wrong offset!");

// Function Stalker2.ImageWidget.SetBrushTextureInIconSettings
// 0x0008 (0x0008 - 0x0000)
struct ImageWidget_SetBrushTextureInIconSettings final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImageWidget_SetBrushTextureInIconSettings) == 0x000008, "Wrong alignment on ImageWidget_SetBrushTextureInIconSettings");
static_assert(sizeof(ImageWidget_SetBrushTextureInIconSettings) == 0x000008, "Wrong size on ImageWidget_SetBrushTextureInIconSettings");
static_assert(offsetof(ImageWidget_SetBrushTextureInIconSettings, Texture) == 0x000000, "Member 'ImageWidget_SetBrushTextureInIconSettings::Texture' has a wrong offset!");

// Function Stalker2.ImpulseComponent.ApplyImpulse
// 0x0028 (0x0028 - 0x0000)
struct ImpulseComponent_ApplyImpulse final
{
public:
	const class AActor*                           InTargetActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InImpulse;                                         // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMass;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImpulseComponent_ApplyImpulse) == 0x000008, "Wrong alignment on ImpulseComponent_ApplyImpulse");
static_assert(sizeof(ImpulseComponent_ApplyImpulse) == 0x000028, "Wrong size on ImpulseComponent_ApplyImpulse");
static_assert(offsetof(ImpulseComponent_ApplyImpulse, InTargetActor) == 0x000000, "Member 'ImpulseComponent_ApplyImpulse::InTargetActor' has a wrong offset!");
static_assert(offsetof(ImpulseComponent_ApplyImpulse, InImpulse) == 0x000008, "Member 'ImpulseComponent_ApplyImpulse::InImpulse' has a wrong offset!");
static_assert(offsetof(ImpulseComponent_ApplyImpulse, bIgnoreMass) == 0x000020, "Member 'ImpulseComponent_ApplyImpulse::bIgnoreMass' has a wrong offset!");

// Function Stalker2.InputDamageModifierComponent.SetIgnoreHitFeedback
// 0x0001 (0x0001 - 0x0000)
struct InputDamageModifierComponent_SetIgnoreHitFeedback final
{
public:
	bool                                          bInIgnore;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputDamageModifierComponent_SetIgnoreHitFeedback) == 0x000001, "Wrong alignment on InputDamageModifierComponent_SetIgnoreHitFeedback");
static_assert(sizeof(InputDamageModifierComponent_SetIgnoreHitFeedback) == 0x000001, "Wrong size on InputDamageModifierComponent_SetIgnoreHitFeedback");
static_assert(offsetof(InputDamageModifierComponent_SetIgnoreHitFeedback, bInIgnore) == 0x000000, "Member 'InputDamageModifierComponent_SetIgnoreHitFeedback::bInIgnore' has a wrong offset!");

// Function Stalker2.InteractableItemContainer.OnHit
// 0x0110 (0x0110 - 0x0000)
struct InteractableItemContainer_OnHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableItemContainer_OnHit) == 0x000008, "Wrong alignment on InteractableItemContainer_OnHit");
static_assert(sizeof(InteractableItemContainer_OnHit) == 0x000110, "Wrong size on InteractableItemContainer_OnHit");
static_assert(offsetof(InteractableItemContainer_OnHit, SelfActor) == 0x000000, "Member 'InteractableItemContainer_OnHit::SelfActor' has a wrong offset!");
static_assert(offsetof(InteractableItemContainer_OnHit, OtherActor) == 0x000008, "Member 'InteractableItemContainer_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(InteractableItemContainer_OnHit, NormalImpulse) == 0x000010, "Member 'InteractableItemContainer_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(InteractableItemContainer_OnHit, Hit) == 0x000028, "Member 'InteractableItemContainer_OnHit::Hit' has a wrong offset!");

// Function Stalker2.InteractableMonitorSection.OnActivationSignalReceived
// 0x0008 (0x0008 - 0x0000)
struct InteractableMonitorSection_OnActivationSignalReceived final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableMonitorSection_OnActivationSignalReceived) == 0x000008, "Wrong alignment on InteractableMonitorSection_OnActivationSignalReceived");
static_assert(sizeof(InteractableMonitorSection_OnActivationSignalReceived) == 0x000008, "Wrong size on InteractableMonitorSection_OnActivationSignalReceived");
static_assert(offsetof(InteractableMonitorSection_OnActivationSignalReceived, InObject) == 0x000000, "Member 'InteractableMonitorSection_OnActivationSignalReceived::InObject' has a wrong offset!");

// Function Stalker2.InteractableMonitorSection.OnDeactivationSignalReceived
// 0x0008 (0x0008 - 0x0000)
struct InteractableMonitorSection_OnDeactivationSignalReceived final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableMonitorSection_OnDeactivationSignalReceived) == 0x000008, "Wrong alignment on InteractableMonitorSection_OnDeactivationSignalReceived");
static_assert(sizeof(InteractableMonitorSection_OnDeactivationSignalReceived) == 0x000008, "Wrong size on InteractableMonitorSection_OnDeactivationSignalReceived");
static_assert(offsetof(InteractableMonitorSection_OnDeactivationSignalReceived, InObject) == 0x000000, "Member 'InteractableMonitorSection_OnDeactivationSignalReceived::InObject' has a wrong offset!");

// Function Stalker2.InteractableMonitorSection.OnDestructionSignalReceived
// 0x0008 (0x0008 - 0x0000)
struct InteractableMonitorSection_OnDestructionSignalReceived final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractableMonitorSection_OnDestructionSignalReceived) == 0x000008, "Wrong alignment on InteractableMonitorSection_OnDestructionSignalReceived");
static_assert(sizeof(InteractableMonitorSection_OnDestructionSignalReceived) == 0x000008, "Wrong size on InteractableMonitorSection_OnDestructionSignalReceived");
static_assert(offsetof(InteractableMonitorSection_OnDestructionSignalReceived, InObject) == 0x000000, "Member 'InteractableMonitorSection_OnDestructionSignalReceived::InObject' has a wrong offset!");

// Function Stalker2.InteractPaintInterface.OnPaintSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct InteractPaintInterface_OnPaintSettingsChanged final
{
public:
	bool                                          bInteractPaint;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractPaintInterface_OnPaintSettingsChanged) == 0x000001, "Wrong alignment on InteractPaintInterface_OnPaintSettingsChanged");
static_assert(sizeof(InteractPaintInterface_OnPaintSettingsChanged) == 0x000001, "Wrong size on InteractPaintInterface_OnPaintSettingsChanged");
static_assert(offsetof(InteractPaintInterface_OnPaintSettingsChanged, bInteractPaint) == 0x000000, "Member 'InteractPaintInterface_OnPaintSettingsChanged::bInteractPaint' has a wrong offset!");

// Function Stalker2.InventoryNew.OnDragDropCanceled
// 0x0010 (0x0010 - 0x0000)
struct InventoryNew_OnDragDropCanceled final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnDragDropCanceled) == 0x000008, "Wrong alignment on InventoryNew_OnDragDropCanceled");
static_assert(sizeof(InventoryNew_OnDragDropCanceled) == 0x000010, "Wrong size on InventoryNew_OnDragDropCanceled");
static_assert(offsetof(InventoryNew_OnDragDropCanceled, Pos) == 0x000000, "Member 'InventoryNew_OnDragDropCanceled::Pos' has a wrong offset!");

// Function Stalker2.InventoryNew.OnDropToEmptyPlace
// 0x0010 (0x0010 - 0x0000)
struct InventoryNew_OnDropToEmptyPlace final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnDropToEmptyPlace) == 0x000008, "Wrong alignment on InventoryNew_OnDropToEmptyPlace");
static_assert(sizeof(InventoryNew_OnDropToEmptyPlace) == 0x000010, "Wrong size on InventoryNew_OnDropToEmptyPlace");
static_assert(offsetof(InventoryNew_OnDropToEmptyPlace, Pos) == 0x000000, "Member 'InventoryNew_OnDropToEmptyPlace::Pos' has a wrong offset!");

// Function Stalker2.InventoryNew.OnExitClick
// 0x0008 (0x0008 - 0x0000)
struct InventoryNew_OnExitClick final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnExitClick) == 0x000004, "Wrong alignment on InventoryNew_OnExitClick");
static_assert(sizeof(InventoryNew_OnExitClick) == 0x000008, "Wrong size on InventoryNew_OnExitClick");
static_assert(offsetof(InventoryNew_OnExitClick, ButtonId) == 0x000000, "Member 'InventoryNew_OnExitClick::ButtonId' has a wrong offset!");

// Function Stalker2.InventoryNew.OnRejectDrop
// 0x0010 (0x0010 - 0x0000)
struct InventoryNew_OnRejectDrop final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnRejectDrop) == 0x000008, "Wrong alignment on InventoryNew_OnRejectDrop");
static_assert(sizeof(InventoryNew_OnRejectDrop) == 0x000010, "Wrong size on InventoryNew_OnRejectDrop");
static_assert(offsetof(InventoryNew_OnRejectDrop, Pos) == 0x000000, "Member 'InventoryNew_OnRejectDrop::Pos' has a wrong offset!");

// Function Stalker2.InventoryNew.OnRightClickMenuItemHover
// 0x0048 (0x0048 - 0x0000)
struct InventoryNew_OnRightClickMenuItemHover final
{
public:
	struct FRightClickMenuItemData                ItemData;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInHover;                                          // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryNew_OnRightClickMenuItemHover) == 0x000008, "Wrong alignment on InventoryNew_OnRightClickMenuItemHover");
static_assert(sizeof(InventoryNew_OnRightClickMenuItemHover) == 0x000048, "Wrong size on InventoryNew_OnRightClickMenuItemHover");
static_assert(offsetof(InventoryNew_OnRightClickMenuItemHover, ItemData) == 0x000000, "Member 'InventoryNew_OnRightClickMenuItemHover::ItemData' has a wrong offset!");
static_assert(offsetof(InventoryNew_OnRightClickMenuItemHover, bInHover) == 0x000040, "Member 'InventoryNew_OnRightClickMenuItemHover::bInHover' has a wrong offset!");

// Function Stalker2.InventoryNew.OnRightClickMenuItemSelected
// 0x0040 (0x0040 - 0x0000)
struct InventoryNew_OnRightClickMenuItemSelected final
{
public:
	struct FRightClickMenuItemData                ItemData;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnRightClickMenuItemSelected) == 0x000008, "Wrong alignment on InventoryNew_OnRightClickMenuItemSelected");
static_assert(sizeof(InventoryNew_OnRightClickMenuItemSelected) == 0x000040, "Wrong size on InventoryNew_OnRightClickMenuItemSelected");
static_assert(offsetof(InventoryNew_OnRightClickMenuItemSelected, ItemData) == 0x000000, "Member 'InventoryNew_OnRightClickMenuItemSelected::ItemData' has a wrong offset!");

// Function Stalker2.InventoryNew.OnSplitConfirmed
// 0x0008 (0x0008 - 0x0000)
struct InventoryNew_OnSplitConfirmed final
{
public:
	int32                                         ItemAmountSplitForDrop;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemUID                               ItemUID;                                           // 0x0004(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnSplitConfirmed) == 0x000004, "Wrong alignment on InventoryNew_OnSplitConfirmed");
static_assert(sizeof(InventoryNew_OnSplitConfirmed) == 0x000008, "Wrong size on InventoryNew_OnSplitConfirmed");
static_assert(offsetof(InventoryNew_OnSplitConfirmed, ItemAmountSplitForDrop) == 0x000000, "Member 'InventoryNew_OnSplitConfirmed::ItemAmountSplitForDrop' has a wrong offset!");
static_assert(offsetof(InventoryNew_OnSplitConfirmed, ItemUID) == 0x000004, "Member 'InventoryNew_OnSplitConfirmed::ItemUID' has a wrong offset!");

// Function Stalker2.InventoryNew.OnVisibilityChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct InventoryNew_OnVisibilityChangedEvent final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryNew_OnVisibilityChangedEvent) == 0x000001, "Wrong alignment on InventoryNew_OnVisibilityChangedEvent");
static_assert(sizeof(InventoryNew_OnVisibilityChangedEvent) == 0x000001, "Wrong size on InventoryNew_OnVisibilityChangedEvent");
static_assert(offsetof(InventoryNew_OnVisibilityChangedEvent, NewVisibility) == 0x000000, "Member 'InventoryNew_OnVisibilityChangedEvent::NewVisibility' has a wrong offset!");

// Function Stalker2.ItemAppearanceComponent.OnShotSoundStart
// 0x0010 (0x0010 - 0x0000)
struct ItemAppearanceComponent_OnShotSoundStart final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAppearanceComponent_OnShotSoundStart) == 0x000008, "Wrong alignment on ItemAppearanceComponent_OnShotSoundStart");
static_assert(sizeof(ItemAppearanceComponent_OnShotSoundStart) == 0x000010, "Wrong size on ItemAppearanceComponent_OnShotSoundStart");
static_assert(offsetof(ItemAppearanceComponent_OnShotSoundStart, CallbackType) == 0x000000, "Member 'ItemAppearanceComponent_OnShotSoundStart::CallbackType' has a wrong offset!");
static_assert(offsetof(ItemAppearanceComponent_OnShotSoundStart, CallbackInfo) == 0x000008, "Member 'ItemAppearanceComponent_OnShotSoundStart::CallbackInfo' has a wrong offset!");

// Function Stalker2.ItemSelectorView.GetSlotsBP
// 0x0010 (0x0010 - 0x0000)
struct ItemSelectorView_GetSlotsBP final
{
public:
	TArray<class UItemSelectorWeaponSlot*>        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSelectorView_GetSlotsBP) == 0x000008, "Wrong alignment on ItemSelectorView_GetSlotsBP");
static_assert(sizeof(ItemSelectorView_GetSlotsBP) == 0x000010, "Wrong size on ItemSelectorView_GetSlotsBP");
static_assert(offsetof(ItemSelectorView_GetSlotsBP, ReturnValue) == 0x000000, "Member 'ItemSelectorView_GetSlotsBP::ReturnValue' has a wrong offset!");

// Function Stalker2.ItemSelectorWeaponSlot.GetHoveredWidgets
// 0x0010 (0x0010 - 0x0000)
struct ItemSelectorWeaponSlot_GetHoveredWidgets final
{
public:
	TArray<class UUserWidget*>                    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSelectorWeaponSlot_GetHoveredWidgets) == 0x000008, "Wrong alignment on ItemSelectorWeaponSlot_GetHoveredWidgets");
static_assert(sizeof(ItemSelectorWeaponSlot_GetHoveredWidgets) == 0x000010, "Wrong size on ItemSelectorWeaponSlot_GetHoveredWidgets");
static_assert(offsetof(ItemSelectorWeaponSlot_GetHoveredWidgets, ReturnValue) == 0x000000, "Member 'ItemSelectorWeaponSlot_GetHoveredWidgets::ReturnValue' has a wrong offset!");

// Function Stalker2.ItemSelectorWeaponSlot.IsAlternativeSlot
// 0x0001 (0x0001 - 0x0000)
struct ItemSelectorWeaponSlot_IsAlternativeSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSelectorWeaponSlot_IsAlternativeSlot) == 0x000001, "Wrong alignment on ItemSelectorWeaponSlot_IsAlternativeSlot");
static_assert(sizeof(ItemSelectorWeaponSlot_IsAlternativeSlot) == 0x000001, "Wrong size on ItemSelectorWeaponSlot_IsAlternativeSlot");
static_assert(offsetof(ItemSelectorWeaponSlot_IsAlternativeSlot, ReturnValue) == 0x000000, "Member 'ItemSelectorWeaponSlot_IsAlternativeSlot::ReturnValue' has a wrong offset!");

// Function Stalker2.ItemSelectorWeaponSlot.IsGrenadeSlot
// 0x0001 (0x0001 - 0x0000)
struct ItemSelectorWeaponSlot_IsGrenadeSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSelectorWeaponSlot_IsGrenadeSlot) == 0x000001, "Wrong alignment on ItemSelectorWeaponSlot_IsGrenadeSlot");
static_assert(sizeof(ItemSelectorWeaponSlot_IsGrenadeSlot) == 0x000001, "Wrong size on ItemSelectorWeaponSlot_IsGrenadeSlot");
static_assert(offsetof(ItemSelectorWeaponSlot_IsGrenadeSlot, ReturnValue) == 0x000000, "Member 'ItemSelectorWeaponSlot_IsGrenadeSlot::ReturnValue' has a wrong offset!");

// Function Stalker2.ItemSelectorWeaponSlot.IsWeaponSlot
// 0x0001 (0x0001 - 0x0000)
struct ItemSelectorWeaponSlot_IsWeaponSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSelectorWeaponSlot_IsWeaponSlot) == 0x000001, "Wrong alignment on ItemSelectorWeaponSlot_IsWeaponSlot");
static_assert(sizeof(ItemSelectorWeaponSlot_IsWeaponSlot) == 0x000001, "Wrong size on ItemSelectorWeaponSlot_IsWeaponSlot");
static_assert(offsetof(ItemSelectorWeaponSlot_IsWeaponSlot, ReturnValue) == 0x000000, "Member 'ItemSelectorWeaponSlot_IsWeaponSlot::ReturnValue' has a wrong offset!");

// Function Stalker2.ItemUsageComponent.AddAffectedComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemUsageComponent_AddAffectedComponent final
{
public:
	class UInteractionComponent*                  InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUsageComponent_AddAffectedComponent) == 0x000008, "Wrong alignment on ItemUsageComponent_AddAffectedComponent");
static_assert(sizeof(ItemUsageComponent_AddAffectedComponent) == 0x000008, "Wrong size on ItemUsageComponent_AddAffectedComponent");
static_assert(offsetof(ItemUsageComponent_AddAffectedComponent, InteractionComponent) == 0x000000, "Member 'ItemUsageComponent_AddAffectedComponent::InteractionComponent' has a wrong offset!");

// Function Stalker2.ItemUsageComponent.RemoveAffectedComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemUsageComponent_RemoveAffectedComponent final
{
public:
	class UInteractionComponent*                  InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUsageComponent_RemoveAffectedComponent) == 0x000008, "Wrong alignment on ItemUsageComponent_RemoveAffectedComponent");
static_assert(sizeof(ItemUsageComponent_RemoveAffectedComponent) == 0x000008, "Wrong size on ItemUsageComponent_RemoveAffectedComponent");
static_assert(offsetof(ItemUsageComponent_RemoveAffectedComponent, InteractionComponent) == 0x000000, "Member 'ItemUsageComponent_RemoveAffectedComponent::InteractionComponent' has a wrong offset!");

// Function Stalker2.ItemUsageComponent.HasAnyItemNeededToInteract
// 0x0001 (0x0001 - 0x0000)
struct ItemUsageComponent_HasAnyItemNeededToInteract final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUsageComponent_HasAnyItemNeededToInteract) == 0x000001, "Wrong alignment on ItemUsageComponent_HasAnyItemNeededToInteract");
static_assert(sizeof(ItemUsageComponent_HasAnyItemNeededToInteract) == 0x000001, "Wrong size on ItemUsageComponent_HasAnyItemNeededToInteract");
static_assert(offsetof(ItemUsageComponent_HasAnyItemNeededToInteract, ReturnValue) == 0x000000, "Member 'ItemUsageComponent_HasAnyItemNeededToInteract::ReturnValue' has a wrong offset!");

// Function Stalker2.ItemUsageComponent.HasRequiredItems
// 0x0001 (0x0001 - 0x0000)
struct ItemUsageComponent_HasRequiredItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUsageComponent_HasRequiredItems) == 0x000001, "Wrong alignment on ItemUsageComponent_HasRequiredItems");
static_assert(sizeof(ItemUsageComponent_HasRequiredItems) == 0x000001, "Wrong size on ItemUsageComponent_HasRequiredItems");
static_assert(offsetof(ItemUsageComponent_HasRequiredItems, ReturnValue) == 0x000000, "Member 'ItemUsageComponent_HasRequiredItems::ReturnValue' has a wrong offset!");

// Function Stalker2.QuickPanel.OnQuickSlotMouseEnter
// 0x0008 (0x0008 - 0x0000)
struct QuickPanel_OnQuickSlotMouseEnter final
{
public:
	class UQuickSlot*                             ItemWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuickPanel_OnQuickSlotMouseEnter) == 0x000008, "Wrong alignment on QuickPanel_OnQuickSlotMouseEnter");
static_assert(sizeof(QuickPanel_OnQuickSlotMouseEnter) == 0x000008, "Wrong size on QuickPanel_OnQuickSlotMouseEnter");
static_assert(offsetof(QuickPanel_OnQuickSlotMouseEnter, ItemWidget) == 0x000000, "Member 'QuickPanel_OnQuickSlotMouseEnter::ItemWidget' has a wrong offset!");

// Function Stalker2.QuickPanel.OnQuickSlotMouseLeave
// 0x0008 (0x0008 - 0x0000)
struct QuickPanel_OnQuickSlotMouseLeave final
{
public:
	class UQuickSlot*                             HoveredWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuickPanel_OnQuickSlotMouseLeave) == 0x000008, "Wrong alignment on QuickPanel_OnQuickSlotMouseLeave");
static_assert(sizeof(QuickPanel_OnQuickSlotMouseLeave) == 0x000008, "Wrong size on QuickPanel_OnQuickSlotMouseLeave");
static_assert(offsetof(QuickPanel_OnQuickSlotMouseLeave, HoveredWidget) == 0x000000, "Member 'QuickPanel_OnQuickSlotMouseLeave::HoveredWidget' has a wrong offset!");

// Function Stalker2.QuickPanel.PlayShouldUseAnimationIfRequired
// 0x0002 (0x0002 - 0x0000)
struct QuickPanel_PlayShouldUseAnimationIfRequired final
{
public:
	ESortGroup                                    InSortGroup;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuickPanel_PlayShouldUseAnimationIfRequired) == 0x000001, "Wrong alignment on QuickPanel_PlayShouldUseAnimationIfRequired");
static_assert(sizeof(QuickPanel_PlayShouldUseAnimationIfRequired) == 0x000002, "Wrong size on QuickPanel_PlayShouldUseAnimationIfRequired");
static_assert(offsetof(QuickPanel_PlayShouldUseAnimationIfRequired, InSortGroup) == 0x000000, "Member 'QuickPanel_PlayShouldUseAnimationIfRequired::InSortGroup' has a wrong offset!");
static_assert(offsetof(QuickPanel_PlayShouldUseAnimationIfRequired, ReturnValue) == 0x000001, "Member 'QuickPanel_PlayShouldUseAnimationIfRequired::ReturnValue' has a wrong offset!");

// Function Stalker2.JournalPage.ClickButtonQuest
// 0x0008 (0x0008 - 0x0000)
struct JournalPage_ClickButtonQuest final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JournalPage_ClickButtonQuest) == 0x000004, "Wrong alignment on JournalPage_ClickButtonQuest");
static_assert(sizeof(JournalPage_ClickButtonQuest) == 0x000008, "Wrong size on JournalPage_ClickButtonQuest");
static_assert(offsetof(JournalPage_ClickButtonQuest, ButtonId) == 0x000000, "Member 'JournalPage_ClickButtonQuest::ButtonId' has a wrong offset!");

// Function Stalker2.JournalPage.ShowDetails
// 0x0001 (0x0001 - 0x0000)
struct JournalPage_ShowDetails final
{
public:
	bool                                          bEmpty;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JournalPage_ShowDetails) == 0x000001, "Wrong alignment on JournalPage_ShowDetails");
static_assert(sizeof(JournalPage_ShowDetails) == 0x000001, "Wrong size on JournalPage_ShowDetails");
static_assert(offsetof(JournalPage_ShowDetails, bEmpty) == 0x000000, "Member 'JournalPage_ShowDetails::bEmpty' has a wrong offset!");

// Function Stalker2.JournalPage.UpdateButton
// 0x0004 (0x0004 - 0x0000)
struct JournalPage_UpdateButton final
{
public:
	int32                                         IndexUpdateButton;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JournalPage_UpdateButton) == 0x000004, "Wrong alignment on JournalPage_UpdateButton");
static_assert(sizeof(JournalPage_UpdateButton) == 0x000004, "Wrong size on JournalPage_UpdateButton");
static_assert(offsetof(JournalPage_UpdateButton, IndexUpdateButton) == 0x000000, "Member 'JournalPage_UpdateButton::IndexUpdateButton' has a wrong offset!");

// Function Stalker2.JournalPage.UpdateHoverDetailsElement
// 0x0002 (0x0002 - 0x0000)
struct JournalPage_UpdateHoverDetailsElement final
{
public:
	bool                                          bHovered;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetailsElementType                           ElementType;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JournalPage_UpdateHoverDetailsElement) == 0x000001, "Wrong alignment on JournalPage_UpdateHoverDetailsElement");
static_assert(sizeof(JournalPage_UpdateHoverDetailsElement) == 0x000002, "Wrong size on JournalPage_UpdateHoverDetailsElement");
static_assert(offsetof(JournalPage_UpdateHoverDetailsElement, bHovered) == 0x000000, "Member 'JournalPage_UpdateHoverDetailsElement::bHovered' has a wrong offset!");
static_assert(offsetof(JournalPage_UpdateHoverDetailsElement, ElementType) == 0x000001, "Member 'JournalPage_UpdateHoverDetailsElement::ElementType' has a wrong offset!");

// Function Stalker2.VolumeForEffects.ActivateDelegateHandle
// 0x0008 (0x0008 - 0x0000)
struct VolumeForEffects_ActivateDelegateHandle final
{
public:
	class UObject*                                DataObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VolumeForEffects_ActivateDelegateHandle) == 0x000008, "Wrong alignment on VolumeForEffects_ActivateDelegateHandle");
static_assert(sizeof(VolumeForEffects_ActivateDelegateHandle) == 0x000008, "Wrong size on VolumeForEffects_ActivateDelegateHandle");
static_assert(offsetof(VolumeForEffects_ActivateDelegateHandle, DataObject) == 0x000000, "Member 'VolumeForEffects_ActivateDelegateHandle::DataObject' has a wrong offset!");

// Function Stalker2.VolumeForEffects.DeactivateDelegateHandle
// 0x0008 (0x0008 - 0x0000)
struct VolumeForEffects_DeactivateDelegateHandle final
{
public:
	class UObject*                                DataObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VolumeForEffects_DeactivateDelegateHandle) == 0x000008, "Wrong alignment on VolumeForEffects_DeactivateDelegateHandle");
static_assert(sizeof(VolumeForEffects_DeactivateDelegateHandle) == 0x000008, "Wrong size on VolumeForEffects_DeactivateDelegateHandle");
static_assert(offsetof(VolumeForEffects_DeactivateDelegateHandle, DataObject) == 0x000000, "Member 'VolumeForEffects_DeactivateDelegateHandle::DataObject' has a wrong offset!");

// Function Stalker2.VolumeForEffects.SetDisabled
// 0x0001 (0x0001 - 0x0000)
struct VolumeForEffects_SetDisabled final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VolumeForEffects_SetDisabled) == 0x000001, "Wrong alignment on VolumeForEffects_SetDisabled");
static_assert(sizeof(VolumeForEffects_SetDisabled) == 0x000001, "Wrong size on VolumeForEffects_SetDisabled");
static_assert(offsetof(VolumeForEffects_SetDisabled, bDisabled) == 0x000000, "Member 'VolumeForEffects_SetDisabled::bDisabled' has a wrong offset!");

// Function Stalker2.LadderComponent.SetLadderHidden
// 0x0001 (0x0001 - 0x0000)
struct LadderComponent_SetLadderHidden final
{
public:
	bool                                          InbLadderHidden;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LadderComponent_SetLadderHidden) == 0x000001, "Wrong alignment on LadderComponent_SetLadderHidden");
static_assert(sizeof(LadderComponent_SetLadderHidden) == 0x000001, "Wrong size on LadderComponent_SetLadderHidden");
static_assert(offsetof(LadderComponent_SetLadderHidden, InbLadderHidden) == 0x000000, "Member 'LadderComponent_SetLadderHidden::InbLadderHidden' has a wrong offset!");

// Function Stalker2.LadderComponent.SetTopBlocked
// 0x0001 (0x0001 - 0x0000)
struct LadderComponent_SetTopBlocked final
{
public:
	bool                                          InbTopBlocked;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LadderComponent_SetTopBlocked) == 0x000001, "Wrong alignment on LadderComponent_SetTopBlocked");
static_assert(sizeof(LadderComponent_SetTopBlocked) == 0x000001, "Wrong size on LadderComponent_SetTopBlocked");
static_assert(offsetof(LadderComponent_SetTopBlocked, InbTopBlocked) == 0x000000, "Member 'LadderComponent_SetTopBlocked::InbTopBlocked' has a wrong offset!");

// Function Stalker2.LadderComponent.IsLadderHidden
// 0x0001 (0x0001 - 0x0000)
struct LadderComponent_IsLadderHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LadderComponent_IsLadderHidden) == 0x000001, "Wrong alignment on LadderComponent_IsLadderHidden");
static_assert(sizeof(LadderComponent_IsLadderHidden) == 0x000001, "Wrong size on LadderComponent_IsLadderHidden");
static_assert(offsetof(LadderComponent_IsLadderHidden, ReturnValue) == 0x000000, "Member 'LadderComponent_IsLadderHidden::ReturnValue' has a wrong offset!");

// Function Stalker2.LadderComponent.IsTopBlocked
// 0x0001 (0x0001 - 0x0000)
struct LadderComponent_IsTopBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LadderComponent_IsTopBlocked) == 0x000001, "Wrong alignment on LadderComponent_IsTopBlocked");
static_assert(sizeof(LadderComponent_IsTopBlocked) == 0x000001, "Wrong size on LadderComponent_IsTopBlocked");
static_assert(offsetof(LadderComponent_IsTopBlocked, ReturnValue) == 0x000000, "Member 'LadderComponent_IsTopBlocked::ReturnValue' has a wrong offset!");

// Function Stalker2.LavaLampAnomaly.OnFollowPositionChanged
// 0x0018 (0x0018 - 0x0000)
struct LavaLampAnomaly_OnFollowPositionChanged final
{
public:
	struct FVector                                FollowPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LavaLampAnomaly_OnFollowPositionChanged) == 0x000008, "Wrong alignment on LavaLampAnomaly_OnFollowPositionChanged");
static_assert(sizeof(LavaLampAnomaly_OnFollowPositionChanged) == 0x000018, "Wrong size on LavaLampAnomaly_OnFollowPositionChanged");
static_assert(offsetof(LavaLampAnomaly_OnFollowPositionChanged, FollowPosition) == 0x000000, "Member 'LavaLampAnomaly_OnFollowPositionChanged::FollowPosition' has a wrong offset!");

// Function Stalker2.LavaLampAnomaly.OnLavaCollision
// 0x0038 (0x0038 - 0x0000)
struct LavaLampAnomaly_OnLavaCollision final
{
public:
	struct FBasicParticleData                     BasicParticleData;                                 // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LavaLampAnomaly_OnLavaCollision) == 0x000008, "Wrong alignment on LavaLampAnomaly_OnLavaCollision");
static_assert(sizeof(LavaLampAnomaly_OnLavaCollision) == 0x000038, "Wrong size on LavaLampAnomaly_OnLavaCollision");
static_assert(offsetof(LavaLampAnomaly_OnLavaCollision, BasicParticleData) == 0x000000, "Member 'LavaLampAnomaly_OnLavaCollision::BasicParticleData' has a wrong offset!");

// Function Stalker2.LavaLampAnomaly.OnLavaStaticObjectCollision
// 0x0038 (0x0038 - 0x0000)
struct LavaLampAnomaly_OnLavaStaticObjectCollision final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalDirection;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LavaLampAnomaly_OnLavaStaticObjectCollision) == 0x000008, "Wrong alignment on LavaLampAnomaly_OnLavaStaticObjectCollision");
static_assert(sizeof(LavaLampAnomaly_OnLavaStaticObjectCollision) == 0x000038, "Wrong size on LavaLampAnomaly_OnLavaStaticObjectCollision");
static_assert(offsetof(LavaLampAnomaly_OnLavaStaticObjectCollision, Location) == 0x000000, "Member 'LavaLampAnomaly_OnLavaStaticObjectCollision::Location' has a wrong offset!");
static_assert(offsetof(LavaLampAnomaly_OnLavaStaticObjectCollision, NormalDirection) == 0x000018, "Member 'LavaLampAnomaly_OnLavaStaticObjectCollision::NormalDirection' has a wrong offset!");
static_assert(offsetof(LavaLampAnomaly_OnLavaStaticObjectCollision, Radius) == 0x000030, "Member 'LavaLampAnomaly_OnLavaStaticObjectCollision::Radius' has a wrong offset!");

// Function Stalker2.LightBulbComponent.SetAutoLightOnNight
// 0x0001 (0x0001 - 0x0000)
struct LightBulbComponent_SetAutoLightOnNight final
{
public:
	bool                                          bInAutoLightOnNight;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightBulbComponent_SetAutoLightOnNight) == 0x000001, "Wrong alignment on LightBulbComponent_SetAutoLightOnNight");
static_assert(sizeof(LightBulbComponent_SetAutoLightOnNight) == 0x000001, "Wrong size on LightBulbComponent_SetAutoLightOnNight");
static_assert(offsetof(LightBulbComponent_SetAutoLightOnNight, bInAutoLightOnNight) == 0x000000, "Member 'LightBulbComponent_SetAutoLightOnNight::bInAutoLightOnNight' has a wrong offset!");

// Function Stalker2.LightBulbComponent.SetFlicker
// 0x0001 (0x0001 - 0x0000)
struct LightBulbComponent_SetFlicker final
{
public:
	bool                                          bInFlicker;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightBulbComponent_SetFlicker) == 0x000001, "Wrong alignment on LightBulbComponent_SetFlicker");
static_assert(sizeof(LightBulbComponent_SetFlicker) == 0x000001, "Wrong size on LightBulbComponent_SetFlicker");
static_assert(offsetof(LightBulbComponent_SetFlicker, bInFlicker) == 0x000000, "Member 'LightBulbComponent_SetFlicker::bInFlicker' has a wrong offset!");

// Function Stalker2.LightBulbComponent.IsAutoLightOnNight
// 0x0001 (0x0001 - 0x0000)
struct LightBulbComponent_IsAutoLightOnNight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightBulbComponent_IsAutoLightOnNight) == 0x000001, "Wrong alignment on LightBulbComponent_IsAutoLightOnNight");
static_assert(sizeof(LightBulbComponent_IsAutoLightOnNight) == 0x000001, "Wrong size on LightBulbComponent_IsAutoLightOnNight");
static_assert(offsetof(LightBulbComponent_IsAutoLightOnNight, ReturnValue) == 0x000000, "Member 'LightBulbComponent_IsAutoLightOnNight::ReturnValue' has a wrong offset!");

// Function Stalker2.LightBulbComponent.IsFlicker
// 0x0001 (0x0001 - 0x0000)
struct LightBulbComponent_IsFlicker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightBulbComponent_IsFlicker) == 0x000001, "Wrong alignment on LightBulbComponent_IsFlicker");
static_assert(sizeof(LightBulbComponent_IsFlicker) == 0x000001, "Wrong size on LightBulbComponent_IsFlicker");
static_assert(offsetof(LightBulbComponent_IsFlicker, ReturnValue) == 0x000000, "Member 'LightBulbComponent_IsFlicker::ReturnValue' has a wrong offset!");

// Function Stalker2.LocalizedImage.ForceLoadImage
// 0x0030 (0x0030 - 0x0000)
struct LocalizedImage_ForceLoadImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              SoftImage;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalizedImage_ForceLoadImage) == 0x000008, "Wrong alignment on LocalizedImage_ForceLoadImage");
static_assert(sizeof(LocalizedImage_ForceLoadImage) == 0x000030, "Wrong size on LocalizedImage_ForceLoadImage");
static_assert(offsetof(LocalizedImage_ForceLoadImage, SoftImage) == 0x000000, "Member 'LocalizedImage_ForceLoadImage::SoftImage' has a wrong offset!");

// Function Stalker2.PDANotesDetails.PlayNoteAudio
// 0x0001 (0x0001 - 0x0000)
struct PDANotesDetails_PlayNoteAudio final
{
public:
	bool                                          bStart;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDANotesDetails_PlayNoteAudio) == 0x000001, "Wrong alignment on PDANotesDetails_PlayNoteAudio");
static_assert(sizeof(PDANotesDetails_PlayNoteAudio) == 0x000001, "Wrong size on PDANotesDetails_PlayNoteAudio");
static_assert(offsetof(PDANotesDetails_PlayNoteAudio, bStart) == 0x000000, "Member 'PDANotesDetails_PlayNoteAudio::bStart' has a wrong offset!");

// Function Stalker2.MenuMainBackgroundVideo.PlayVideo
// 0x0008 (0x0008 - 0x0000)
struct MenuMainBackgroundVideo_PlayVideo final
{
public:
	class UMediaSource*                           VideoToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuMainBackgroundVideo_PlayVideo) == 0x000008, "Wrong alignment on MenuMainBackgroundVideo_PlayVideo");
static_assert(sizeof(MenuMainBackgroundVideo_PlayVideo) == 0x000008, "Wrong size on MenuMainBackgroundVideo_PlayVideo");
static_assert(offsetof(MenuMainBackgroundVideo_PlayVideo, VideoToPlay) == 0x000000, "Member 'MenuMainBackgroundVideo_PlayVideo::VideoToPlay' has a wrong offset!");

// Function Stalker2.MenuNavigationPanelBase.OnButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct MenuNavigationPanelBase_OnButtonPressed final
{
public:
	class USettingsNavigationButton*              PressedButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuNavigationPanelBase_OnButtonPressed) == 0x000008, "Wrong alignment on MenuNavigationPanelBase_OnButtonPressed");
static_assert(sizeof(MenuNavigationPanelBase_OnButtonPressed) == 0x000008, "Wrong size on MenuNavigationPanelBase_OnButtonPressed");
static_assert(offsetof(MenuNavigationPanelBase_OnButtonPressed, PressedButton) == 0x000000, "Member 'MenuNavigationPanelBase_OnButtonPressed::PressedButton' has a wrong offset!");

// Function Stalker2.TopazScannerComponent.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct TopazScannerComponent_GetCurrentState final
{
public:
	ETopazScannerState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TopazScannerComponent_GetCurrentState) == 0x000001, "Wrong alignment on TopazScannerComponent_GetCurrentState");
static_assert(sizeof(TopazScannerComponent_GetCurrentState) == 0x000001, "Wrong size on TopazScannerComponent_GetCurrentState");
static_assert(offsetof(TopazScannerComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'TopazScannerComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Stalker2.TopazScannerComponent.GetStateStartTimestamp
// 0x0004 (0x0004 - 0x0000)
struct TopazScannerComponent_GetStateStartTimestamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TopazScannerComponent_GetStateStartTimestamp) == 0x000004, "Wrong alignment on TopazScannerComponent_GetStateStartTimestamp");
static_assert(sizeof(TopazScannerComponent_GetStateStartTimestamp) == 0x000004, "Wrong size on TopazScannerComponent_GetStateStartTimestamp");
static_assert(offsetof(TopazScannerComponent_GetStateStartTimestamp, ReturnValue) == 0x000000, "Member 'TopazScannerComponent_GetStateStartTimestamp::ReturnValue' has a wrong offset!");

// Function Stalker2.MistAnomaly.OnAnomalyBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct MistAnomaly_OnAnomalyBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MistAnomaly_OnAnomalyBeginOverlap) == 0x000008, "Wrong alignment on MistAnomaly_OnAnomalyBeginOverlap");
static_assert(sizeof(MistAnomaly_OnAnomalyBeginOverlap) == 0x000108, "Wrong size on MistAnomaly_OnAnomalyBeginOverlap");
static_assert(offsetof(MistAnomaly_OnAnomalyBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MistAnomaly_OnAnomalyBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyBeginOverlap, OtherActor) == 0x000008, "Member 'MistAnomaly_OnAnomalyBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyBeginOverlap, OtherComp) == 0x000010, "Member 'MistAnomaly_OnAnomalyBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MistAnomaly_OnAnomalyBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyBeginOverlap, bFromSweep) == 0x00001C, "Member 'MistAnomaly_OnAnomalyBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyBeginOverlap, SweepResult) == 0x000020, "Member 'MistAnomaly_OnAnomalyBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.MistAnomaly.OnAnomalyEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MistAnomaly_OnAnomalyEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MistAnomaly_OnAnomalyEndOverlap) == 0x000008, "Wrong alignment on MistAnomaly_OnAnomalyEndOverlap");
static_assert(sizeof(MistAnomaly_OnAnomalyEndOverlap) == 0x000020, "Wrong size on MistAnomaly_OnAnomalyEndOverlap");
static_assert(offsetof(MistAnomaly_OnAnomalyEndOverlap, OverlappedComponent) == 0x000000, "Member 'MistAnomaly_OnAnomalyEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyEndOverlap, OtherActor) == 0x000008, "Member 'MistAnomaly_OnAnomalyEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyEndOverlap, OtherComp) == 0x000010, "Member 'MistAnomaly_OnAnomalyEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnAnomalyEndOverlap, OtherBodyIndex) == 0x000018, "Member 'MistAnomaly_OnAnomalyEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.MistAnomaly.OnSaveBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct MistAnomaly_OnSaveBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MistAnomaly_OnSaveBeginOverlap) == 0x000008, "Wrong alignment on MistAnomaly_OnSaveBeginOverlap");
static_assert(sizeof(MistAnomaly_OnSaveBeginOverlap) == 0x000108, "Wrong size on MistAnomaly_OnSaveBeginOverlap");
static_assert(offsetof(MistAnomaly_OnSaveBeginOverlap, OverlappedComponent) == 0x000000, "Member 'MistAnomaly_OnSaveBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnSaveBeginOverlap, OtherActor) == 0x000008, "Member 'MistAnomaly_OnSaveBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnSaveBeginOverlap, OtherComp) == 0x000010, "Member 'MistAnomaly_OnSaveBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnSaveBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'MistAnomaly_OnSaveBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnSaveBeginOverlap, bFromSweep) == 0x00001C, "Member 'MistAnomaly_OnSaveBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MistAnomaly_OnSaveBeginOverlap, SweepResult) == 0x000020, "Member 'MistAnomaly_OnSaveBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.MistAnomaly.SetTeleportationEnabled
// 0x0001 (0x0001 - 0x0000)
struct MistAnomaly_SetTeleportationEnabled final
{
public:
	bool                                          InbTeleportationEnabled;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MistAnomaly_SetTeleportationEnabled) == 0x000001, "Wrong alignment on MistAnomaly_SetTeleportationEnabled");
static_assert(sizeof(MistAnomaly_SetTeleportationEnabled) == 0x000001, "Wrong size on MistAnomaly_SetTeleportationEnabled");
static_assert(offsetof(MistAnomaly_SetTeleportationEnabled, InbTeleportationEnabled) == 0x000000, "Member 'MistAnomaly_SetTeleportationEnabled::InbTeleportationEnabled' has a wrong offset!");

// Function Stalker2.QuestTaskNotification.PlayTaskAnimation
// 0x0002 (0x0002 - 0x0000)
struct QuestTaskNotification_PlayTaskAnimation final
{
public:
	EQuestTaskAnimationType                       AnimationType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithSound;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestTaskNotification_PlayTaskAnimation) == 0x000001, "Wrong alignment on QuestTaskNotification_PlayTaskAnimation");
static_assert(sizeof(QuestTaskNotification_PlayTaskAnimation) == 0x000002, "Wrong size on QuestTaskNotification_PlayTaskAnimation");
static_assert(offsetof(QuestTaskNotification_PlayTaskAnimation, AnimationType) == 0x000000, "Member 'QuestTaskNotification_PlayTaskAnimation::AnimationType' has a wrong offset!");
static_assert(offsetof(QuestTaskNotification_PlayTaskAnimation, bWithSound) == 0x000001, "Member 'QuestTaskNotification_PlayTaskAnimation::bWithSound' has a wrong offset!");

// Function Stalker2.QuestTaskNotification.PostPlayTaskAnimation
// 0x0001 (0x0001 - 0x0000)
struct QuestTaskNotification_PostPlayTaskAnimation final
{
public:
	EQuestTaskAnimationType                       AnimationType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestTaskNotification_PostPlayTaskAnimation) == 0x000001, "Wrong alignment on QuestTaskNotification_PostPlayTaskAnimation");
static_assert(sizeof(QuestTaskNotification_PostPlayTaskAnimation) == 0x000001, "Wrong size on QuestTaskNotification_PostPlayTaskAnimation");
static_assert(offsetof(QuestTaskNotification_PostPlayTaskAnimation, AnimationType) == 0x000000, "Member 'QuestTaskNotification_PostPlayTaskAnimation::AnimationType' has a wrong offset!");

// Function Stalker2.ModifiableRichText.GetNextLine
// 0x0018 (0x0018 - 0x0000)
struct ModifiableRichText_GetNextLine final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModifiableRichText_GetNextLine) == 0x000008, "Wrong alignment on ModifiableRichText_GetNextLine");
static_assert(sizeof(ModifiableRichText_GetNextLine) == 0x000018, "Wrong size on ModifiableRichText_GetNextLine");
static_assert(offsetof(ModifiableRichText_GetNextLine, ReturnValue) == 0x000000, "Member 'ModifiableRichText_GetNextLine::ReturnValue' has a wrong offset!");

// Function Stalker2.ModioEmailAuthPopup.OnEditableTextBoxTextChanged
// 0x0018 (0x0018 - 0x0000)
struct ModioEmailAuthPopup_OnEditableTextBoxTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioEmailAuthPopup_OnEditableTextBoxTextChanged) == 0x000008, "Wrong alignment on ModioEmailAuthPopup_OnEditableTextBoxTextChanged");
static_assert(sizeof(ModioEmailAuthPopup_OnEditableTextBoxTextChanged) == 0x000018, "Wrong size on ModioEmailAuthPopup_OnEditableTextBoxTextChanged");
static_assert(offsetof(ModioEmailAuthPopup_OnEditableTextBoxTextChanged, Text) == 0x000000, "Member 'ModioEmailAuthPopup_OnEditableTextBoxTextChanged::Text' has a wrong offset!");

// Function Stalker2.ModioEmailAuthPopup.GetEmail
// 0x0010 (0x0010 - 0x0000)
struct ModioEmailAuthPopup_GetEmail final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioEmailAuthPopup_GetEmail) == 0x000008, "Wrong alignment on ModioEmailAuthPopup_GetEmail");
static_assert(sizeof(ModioEmailAuthPopup_GetEmail) == 0x000010, "Wrong size on ModioEmailAuthPopup_GetEmail");
static_assert(offsetof(ModioEmailAuthPopup_GetEmail, ReturnValue) == 0x000000, "Member 'ModioEmailAuthPopup_GetEmail::ReturnValue' has a wrong offset!");

// Function Stalker2.ModioFilterNavigationPanel.OnButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct ModioFilterNavigationPanel_OnButtonClicked final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioFilterNavigationPanel_OnButtonClicked) == 0x000004, "Wrong alignment on ModioFilterNavigationPanel_OnButtonClicked");
static_assert(sizeof(ModioFilterNavigationPanel_OnButtonClicked) == 0x000004, "Wrong size on ModioFilterNavigationPanel_OnButtonClicked");
static_assert(offsetof(ModioFilterNavigationPanel_OnButtonClicked, ButtonIndex) == 0x000000, "Member 'ModioFilterNavigationPanel_OnButtonClicked::ButtonIndex' has a wrong offset!");

// Function Stalker2.PossessedObjectComponent.OnSphereComponentBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct PossessedObjectComponent_OnSphereComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlapComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessedObjectComponent_OnSphereComponentBeginOverlap) == 0x000008, "Wrong alignment on PossessedObjectComponent_OnSphereComponentBeginOverlap");
static_assert(sizeof(PossessedObjectComponent_OnSphereComponentBeginOverlap) == 0x000108, "Wrong size on PossessedObjectComponent_OnSphereComponentBeginOverlap");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentBeginOverlap, OverlapComponent) == 0x000000, "Member 'PossessedObjectComponent_OnSphereComponentBeginOverlap::OverlapComponent' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentBeginOverlap, OtherActor) == 0x000008, "Member 'PossessedObjectComponent_OnSphereComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentBeginOverlap, OtherComp) == 0x000010, "Member 'PossessedObjectComponent_OnSphereComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PossessedObjectComponent_OnSphereComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'PossessedObjectComponent_OnSphereComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentBeginOverlap, SweepResult) == 0x000020, "Member 'PossessedObjectComponent_OnSphereComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.PossessedObjectComponent.OnSphereComponentHit
// 0x0118 (0x0118 - 0x0000)
struct PossessedObjectComponent_OnSphereComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessedObjectComponent_OnSphereComponentHit) == 0x000008, "Wrong alignment on PossessedObjectComponent_OnSphereComponentHit");
static_assert(sizeof(PossessedObjectComponent_OnSphereComponentHit) == 0x000118, "Wrong size on PossessedObjectComponent_OnSphereComponentHit");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentHit, HitComp) == 0x000000, "Member 'PossessedObjectComponent_OnSphereComponentHit::HitComp' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentHit, OtherActor) == 0x000008, "Member 'PossessedObjectComponent_OnSphereComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentHit, OtherComp) == 0x000010, "Member 'PossessedObjectComponent_OnSphereComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentHit, NormalImpulse) == 0x000018, "Member 'PossessedObjectComponent_OnSphereComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(PossessedObjectComponent_OnSphereComponentHit, Hit) == 0x000030, "Member 'PossessedObjectComponent_OnSphereComponentHit::Hit' has a wrong offset!");

// Function Stalker2.NotesPage.ClickButtonMenu
// 0x0008 (0x0008 - 0x0000)
struct NotesPage_ClickButtonMenu final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotesPage_ClickButtonMenu) == 0x000004, "Wrong alignment on NotesPage_ClickButtonMenu");
static_assert(sizeof(NotesPage_ClickButtonMenu) == 0x000008, "Wrong size on NotesPage_ClickButtonMenu");
static_assert(offsetof(NotesPage_ClickButtonMenu, ButtonId) == 0x000000, "Member 'NotesPage_ClickButtonMenu::ButtonId' has a wrong offset!");

// Function Stalker2.NotesPage.ShowDetails
// 0x0001 (0x0001 - 0x0000)
struct NotesPage_ShowDetails final
{
public:
	bool                                          bEmpty;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotesPage_ShowDetails) == 0x000001, "Wrong alignment on NotesPage_ShowDetails");
static_assert(sizeof(NotesPage_ShowDetails) == 0x000001, "Wrong size on NotesPage_ShowDetails");
static_assert(offsetof(NotesPage_ShowDetails, bEmpty) == 0x000000, "Member 'NotesPage_ShowDetails::bEmpty' has a wrong offset!");

// Function Stalker2.ModioSearchField.HandleOnTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct ModioSearchField_HandleOnTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModioSearchField_HandleOnTextCommitted) == 0x000008, "Wrong alignment on ModioSearchField_HandleOnTextCommitted");
static_assert(sizeof(ModioSearchField_HandleOnTextCommitted) == 0x000020, "Wrong size on ModioSearchField_HandleOnTextCommitted");
static_assert(offsetof(ModioSearchField_HandleOnTextCommitted, Text) == 0x000000, "Member 'ModioSearchField_HandleOnTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(ModioSearchField_HandleOnTextCommitted, CommitMethod) == 0x000018, "Member 'ModioSearchField_HandleOnTextCommitted::CommitMethod' has a wrong offset!");

// Function Stalker2.ModioSearchField.GetSearchKeywords
// 0x0010 (0x0010 - 0x0000)
struct ModioSearchField_GetSearchKeywords final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModioSearchField_GetSearchKeywords) == 0x000008, "Wrong alignment on ModioSearchField_GetSearchKeywords");
static_assert(sizeof(ModioSearchField_GetSearchKeywords) == 0x000010, "Wrong size on ModioSearchField_GetSearchKeywords");
static_assert(offsetof(ModioSearchField_GetSearchKeywords, ReturnValue) == 0x000000, "Member 'ModioSearchField_GetSearchKeywords::ReturnValue' has a wrong offset!");

// Function Stalker2.NavigationPanel.ClickMenuButton
// 0x0008 (0x0008 - 0x0000)
struct NavigationPanel_ClickMenuButton final
{
public:
	class FName                                   InButtonId;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPanel_ClickMenuButton) == 0x000004, "Wrong alignment on NavigationPanel_ClickMenuButton");
static_assert(sizeof(NavigationPanel_ClickMenuButton) == 0x000008, "Wrong size on NavigationPanel_ClickMenuButton");
static_assert(offsetof(NavigationPanel_ClickMenuButton, InButtonId) == 0x000000, "Member 'NavigationPanel_ClickMenuButton::InButtonId' has a wrong offset!");

// Function Stalker2.NavigationPanel.InitClickTransition
// 0x0008 (0x0008 - 0x0000)
struct NavigationPanel_InitClickTransition final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationPanel_InitClickTransition) == 0x000004, "Wrong alignment on NavigationPanel_InitClickTransition");
static_assert(sizeof(NavigationPanel_InitClickTransition) == 0x000008, "Wrong size on NavigationPanel_InitClickTransition");
static_assert(offsetof(NavigationPanel_InitClickTransition, ButtonId) == 0x000000, "Member 'NavigationPanel_InitClickTransition::ButtonId' has a wrong offset!");

// Function Stalker2.PDAQuestDetails.StageClick
// 0x0008 (0x0008 - 0x0000)
struct PDAQuestDetails_StageClick final
{
public:
	class UPDAQuestTaskSlot*                      InSlot;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDAQuestDetails_StageClick) == 0x000008, "Wrong alignment on PDAQuestDetails_StageClick");
static_assert(sizeof(PDAQuestDetails_StageClick) == 0x000008, "Wrong size on PDAQuestDetails_StageClick");
static_assert(offsetof(PDAQuestDetails_StageClick, InSlot) == 0x000000, "Member 'PDAQuestDetails_StageClick::InSlot' has a wrong offset!");

// Function Stalker2.PDAQuestDetails.UpdateDescriptionHover
// 0x0001 (0x0001 - 0x0000)
struct PDAQuestDetails_UpdateDescriptionHover final
{
public:
	bool                                          bIsHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDAQuestDetails_UpdateDescriptionHover) == 0x000001, "Wrong alignment on PDAQuestDetails_UpdateDescriptionHover");
static_assert(sizeof(PDAQuestDetails_UpdateDescriptionHover) == 0x000001, "Wrong size on PDAQuestDetails_UpdateDescriptionHover");
static_assert(offsetof(PDAQuestDetails_UpdateDescriptionHover, bIsHovered) == 0x000000, "Member 'PDAQuestDetails_UpdateDescriptionHover::bIsHovered' has a wrong offset!");

// Function Stalker2.PDAQuestDetails.UpdateStageHover
// 0x0001 (0x0001 - 0x0000)
struct PDAQuestDetails_UpdateStageHover final
{
public:
	bool                                          bIsStageHovered;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PDAQuestDetails_UpdateStageHover) == 0x000001, "Wrong alignment on PDAQuestDetails_UpdateStageHover");
static_assert(sizeof(PDAQuestDetails_UpdateStageHover) == 0x000001, "Wrong size on PDAQuestDetails_UpdateStageHover");
static_assert(offsetof(PDAQuestDetails_UpdateStageHover, bIsStageHovered) == 0x000000, "Member 'PDAQuestDetails_UpdateStageHover::bIsStageHovered' has a wrong offset!");

// Function Stalker2.PlayVideoWidget.GetVideoDuration
// 0x0004 (0x0004 - 0x0000)
struct PlayVideoWidget_GetVideoDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayVideoWidget_GetVideoDuration) == 0x000004, "Wrong alignment on PlayVideoWidget_GetVideoDuration");
static_assert(sizeof(PlayVideoWidget_GetVideoDuration) == 0x000004, "Wrong size on PlayVideoWidget_GetVideoDuration");
static_assert(offsetof(PlayVideoWidget_GetVideoDuration, ReturnValue) == 0x000000, "Member 'PlayVideoWidget_GetVideoDuration::ReturnValue' has a wrong offset!");

// Function Stalker2.Projectile.OnOverlap
// 0x00E8 (0x00E8 - 0x0000)
struct Projectile_OnOverlap final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Projectile_OnOverlap) == 0x000008, "Wrong alignment on Projectile_OnOverlap");
static_assert(sizeof(Projectile_OnOverlap) == 0x0000E8, "Wrong size on Projectile_OnOverlap");
static_assert(offsetof(Projectile_OnOverlap, Hit) == 0x000000, "Member 'Projectile_OnOverlap::Hit' has a wrong offset!");

// Function Stalker2.PsyPhantomComponent.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct PsyPhantomComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PsyPhantomComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on PsyPhantomComponent_OnBeginOverlap");
static_assert(sizeof(PsyPhantomComponent_OnBeginOverlap) == 0x000108, "Wrong size on PsyPhantomComponent_OnBeginOverlap");
static_assert(offsetof(PsyPhantomComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'PsyPhantomComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(PsyPhantomComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'PsyPhantomComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(PsyPhantomComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'PsyPhantomComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(PsyPhantomComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'PsyPhantomComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PsyPhantomComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'PsyPhantomComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PsyPhantomComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'PsyPhantomComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.RightClickMenuWidget.OnItemClicked
// 0x0040 (0x0040 - 0x0000)
struct RightClickMenuWidget_OnItemClicked final
{
public:
	struct FRightClickMenuItemData                Data;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RightClickMenuWidget_OnItemClicked) == 0x000008, "Wrong alignment on RightClickMenuWidget_OnItemClicked");
static_assert(sizeof(RightClickMenuWidget_OnItemClicked) == 0x000040, "Wrong size on RightClickMenuWidget_OnItemClicked");
static_assert(offsetof(RightClickMenuWidget_OnItemClicked, Data) == 0x000000, "Member 'RightClickMenuWidget_OnItemClicked::Data' has a wrong offset!");

// Function Stalker2.RightClickMenuWidget.OnItemHover
// 0x0048 (0x0048 - 0x0000)
struct RightClickMenuWidget_OnItemHover final
{
public:
	struct FRightClickMenuItemData                Data;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInHover;                                          // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RightClickMenuWidget_OnItemHover) == 0x000008, "Wrong alignment on RightClickMenuWidget_OnItemHover");
static_assert(sizeof(RightClickMenuWidget_OnItemHover) == 0x000048, "Wrong size on RightClickMenuWidget_OnItemHover");
static_assert(offsetof(RightClickMenuWidget_OnItemHover, Data) == 0x000000, "Member 'RightClickMenuWidget_OnItemHover::Data' has a wrong offset!");
static_assert(offsetof(RightClickMenuWidget_OnItemHover, bInHover) == 0x000040, "Member 'RightClickMenuWidget_OnItemHover::bInHover' has a wrong offset!");

// Function Stalker2.ShootingWeaponComponent.ShootWithOwnerOverride
// 0x0008 (0x0008 - 0x0000)
struct ShootingWeaponComponent_ShootWithOwnerOverride final
{
public:
	class UObject*                                OwnerOverride;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShootingWeaponComponent_ShootWithOwnerOverride) == 0x000008, "Wrong alignment on ShootingWeaponComponent_ShootWithOwnerOverride");
static_assert(sizeof(ShootingWeaponComponent_ShootWithOwnerOverride) == 0x000008, "Wrong size on ShootingWeaponComponent_ShootWithOwnerOverride");
static_assert(offsetof(ShootingWeaponComponent_ShootWithOwnerOverride, OwnerOverride) == 0x000000, "Member 'ShootingWeaponComponent_ShootWithOwnerOverride::OwnerOverride' has a wrong offset!");

// Function Stalker2.SoapBubbleAnomaly.OnActorCollided
// 0x0108 (0x0108 - 0x0000)
struct SoapBubbleAnomaly_OnActorCollided final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoapBubbleAnomaly_OnActorCollided) == 0x000008, "Wrong alignment on SoapBubbleAnomaly_OnActorCollided");
static_assert(sizeof(SoapBubbleAnomaly_OnActorCollided) == 0x000108, "Wrong size on SoapBubbleAnomaly_OnActorCollided");
static_assert(offsetof(SoapBubbleAnomaly_OnActorCollided, OverlappedComponent) == 0x000000, "Member 'SoapBubbleAnomaly_OnActorCollided::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SoapBubbleAnomaly_OnActorCollided, OtherActor) == 0x000008, "Member 'SoapBubbleAnomaly_OnActorCollided::OtherActor' has a wrong offset!");
static_assert(offsetof(SoapBubbleAnomaly_OnActorCollided, OtherComp) == 0x000010, "Member 'SoapBubbleAnomaly_OnActorCollided::OtherComp' has a wrong offset!");
static_assert(offsetof(SoapBubbleAnomaly_OnActorCollided, OtherBodyIndex) == 0x000018, "Member 'SoapBubbleAnomaly_OnActorCollided::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SoapBubbleAnomaly_OnActorCollided, bFromSweep) == 0x00001C, "Member 'SoapBubbleAnomaly_OnActorCollided::bFromSweep' has a wrong offset!");
static_assert(offsetof(SoapBubbleAnomaly_OnActorCollided, SweepResult) == 0x000020, "Member 'SoapBubbleAnomaly_OnActorCollided::SweepResult' has a wrong offset!");

// Function Stalker2.StrandGenerator.GetFinalStrandData
// 0x0020 (0x0020 - 0x0000)
struct StrandGenerator_GetFinalStrandData final
{
public:
	struct FStrandFinalData                       ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrandGenerator_GetFinalStrandData) == 0x000008, "Wrong alignment on StrandGenerator_GetFinalStrandData");
static_assert(sizeof(StrandGenerator_GetFinalStrandData) == 0x000020, "Wrong size on StrandGenerator_GetFinalStrandData");
static_assert(offsetof(StrandGenerator_GetFinalStrandData, ReturnValue) == 0x000000, "Member 'StrandGenerator_GetFinalStrandData::ReturnValue' has a wrong offset!");

// Function Stalker2.StreamingDistanceOverridingVolume.OnTriggerOverlapped
// 0x0108 (0x0108 - 0x0000)
struct StreamingDistanceOverridingVolume_OnTriggerOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamingDistanceOverridingVolume_OnTriggerOverlapped) == 0x000008, "Wrong alignment on StreamingDistanceOverridingVolume_OnTriggerOverlapped");
static_assert(sizeof(StreamingDistanceOverridingVolume_OnTriggerOverlapped) == 0x000108, "Wrong size on StreamingDistanceOverridingVolume_OnTriggerOverlapped");
static_assert(offsetof(StreamingDistanceOverridingVolume_OnTriggerOverlapped, OverlappedComponent) == 0x000000, "Member 'StreamingDistanceOverridingVolume_OnTriggerOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(StreamingDistanceOverridingVolume_OnTriggerOverlapped, OtherActor) == 0x000008, "Member 'StreamingDistanceOverridingVolume_OnTriggerOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(StreamingDistanceOverridingVolume_OnTriggerOverlapped, OtherComp) == 0x000010, "Member 'StreamingDistanceOverridingVolume_OnTriggerOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(StreamingDistanceOverridingVolume_OnTriggerOverlapped, OtherBodyIndex) == 0x000018, "Member 'StreamingDistanceOverridingVolume_OnTriggerOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(StreamingDistanceOverridingVolume_OnTriggerOverlapped, bFromSweep) == 0x00001C, "Member 'StreamingDistanceOverridingVolume_OnTriggerOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(StreamingDistanceOverridingVolume_OnTriggerOverlapped, SweepResult) == 0x000020, "Member 'StreamingDistanceOverridingVolume_OnTriggerOverlapped::SweepResult' has a wrong offset!");

// Function Stalker2.StrelokBossComponent.OnDashAbilityUsed
// 0x0001 (0x0001 - 0x0000)
struct StrelokBossComponent_OnDashAbilityUsed final
{
public:
	bool                                          bAbilityUsed;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrelokBossComponent_OnDashAbilityUsed) == 0x000001, "Wrong alignment on StrelokBossComponent_OnDashAbilityUsed");
static_assert(sizeof(StrelokBossComponent_OnDashAbilityUsed) == 0x000001, "Wrong size on StrelokBossComponent_OnDashAbilityUsed");
static_assert(offsetof(StrelokBossComponent_OnDashAbilityUsed, bAbilityUsed) == 0x000000, "Member 'StrelokBossComponent_OnDashAbilityUsed::bAbilityUsed' has a wrong offset!");

// Function Stalker2.SystemNotificationWidget.OnSystemNotificationActionCompleted
// 0x0078 (0x0078 - 0x0000)
struct SystemNotificationWidget_OnSystemNotificationActionCompleted final
{
public:
	struct FNotificationModel                     Model;                                             // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SystemNotificationWidget_OnSystemNotificationActionCompleted) == 0x000008, "Wrong alignment on SystemNotificationWidget_OnSystemNotificationActionCompleted");
static_assert(sizeof(SystemNotificationWidget_OnSystemNotificationActionCompleted) == 0x000078, "Wrong size on SystemNotificationWidget_OnSystemNotificationActionCompleted");
static_assert(offsetof(SystemNotificationWidget_OnSystemNotificationActionCompleted, Model) == 0x000000, "Member 'SystemNotificationWidget_OnSystemNotificationActionCompleted::Model' has a wrong offset!");

// Function Stalker2.Teleport.OnBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct Teleport_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Teleport_OnBeginOverlap) == 0x000008, "Wrong alignment on Teleport_OnBeginOverlap");
static_assert(sizeof(Teleport_OnBeginOverlap) == 0x000108, "Wrong size on Teleport_OnBeginOverlap");
static_assert(offsetof(Teleport_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'Teleport_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Teleport_OnBeginOverlap, OtherActor) == 0x000008, "Member 'Teleport_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Teleport_OnBeginOverlap, OtherComp) == 0x000010, "Member 'Teleport_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Teleport_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'Teleport_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Teleport_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'Teleport_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Teleport_OnBeginOverlap, SweepResult) == 0x000020, "Member 'Teleport_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.TextWidget.GetText
// 0x0018 (0x0018 - 0x0000)
struct TextWidget_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_GetText) == 0x000008, "Wrong alignment on TextWidget_GetText");
static_assert(sizeof(TextWidget_GetText) == 0x000018, "Wrong size on TextWidget_GetText");
static_assert(offsetof(TextWidget_GetText, ReturnValue) == 0x000000, "Member 'TextWidget_GetText::ReturnValue' has a wrong offset!");

// Function Stalker2.TextWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct TextWidget_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextWidget_SetText) == 0x000008, "Wrong alignment on TextWidget_SetText");
static_assert(sizeof(TextWidget_SetText) == 0x000018, "Wrong size on TextWidget_SetText");
static_assert(offsetof(TextWidget_SetText, InText) == 0x000000, "Member 'TextWidget_SetText::InText' has a wrong offset!");

// Function Stalker2.TopazScanner.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TopazScanner_OnStateChanged final
{
public:
	ETopazScannerState                            NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TopazScanner_OnStateChanged) == 0x000001, "Wrong alignment on TopazScanner_OnStateChanged");
static_assert(sizeof(TopazScanner_OnStateChanged) == 0x000001, "Wrong size on TopazScanner_OnStateChanged");
static_assert(offsetof(TopazScanner_OnStateChanged, NewState) == 0x000000, "Member 'TopazScanner_OnStateChanged::NewState' has a wrong offset!");

// Function Stalker2.TopazScanner.IsStationary
// 0x0001 (0x0001 - 0x0000)
struct TopazScanner_IsStationary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TopazScanner_IsStationary) == 0x000001, "Wrong alignment on TopazScanner_IsStationary");
static_assert(sizeof(TopazScanner_IsStationary) == 0x000001, "Wrong size on TopazScanner_IsStationary");
static_assert(offsetof(TopazScanner_IsStationary, ReturnValue) == 0x000000, "Member 'TopazScanner_IsStationary::ReturnValue' has a wrong offset!");

// Function Stalker2.UIManagerEx.OnOpenLootMenu
// 0x0004 (0x0004 - 0x0000)
struct UIManagerEx_OnOpenLootMenu final
{
public:
	struct FItemContainerUID                      InStorageItemContainerUID;                         // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIManagerEx_OnOpenLootMenu) == 0x000004, "Wrong alignment on UIManagerEx_OnOpenLootMenu");
static_assert(sizeof(UIManagerEx_OnOpenLootMenu) == 0x000004, "Wrong size on UIManagerEx_OnOpenLootMenu");
static_assert(offsetof(UIManagerEx_OnOpenLootMenu, InStorageItemContainerUID) == 0x000000, "Member 'UIManagerEx_OnOpenLootMenu::InStorageItemContainerUID' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.DrawAttaches
// 0x0010 (0x0010 - 0x0000)
struct UpgradeMenuWidget_DrawAttaches final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttachIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UpgradeMenuWidget_DrawAttaches) == 0x000008, "Wrong alignment on UpgradeMenuWidget_DrawAttaches");
static_assert(sizeof(UpgradeMenuWidget_DrawAttaches) == 0x000010, "Wrong size on UpgradeMenuWidget_DrawAttaches");
static_assert(offsetof(UpgradeMenuWidget_DrawAttaches, Texture) == 0x000000, "Member 'UpgradeMenuWidget_DrawAttaches::Texture' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_DrawAttaches, AttachIndex) == 0x000008, "Member 'UpgradeMenuWidget_DrawAttaches::AttachIndex' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnApplyUpgrade
// 0x0018 (0x0018 - 0x0000)
struct UpgradeMenuWidget_OnApplyUpgrade final
{
public:
	class FString                                 UpgradeID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUpgradeSlot*                           InCurrentSlot;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradeMenuWidget_OnApplyUpgrade) == 0x000008, "Wrong alignment on UpgradeMenuWidget_OnApplyUpgrade");
static_assert(sizeof(UpgradeMenuWidget_OnApplyUpgrade) == 0x000018, "Wrong size on UpgradeMenuWidget_OnApplyUpgrade");
static_assert(offsetof(UpgradeMenuWidget_OnApplyUpgrade, UpgradeID) == 0x000000, "Member 'UpgradeMenuWidget_OnApplyUpgrade::UpgradeID' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_OnApplyUpgrade, InCurrentSlot) == 0x000010, "Member 'UpgradeMenuWidget_OnApplyUpgrade::InCurrentSlot' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnMouseBlackFadeDown
// 0x0190 (0x0190 - 0x0000)
struct UpgradeMenuWidget_OnMouseBlackFadeDown final
{
public:
	struct FGeometry                              InGeometry;                                        // 0x0000(0x0040)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0040(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00D8(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradeMenuWidget_OnMouseBlackFadeDown) == 0x000008, "Wrong alignment on UpgradeMenuWidget_OnMouseBlackFadeDown");
static_assert(sizeof(UpgradeMenuWidget_OnMouseBlackFadeDown) == 0x000190, "Wrong size on UpgradeMenuWidget_OnMouseBlackFadeDown");
static_assert(offsetof(UpgradeMenuWidget_OnMouseBlackFadeDown, InGeometry) == 0x000000, "Member 'UpgradeMenuWidget_OnMouseBlackFadeDown::InGeometry' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_OnMouseBlackFadeDown, InMouseEvent) == 0x000040, "Member 'UpgradeMenuWidget_OnMouseBlackFadeDown::InMouseEvent' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_OnMouseBlackFadeDown, ReturnValue) == 0x0000D8, "Member 'UpgradeMenuWidget_OnMouseBlackFadeDown::ReturnValue' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnSectionClicked
// 0x0008 (0x0008 - 0x0000)
struct UpgradeMenuWidget_OnSectionClicked final
{
public:
	class UUpgradeSection*                        Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradeMenuWidget_OnSectionClicked) == 0x000008, "Wrong alignment on UpgradeMenuWidget_OnSectionClicked");
static_assert(sizeof(UpgradeMenuWidget_OnSectionClicked) == 0x000008, "Wrong size on UpgradeMenuWidget_OnSectionClicked");
static_assert(offsetof(UpgradeMenuWidget_OnSectionClicked, Section) == 0x000000, "Member 'UpgradeMenuWidget_OnSectionClicked::Section' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnSectionFadeProgress
// 0x0008 (0x0008 - 0x0000)
struct UpgradeMenuWidget_OnSectionFadeProgress final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowing;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UpgradeMenuWidget_OnSectionFadeProgress) == 0x000004, "Wrong alignment on UpgradeMenuWidget_OnSectionFadeProgress");
static_assert(sizeof(UpgradeMenuWidget_OnSectionFadeProgress) == 0x000008, "Wrong size on UpgradeMenuWidget_OnSectionFadeProgress");
static_assert(offsetof(UpgradeMenuWidget_OnSectionFadeProgress, Alpha) == 0x000000, "Member 'UpgradeMenuWidget_OnSectionFadeProgress::Alpha' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_OnSectionFadeProgress, bIsShowing) == 0x000004, "Member 'UpgradeMenuWidget_OnSectionFadeProgress::bIsShowing' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnUpgradeClick
// 0x0018 (0x0018 - 0x0000)
struct UpgradeMenuWidget_OnUpgradeClick final
{
public:
	class FString                                 UpgradeID;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUpgradeSlot*                           InCurrentSlot;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradeMenuWidget_OnUpgradeClick) == 0x000008, "Wrong alignment on UpgradeMenuWidget_OnUpgradeClick");
static_assert(sizeof(UpgradeMenuWidget_OnUpgradeClick) == 0x000018, "Wrong size on UpgradeMenuWidget_OnUpgradeClick");
static_assert(offsetof(UpgradeMenuWidget_OnUpgradeClick, UpgradeID) == 0x000000, "Member 'UpgradeMenuWidget_OnUpgradeClick::UpgradeID' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_OnUpgradeClick, InCurrentSlot) == 0x000010, "Member 'UpgradeMenuWidget_OnUpgradeClick::InCurrentSlot' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnUpgradeMouseEnter
// 0x0010 (0x0010 - 0x0000)
struct UpgradeMenuWidget_OnUpgradeMouseEnter final
{
public:
	class FString                                 UpgradeID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradeMenuWidget_OnUpgradeMouseEnter) == 0x000008, "Wrong alignment on UpgradeMenuWidget_OnUpgradeMouseEnter");
static_assert(sizeof(UpgradeMenuWidget_OnUpgradeMouseEnter) == 0x000010, "Wrong size on UpgradeMenuWidget_OnUpgradeMouseEnter");
static_assert(offsetof(UpgradeMenuWidget_OnUpgradeMouseEnter, UpgradeID) == 0x000000, "Member 'UpgradeMenuWidget_OnUpgradeMouseEnter::UpgradeID' has a wrong offset!");

// Function Stalker2.UpgradeMenuWidget.OnWeaponFadeProgress
// 0x0008 (0x0008 - 0x0000)
struct UpgradeMenuWidget_OnWeaponFadeProgress final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowing;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UpgradeMenuWidget_OnWeaponFadeProgress) == 0x000004, "Wrong alignment on UpgradeMenuWidget_OnWeaponFadeProgress");
static_assert(sizeof(UpgradeMenuWidget_OnWeaponFadeProgress) == 0x000008, "Wrong size on UpgradeMenuWidget_OnWeaponFadeProgress");
static_assert(offsetof(UpgradeMenuWidget_OnWeaponFadeProgress, Alpha) == 0x000000, "Member 'UpgradeMenuWidget_OnWeaponFadeProgress::Alpha' has a wrong offset!");
static_assert(offsetof(UpgradeMenuWidget_OnWeaponFadeProgress, bIsShowing) == 0x000004, "Member 'UpgradeMenuWidget_OnWeaponFadeProgress::bIsShowing' has a wrong offset!");

// Function Stalker2.UpgradePage.ClickButtonMenu
// 0x0008 (0x0008 - 0x0000)
struct UpgradePage_ClickButtonMenu final
{
public:
	class FName                                   ButtonId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradePage_ClickButtonMenu) == 0x000004, "Wrong alignment on UpgradePage_ClickButtonMenu");
static_assert(sizeof(UpgradePage_ClickButtonMenu) == 0x000008, "Wrong size on UpgradePage_ClickButtonMenu");
static_assert(offsetof(UpgradePage_ClickButtonMenu, ButtonId) == 0x000000, "Member 'UpgradePage_ClickButtonMenu::ButtonId' has a wrong offset!");

// Function Stalker2.UpgradePage.HandleConfirmPopupBindings
// 0x0001 (0x0001 - 0x0000)
struct UpgradePage_HandleConfirmPopupBindings final
{
public:
	bool                                          InBind;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpgradePage_HandleConfirmPopupBindings) == 0x000001, "Wrong alignment on UpgradePage_HandleConfirmPopupBindings");
static_assert(sizeof(UpgradePage_HandleConfirmPopupBindings) == 0x000001, "Wrong size on UpgradePage_HandleConfirmPopupBindings");
static_assert(offsetof(UpgradePage_HandleConfirmPopupBindings, InBind) == 0x000000, "Member 'UpgradePage_HandleConfirmPopupBindings::InBind' has a wrong offset!");

// Function Stalker2.UserMarkerCounter.UpdateMarkerCounterWidget
// 0x0004 (0x0004 - 0x0000)
struct UserMarkerCounter_UpdateMarkerCounterWidget final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserMarkerCounter_UpdateMarkerCounterWidget) == 0x000004, "Wrong alignment on UserMarkerCounter_UpdateMarkerCounterWidget");
static_assert(sizeof(UserMarkerCounter_UpdateMarkerCounterWidget) == 0x000004, "Wrong size on UserMarkerCounter_UpdateMarkerCounterWidget");
static_assert(offsetof(UserMarkerCounter_UpdateMarkerCounterWidget, NewAmount) == 0x000000, "Member 'UserMarkerCounter_UpdateMarkerCounterWidget::NewAmount' has a wrong offset!");

// Function Stalker2.UserMarkerSelector.HoverButton
// 0x0008 (0x0008 - 0x0000)
struct UserMarkerSelector_HoverButton final
{
public:
	class UUserMarkerSelectorButton*              InHoveredButton;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserMarkerSelector_HoverButton) == 0x000008, "Wrong alignment on UserMarkerSelector_HoverButton");
static_assert(sizeof(UserMarkerSelector_HoverButton) == 0x000008, "Wrong size on UserMarkerSelector_HoverButton");
static_assert(offsetof(UserMarkerSelector_HoverButton, InHoveredButton) == 0x000000, "Member 'UserMarkerSelector_HoverButton::InHoveredButton' has a wrong offset!");

// Function Stalker2.UserMarkerSelector.PressedButton
// 0x0020 (0x0020 - 0x0000)
struct UserMarkerSelector_PressedButton final
{
public:
	EMarkerType                                   MarkType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Coordinates;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserMarkerSelector_PressedButton) == 0x000008, "Wrong alignment on UserMarkerSelector_PressedButton");
static_assert(sizeof(UserMarkerSelector_PressedButton) == 0x000020, "Wrong size on UserMarkerSelector_PressedButton");
static_assert(offsetof(UserMarkerSelector_PressedButton, MarkType) == 0x000000, "Member 'UserMarkerSelector_PressedButton::MarkType' has a wrong offset!");
static_assert(offsetof(UserMarkerSelector_PressedButton, Coordinates) == 0x000008, "Member 'UserMarkerSelector_PressedButton::Coordinates' has a wrong offset!");

// Function Stalker2.VerticalLadder.OnClimbZoneBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct VerticalLadder_OnClimbZoneBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerticalLadder_OnClimbZoneBeginOverlap) == 0x000008, "Wrong alignment on VerticalLadder_OnClimbZoneBeginOverlap");
static_assert(sizeof(VerticalLadder_OnClimbZoneBeginOverlap) == 0x000108, "Wrong size on VerticalLadder_OnClimbZoneBeginOverlap");
static_assert(offsetof(VerticalLadder_OnClimbZoneBeginOverlap, OverlappedComponent) == 0x000000, "Member 'VerticalLadder_OnClimbZoneBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneBeginOverlap, OtherActor) == 0x000008, "Member 'VerticalLadder_OnClimbZoneBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneBeginOverlap, OtherComp) == 0x000010, "Member 'VerticalLadder_OnClimbZoneBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'VerticalLadder_OnClimbZoneBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneBeginOverlap, bFromSweep) == 0x00001C, "Member 'VerticalLadder_OnClimbZoneBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneBeginOverlap, SweepResult) == 0x000020, "Member 'VerticalLadder_OnClimbZoneBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.VerticalLadder.OnClimbZoneEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct VerticalLadder_OnClimbZoneEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VerticalLadder_OnClimbZoneEndOverlap) == 0x000008, "Wrong alignment on VerticalLadder_OnClimbZoneEndOverlap");
static_assert(sizeof(VerticalLadder_OnClimbZoneEndOverlap) == 0x000020, "Wrong size on VerticalLadder_OnClimbZoneEndOverlap");
static_assert(offsetof(VerticalLadder_OnClimbZoneEndOverlap, OverlappedComponent) == 0x000000, "Member 'VerticalLadder_OnClimbZoneEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneEndOverlap, OtherActor) == 0x000008, "Member 'VerticalLadder_OnClimbZoneEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneEndOverlap, OtherComp) == 0x000010, "Member 'VerticalLadder_OnClimbZoneEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VerticalLadder_OnClimbZoneEndOverlap, OtherBodyIndex) == 0x000018, "Member 'VerticalLadder_OnClimbZoneEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.VerticalLadder.ProtectMeshLock
// 0x0001 (0x0001 - 0x0000)
struct VerticalLadder_ProtectMeshLock final
{
public:
	ECollisionEnabled                             CollisionType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerticalLadder_ProtectMeshLock) == 0x000001, "Wrong alignment on VerticalLadder_ProtectMeshLock");
static_assert(sizeof(VerticalLadder_ProtectMeshLock) == 0x000001, "Wrong size on VerticalLadder_ProtectMeshLock");
static_assert(offsetof(VerticalLadder_ProtectMeshLock, CollisionType) == 0x000000, "Member 'VerticalLadder_ProtectMeshLock::CollisionType' has a wrong offset!");

// Function Stalker2.VerticalLadder.GetClimbZoneHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct VerticalLadder_GetClimbZoneHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VerticalLadder_GetClimbZoneHalfHeight) == 0x000004, "Wrong alignment on VerticalLadder_GetClimbZoneHalfHeight");
static_assert(sizeof(VerticalLadder_GetClimbZoneHalfHeight) == 0x000004, "Wrong size on VerticalLadder_GetClimbZoneHalfHeight");
static_assert(offsetof(VerticalLadder_GetClimbZoneHalfHeight, ReturnValue) == 0x000000, "Member 'VerticalLadder_GetClimbZoneHalfHeight::ReturnValue' has a wrong offset!");

// Function Stalker2.VoiceoverSpeechComponent.OnAKEventFinished
// 0x0010 (0x0010 - 0x0000)
struct VoiceoverSpeechComponent_OnAKEventFinished final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoiceoverSpeechComponent_OnAKEventFinished) == 0x000008, "Wrong alignment on VoiceoverSpeechComponent_OnAKEventFinished");
static_assert(sizeof(VoiceoverSpeechComponent_OnAKEventFinished) == 0x000010, "Wrong size on VoiceoverSpeechComponent_OnAKEventFinished");
static_assert(offsetof(VoiceoverSpeechComponent_OnAKEventFinished, CallbackType) == 0x000000, "Member 'VoiceoverSpeechComponent_OnAKEventFinished::CallbackType' has a wrong offset!");
static_assert(offsetof(VoiceoverSpeechComponent_OnAKEventFinished, CallbackInfo) == 0x000008, "Member 'VoiceoverSpeechComponent_OnAKEventFinished::CallbackInfo' has a wrong offset!");

// Function Stalker2.VortexAnomaly.OnVortexBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct VortexAnomaly_OnVortexBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VortexAnomaly_OnVortexBeginOverlap) == 0x000008, "Wrong alignment on VortexAnomaly_OnVortexBeginOverlap");
static_assert(sizeof(VortexAnomaly_OnVortexBeginOverlap) == 0x000108, "Wrong size on VortexAnomaly_OnVortexBeginOverlap");
static_assert(offsetof(VortexAnomaly_OnVortexBeginOverlap, OverlappedComponent) == 0x000000, "Member 'VortexAnomaly_OnVortexBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexBeginOverlap, OtherActor) == 0x000008, "Member 'VortexAnomaly_OnVortexBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexBeginOverlap, OtherComp) == 0x000010, "Member 'VortexAnomaly_OnVortexBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'VortexAnomaly_OnVortexBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexBeginOverlap, bFromSweep) == 0x00001C, "Member 'VortexAnomaly_OnVortexBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexBeginOverlap, SweepResult) == 0x000020, "Member 'VortexAnomaly_OnVortexBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.VortexAnomaly.OnVortexEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct VortexAnomaly_OnVortexEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VortexAnomaly_OnVortexEndOverlap) == 0x000008, "Wrong alignment on VortexAnomaly_OnVortexEndOverlap");
static_assert(sizeof(VortexAnomaly_OnVortexEndOverlap) == 0x000020, "Wrong size on VortexAnomaly_OnVortexEndOverlap");
static_assert(offsetof(VortexAnomaly_OnVortexEndOverlap, OverlappedComponent) == 0x000000, "Member 'VortexAnomaly_OnVortexEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexEndOverlap, OtherActor) == 0x000008, "Member 'VortexAnomaly_OnVortexEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexEndOverlap, OtherComp) == 0x000010, "Member 'VortexAnomaly_OnVortexEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexEndOverlap, OtherBodyIndex) == 0x000018, "Member 'VortexAnomaly_OnVortexEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.VortexAnomaly.OnVortexSafeZoneBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct VortexAnomaly_OnVortexSafeZoneBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VortexAnomaly_OnVortexSafeZoneBeginOverlap) == 0x000008, "Wrong alignment on VortexAnomaly_OnVortexSafeZoneBeginOverlap");
static_assert(sizeof(VortexAnomaly_OnVortexSafeZoneBeginOverlap) == 0x000108, "Wrong size on VortexAnomaly_OnVortexSafeZoneBeginOverlap");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneBeginOverlap, OverlappedComponent) == 0x000000, "Member 'VortexAnomaly_OnVortexSafeZoneBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneBeginOverlap, OtherActor) == 0x000008, "Member 'VortexAnomaly_OnVortexSafeZoneBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneBeginOverlap, OtherComp) == 0x000010, "Member 'VortexAnomaly_OnVortexSafeZoneBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'VortexAnomaly_OnVortexSafeZoneBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneBeginOverlap, bFromSweep) == 0x00001C, "Member 'VortexAnomaly_OnVortexSafeZoneBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneBeginOverlap, SweepResult) == 0x000020, "Member 'VortexAnomaly_OnVortexSafeZoneBeginOverlap::SweepResult' has a wrong offset!");

// Function Stalker2.VortexAnomaly.OnVortexSafeZoneEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct VortexAnomaly_OnVortexSafeZoneEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VortexAnomaly_OnVortexSafeZoneEndOverlap) == 0x000008, "Wrong alignment on VortexAnomaly_OnVortexSafeZoneEndOverlap");
static_assert(sizeof(VortexAnomaly_OnVortexSafeZoneEndOverlap) == 0x000020, "Wrong size on VortexAnomaly_OnVortexSafeZoneEndOverlap");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneEndOverlap, OverlappedComponent) == 0x000000, "Member 'VortexAnomaly_OnVortexSafeZoneEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneEndOverlap, OtherActor) == 0x000008, "Member 'VortexAnomaly_OnVortexSafeZoneEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneEndOverlap, OtherComp) == 0x000010, "Member 'VortexAnomaly_OnVortexSafeZoneEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(VortexAnomaly_OnVortexSafeZoneEndOverlap, OtherBodyIndex) == 0x000018, "Member 'VortexAnomaly_OnVortexSafeZoneEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Stalker2.WanderingLightsArchiAnomaly.CreateVFX
// 0x0001 (0x0001 - 0x0000)
struct WanderingLightsArchiAnomaly_CreateVFX final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WanderingLightsArchiAnomaly_CreateVFX) == 0x000001, "Wrong alignment on WanderingLightsArchiAnomaly_CreateVFX");
static_assert(sizeof(WanderingLightsArchiAnomaly_CreateVFX) == 0x000001, "Wrong size on WanderingLightsArchiAnomaly_CreateVFX");
static_assert(offsetof(WanderingLightsArchiAnomaly_CreateVFX, bEnable) == 0x000000, "Member 'WanderingLightsArchiAnomaly_CreateVFX::bEnable' has a wrong offset!");

// Function Stalker2.WaterComponent.OnBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct WaterComponent_OnBeginOverlap final
{
public:
	class AActor*                                 OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on WaterComponent_OnBeginOverlap");
static_assert(sizeof(WaterComponent_OnBeginOverlap) == 0x000010, "Wrong size on WaterComponent_OnBeginOverlap");
static_assert(offsetof(WaterComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'WaterComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WaterComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'WaterComponent_OnBeginOverlap::OtherActor' has a wrong offset!");

// Function Stalker2.WaterComponent.OnEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct WaterComponent_OnEndOverlap final
{
public:
	class AActor*                                 OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_OnEndOverlap) == 0x000008, "Wrong alignment on WaterComponent_OnEndOverlap");
static_assert(sizeof(WaterComponent_OnEndOverlap) == 0x000010, "Wrong size on WaterComponent_OnEndOverlap");
static_assert(offsetof(WaterComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'WaterComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WaterComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'WaterComponent_OnEndOverlap::OtherActor' has a wrong offset!");

// Function Stalker2.WidgetPool.CreateWidgetByPool
// 0x0008 (0x0008 - 0x0000)
struct WidgetPool_CreateWidgetByPool final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetPool_CreateWidgetByPool) == 0x000008, "Wrong alignment on WidgetPool_CreateWidgetByPool");
static_assert(sizeof(WidgetPool_CreateWidgetByPool) == 0x000008, "Wrong size on WidgetPool_CreateWidgetByPool");
static_assert(offsetof(WidgetPool_CreateWidgetByPool, ReturnValue) == 0x000000, "Member 'WidgetPool_CreateWidgetByPool::ReturnValue' has a wrong offset!");

// Function Stalker2.WorldMap.MarkerClick
// 0x0008 (0x0008 - 0x0000)
struct WorldMap_MarkerClick final
{
public:
	const class UWorldMapMarker*                  HoverMarkerWidget;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMap_MarkerClick) == 0x000008, "Wrong alignment on WorldMap_MarkerClick");
static_assert(sizeof(WorldMap_MarkerClick) == 0x000008, "Wrong size on WorldMap_MarkerClick");
static_assert(offsetof(WorldMap_MarkerClick, HoverMarkerWidget) == 0x000000, "Member 'WorldMap_MarkerClick::HoverMarkerWidget' has a wrong offset!");

// Function Stalker2.WorldMap.MarkerHover
// 0x0010 (0x0010 - 0x0000)
struct WorldMap_MarkerHover final
{
public:
	bool                                          bInHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldMapMarker*                        InHoverMarkerWidget;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMap_MarkerHover) == 0x000008, "Wrong alignment on WorldMap_MarkerHover");
static_assert(sizeof(WorldMap_MarkerHover) == 0x000010, "Wrong size on WorldMap_MarkerHover");
static_assert(offsetof(WorldMap_MarkerHover, bInHovered) == 0x000000, "Member 'WorldMap_MarkerHover::bInHovered' has a wrong offset!");
static_assert(offsetof(WorldMap_MarkerHover, InHoverMarkerWidget) == 0x000008, "Member 'WorldMap_MarkerHover::InHoverMarkerWidget' has a wrong offset!");

// Function Stalker2.WorldMapPage.MarkerClick
// 0x0008 (0x0008 - 0x0000)
struct WorldMapPage_MarkerClick final
{
public:
	const class UWorldMapMarker*                  HoverMarkerWidget;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPage_MarkerClick) == 0x000008, "Wrong alignment on WorldMapPage_MarkerClick");
static_assert(sizeof(WorldMapPage_MarkerClick) == 0x000008, "Wrong size on WorldMapPage_MarkerClick");
static_assert(offsetof(WorldMapPage_MarkerClick, HoverMarkerWidget) == 0x000000, "Member 'WorldMapPage_MarkerClick::HoverMarkerWidget' has a wrong offset!");

// Function Stalker2.WorldMapPage.MarkerHover
// 0x0010 (0x0010 - 0x0000)
struct WorldMapPage_MarkerHover final
{
public:
	bool                                          bHovered;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldMapMarker*                        HoverMarkerWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPage_MarkerHover) == 0x000008, "Wrong alignment on WorldMapPage_MarkerHover");
static_assert(sizeof(WorldMapPage_MarkerHover) == 0x000010, "Wrong size on WorldMapPage_MarkerHover");
static_assert(offsetof(WorldMapPage_MarkerHover, bHovered) == 0x000000, "Member 'WorldMapPage_MarkerHover::bHovered' has a wrong offset!");
static_assert(offsetof(WorldMapPage_MarkerHover, HoverMarkerWidget) == 0x000008, "Member 'WorldMapPage_MarkerHover::HoverMarkerWidget' has a wrong offset!");

// Function Stalker2.WorldMapPage.UIPDACreatePlayerMarker
// 0x0020 (0x0020 - 0x0000)
struct WorldMapPage_UIPDACreatePlayerMarker final
{
public:
	EMarkerType                                   LandmarkType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CreateMarkedLocation;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPage_UIPDACreatePlayerMarker) == 0x000008, "Wrong alignment on WorldMapPage_UIPDACreatePlayerMarker");
static_assert(sizeof(WorldMapPage_UIPDACreatePlayerMarker) == 0x000020, "Wrong size on WorldMapPage_UIPDACreatePlayerMarker");
static_assert(offsetof(WorldMapPage_UIPDACreatePlayerMarker, LandmarkType) == 0x000000, "Member 'WorldMapPage_UIPDACreatePlayerMarker::LandmarkType' has a wrong offset!");
static_assert(offsetof(WorldMapPage_UIPDACreatePlayerMarker, CreateMarkedLocation) == 0x000008, "Member 'WorldMapPage_UIPDACreatePlayerMarker::CreateMarkedLocation' has a wrong offset!");

// Function Stalker2.WorldMapScene.SetCaptureEveryFrame
// 0x0001 (0x0001 - 0x0000)
struct WorldMapScene_SetCaptureEveryFrame final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapScene_SetCaptureEveryFrame) == 0x000001, "Wrong alignment on WorldMapScene_SetCaptureEveryFrame");
static_assert(sizeof(WorldMapScene_SetCaptureEveryFrame) == 0x000001, "Wrong size on WorldMapScene_SetCaptureEveryFrame");
static_assert(offsetof(WorldMapScene_SetCaptureEveryFrame, bIsEnabled) == 0x000000, "Member 'WorldMapScene_SetCaptureEveryFrame::bIsEnabled' has a wrong offset!");

// Function Stalker2.WorldMapScene.SetMouseUV
// 0x0018 (0x0018 - 0x0000)
struct WorldMapScene_SetMouseUV final
{
public:
	struct FVector                                InUV;                                              // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapScene_SetMouseUV) == 0x000008, "Wrong alignment on WorldMapScene_SetMouseUV");
static_assert(sizeof(WorldMapScene_SetMouseUV) == 0x000018, "Wrong size on WorldMapScene_SetMouseUV");
static_assert(offsetof(WorldMapScene_SetMouseUV, InUV) == 0x000000, "Member 'WorldMapScene_SetMouseUV::InUV' has a wrong offset!");

// Function Stalker2.WorldMapScene.SetNotSelectedAreaBrightness
// 0x0004 (0x0004 - 0x0000)
struct WorldMapScene_SetNotSelectedAreaBrightness final
{
public:
	float                                         InBrightness;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapScene_SetNotSelectedAreaBrightness) == 0x000004, "Wrong alignment on WorldMapScene_SetNotSelectedAreaBrightness");
static_assert(sizeof(WorldMapScene_SetNotSelectedAreaBrightness) == 0x000004, "Wrong size on WorldMapScene_SetNotSelectedAreaBrightness");
static_assert(offsetof(WorldMapScene_SetNotSelectedAreaBrightness, InBrightness) == 0x000000, "Member 'WorldMapScene_SetNotSelectedAreaBrightness::InBrightness' has a wrong offset!");

// Function Stalker2.WorldMapScene.SetOffset
// 0x0010 (0x0010 - 0x0000)
struct WorldMapScene_SetOffset final
{
public:
	struct FVector2D                              InOffset;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapScene_SetOffset) == 0x000008, "Wrong alignment on WorldMapScene_SetOffset");
static_assert(sizeof(WorldMapScene_SetOffset) == 0x000010, "Wrong size on WorldMapScene_SetOffset");
static_assert(offsetof(WorldMapScene_SetOffset, InOffset) == 0x000000, "Member 'WorldMapScene_SetOffset::InOffset' has a wrong offset!");

// Function Stalker2.WorldMapScene.SetScale
// 0x0004 (0x0004 - 0x0000)
struct WorldMapScene_SetScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapScene_SetScale) == 0x000004, "Wrong alignment on WorldMapScene_SetScale");
static_assert(sizeof(WorldMapScene_SetScale) == 0x000004, "Wrong size on WorldMapScene_SetScale");
static_assert(offsetof(WorldMapScene_SetScale, InScale) == 0x000000, "Member 'WorldMapScene_SetScale::InScale' has a wrong offset!");

// Function Stalker2.WorldMapTooltip.OnVisibilityChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct WorldMapTooltip_OnVisibilityChangedCallback final
{
public:
	ESlateVisibility                              SlateVisibility;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapTooltip_OnVisibilityChangedCallback) == 0x000001, "Wrong alignment on WorldMapTooltip_OnVisibilityChangedCallback");
static_assert(sizeof(WorldMapTooltip_OnVisibilityChangedCallback) == 0x000001, "Wrong size on WorldMapTooltip_OnVisibilityChangedCallback");
static_assert(offsetof(WorldMapTooltip_OnVisibilityChangedCallback, SlateVisibility) == 0x000000, "Member 'WorldMapTooltip_OnVisibilityChangedCallback::SlateVisibility' has a wrong offset!");

}

