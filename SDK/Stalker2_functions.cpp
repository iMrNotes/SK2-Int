#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Stalker2

#include "Basic.hpp"

#include "Stalker2_classes.hpp"
#include "Stalker2_parameters.hpp"


namespace SDK
{

// Function Stalker2.WidgetBase.UpdateWidget
// (Native, Protected)

void UWidgetBase::UpdateWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetBase", "UpdateWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractionComponent.SetInteractionActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bActive                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::SetInteractionActive(const bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "SetInteractionActive");

	Params::InteractionComponent_SetInteractionActive Parms{};

	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractionComponent.SetInteractionDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             MinDistance                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MaxDistance                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::SetInteractionDistance(const float MinDistance, const float MaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "SetInteractionDistance");

	Params::InteractionComponent_SetInteractionDistance Parms{};

	Parms.MinDistance = MinDistance;
	Parms.MaxDistance = MaxDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractionComponent.SetSelfActivating
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::SetSelfActivating(const bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "SetSelfActivating");

	Params::InteractionComponent_SetSelfActivating Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractionComponent.SetShowInactive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bShow                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractionComponent::SetShowInactive(const bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "SetShowInactive");

	Params::InteractionComponent_SetShowInactive Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractionComponent.HasItemRequirement
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInteractionComponent::HasItemRequirement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "HasItemRequirement");

	Params::InteractionComponent_HasItemRequirement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractionComponent.HasRelatedQuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInteractionComponent::HasRelatedQuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionComponent", "HasRelatedQuest");

	Params::InteractionComponent_HasRelatedQuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.MenuSubViewBase.SelectOptionWidget
// (Final, Native, Public)
// Parameters:
// class UMenuButtonBase*                  ButtonWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuSubViewBase::SelectOptionWidget(class UMenuButtonBase* ButtonWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuSubViewBase", "SelectOptionWidget");

	Params::MenuSubViewBase_SelectOptionWidget Parms{};

	Parms.ButtonWidget = ButtonWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAchievements.XAchievementsAddProgress
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAchievements::XAchievementsAddProgress(const class FString& Name_0, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAchievements", "XAchievementsAddProgress");

	Params::CustomConsoleManagerAchievements_XAchievementsAddProgress Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAchievements.XAchievementsProcessFinishCampaign
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAchievements::XAchievementsProcessFinishCampaign()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAchievements", "XAchievementsProcessFinishCampaign");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAchievements.XAchievementsResetAll
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAchievements::XAchievementsResetAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAchievements", "XAchievementsResetAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAchievements.XAchievementsUpdateDebugAchievement
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAchievements::XAchievementsUpdateDebugAchievement(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAchievements", "XAchievementsUpdateDebugAchievement");

	Params::CustomConsoleManagerAchievements_XAchievementsUpdateDebugAchievement Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AbstractProgressBar.SetProgressValue
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InProgress                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbstractProgressBar::SetProgressValue(float InProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbstractProgressBar", "SetProgressValue");

	Params::AbstractProgressBar_SetProgressValue Parms{};

	Parms.InProgress = InProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.RightClickMenuItemWidget.OnButtonClick
// (Final, Native, Public)

void URightClickMenuItemWidget::OnButtonClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightClickMenuItemWidget", "OnButtonClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.RightClickMenuItemWidget.OnButtonHovered
// (Final, Native, Public)

void URightClickMenuItemWidget::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightClickMenuItemWidget", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.RightClickMenuItemWidget.OnButtonUnHovered
// (Final, Native, Public)

void URightClickMenuItemWidget::OnButtonUnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightClickMenuItemWidget", "OnButtonUnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AchievementTrigger.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Other                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AAchievementTrigger::OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AchievementTrigger", "OnBeginOverlap");

	Params::AchievementTrigger_OnBeginOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ActionBlockerConditionBase.CanTrigger
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActionBlockerConditionBase::CanTrigger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionBlockerConditionBase", "CanTrigger");

	Params::ActionBlockerConditionBase_CanTrigger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ActionMimicButton.OnMouseButtonPressed
// (Final, Native, Public)

void UActionMimicButton::OnMouseButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionMimicButton", "OnMouseButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ActionMimicButton.OnMouseButtonReleased
// (Final, Native, Public)

void UActionMimicButton::OnMouseButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionMimicButton", "OnMouseButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SettingElement.OnLeftButtonClicked
// (Native, Public)

void USettingElement::OnLeftButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingElement", "OnLeftButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SettingElement.OnRightButtonClicked
// (Native, Public)

void USettingElement::OnRightButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingElement", "OnRightButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SettingElement.GetIsEnabledElement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USettingElement::GetIsEnabledElement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingElement", "GetIsEnabledElement");

	Params::SettingElement_GetIsEnabledElement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.UserMarkerSelectorButton.OnHoveredButtonElement
// (Final, Native, Public)

void UUserMarkerSelectorButton::OnHoveredButtonElement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserMarkerSelectorButton", "OnHoveredButtonElement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UserMarkerSelectorButton.OnPressedButtonElement
// (Final, Native, Public)

void UUserMarkerSelectorButton::OnPressedButtonElement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserMarkerSelectorButton", "OnPressedButtonElement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Obj.EndCutsceneSequence
// (Native, Public, BlueprintCallable)

void AObj::EndCutsceneSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Obj", "EndCutsceneSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Obj.OnHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AObj::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Obj", "OnHit");

	Params::Obj_OnHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Obj.StartCutsceneSequence
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     SynchronizationPoint                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  OverrideRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AObj::StartCutsceneSequence(const class AActor* SynchronizationPoint, const struct FRotator& OverrideRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Obj", "StartCutsceneSequence");

	Params::Obj_StartCutsceneSequence Parms{};

	Parms.SynchronizationPoint = SynchronizationPoint;
	Parms.OverrideRotation = std::move(OverrideRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.DestroyDamageInteractParticle
// (Final, Native, Private)
// Parameters:
// class UNiagaraComponent*                ParticleSystem                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::DestroyDamageInteractParticle(class UNiagaraComponent* ParticleSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "DestroyDamageInteractParticle");

	Params::Agent_DestroyDamageInteractParticle Parms{};

	Parms.ParticleSystem = ParticleSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.PsyNPCInteractionStarted
// (Final, Native, Private)
// Parameters:
// class AObj*                             InteractActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::PsyNPCInteractionStarted(class AObj* InteractActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "PsyNPCInteractionStarted");

	Params::Agent_PsyNPCInteractionStarted Parms{};

	Parms.InteractActor = InteractActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.Blink
// (Final, Native, Private, BlueprintCallable, Const)

void AAgent::Blink() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "Blink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.GetSpawnSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESpawnSource                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESpawnSource AAgent::GetSpawnSource() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "GetSpawnSource");

	Params::Agent_GetSpawnSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.Agent.SetCutsceneBlinkProfile
// (Final, Native, Private, Const)
// Parameters:
// ECutsceneBlinkProfile                   NewCutsceneBlinkProfile                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneBlinkProfile(ECutsceneBlinkProfile NewCutsceneBlinkProfile) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneBlinkProfile");

	Params::Agent_SetCutsceneBlinkProfile Parms{};

	Parms.NewCutsceneBlinkProfile = NewCutsceneBlinkProfile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneEyesIdleProfile
// (Final, Native, Private, Const)
// Parameters:
// ECutsceneEyesIdleProfile                NewCutsceneEyesIdleProfile                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneEyesIdleProfile(ECutsceneEyesIdleProfile NewCutsceneEyesIdleProfile) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneEyesIdleProfile");

	Params::Agent_SetCutsceneEyesIdleProfile Parms{};

	Parms.NewCutsceneEyesIdleProfile = NewCutsceneEyesIdleProfile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneEyesLookAtWeight
// (Final, Native, Private, Const)
// Parameters:
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneEyesLookAtWeight(float Weight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneEyesLookAtWeight");

	Params::Agent_SetCutsceneEyesLookAtWeight Parms{};

	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneHeadLookAtWeight
// (Final, Native, Private, Const)
// Parameters:
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneHeadLookAtWeight(float Weight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneHeadLookAtWeight");

	Params::Agent_SetCutsceneHeadLookAtWeight Parms{};

	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneLookAtActor
// (Final, Native, Private, Const)
// Parameters:
// const class AActor*                     Value                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneLookAtActor(const class AActor* Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneLookAtActor");

	Params::Agent_SetCutsceneLookAtActor Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneProceduralEyesAmplitude
// (Final, Native, Private, Const)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneProceduralEyesAmplitude(float Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneProceduralEyesAmplitude");

	Params::Agent_SetCutsceneProceduralEyesAmplitude Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneProceduralEyesIntensity
// (Final, Native, Private, Const)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneProceduralEyesIntensity(float Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneProceduralEyesIntensity");

	Params::Agent_SetCutsceneProceduralEyesIntensity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Agent.SetCutsceneProceduralEyesWeight
// (Final, Native, Private, Const)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAgent::SetCutsceneProceduralEyesWeight(float Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Agent", "SetCutsceneProceduralEyesWeight");

	Params::Agent_SetCutsceneProceduralEyesWeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ScriptedNavModifierVolume.Activate
// (Final, Native, Protected, BlueprintCallable)

void AScriptedNavModifierVolume::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptedNavModifierVolume", "Activate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ScriptedNavModifierVolume.Deactivate
// (Final, Native, Protected, BlueprintCallable)

void AScriptedNavModifierVolume::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptedNavModifierVolume", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableVersionComponent.UpdateFromVersion
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const uint8                             OldVersion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractableVersionComponent::UpdateFromVersion(const uint8 OldVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableVersionComponent", "UpdateFromVersion");

	Params::InteractableVersionComponent_UpdateFromVersion Parms{};

	Parms.OldVersion = OldVersion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SingleClickComponent.SetNeededFailedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNeedEvent                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USingleClickComponent::SetNeededFailedEvent(const bool bNeedEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SingleClickComponent", "SetNeededFailedEvent");

	Params::SingleClickComponent_SetNeededFailedEvent Parms{};

	Parms.bNeedEvent = bNeedEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SingleClickComponent.CanSendFailedEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USingleClickComponent::CanSendFailedEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SingleClickComponent", "CanSendFailedEvent");

	Params::SingleClickComponent_CanSendFailedEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.OnAnimationEventTriggered
// (Event, Public, BlueprintEvent)

void AInteractableObject::OnAnimationEventTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "OnAnimationEventTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.InteractableObject.OnDayStart
// (Event, Public, BlueprintEvent)

void AInteractableObject::OnDayStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "OnDayStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.InteractableObject.OnEmissionFinish
// (Event, Public, BlueprintEvent)

void AInteractableObject::OnEmissionFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "OnEmissionFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.InteractableObject.OnEmissionStart
// (Event, Public, BlueprintEvent)

void AInteractableObject::OnEmissionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "OnEmissionStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.InteractableObject.OnFirstPlay
// (Event, Public, BlueprintEvent)

void AInteractableObject::OnFirstPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "OnFirstPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.InteractableObject.OnNightStart
// (Event, Public, BlueprintEvent)

void AInteractableObject::OnNightStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "OnNightStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.InteractableObject.PauseSkeletalComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bPause                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::PauseSkeletalComponent(const bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "PauseSkeletalComponent");

	Params::InteractableObject_PauseSkeletalComponent Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.SetBroken
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInBroken                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::SetBroken(const bool bInBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "SetBroken");

	Params::InteractableObject_SetBroken Parms{};

	Parms.bInBroken = bInBroken;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInEnabled                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::SetEnabled(const bool bInEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "SetEnabled");

	Params::InteractableObject_SetEnabled Parms{};

	Parms.bInEnabled = bInEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.SetInteractionActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInInteractionActive                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::SetInteractionActive(const bool bInInteractionActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "SetInteractionActive");

	Params::InteractableObject_SetInteractionActive Parms{};

	Parms.bInInteractionActive = bInInteractionActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.SetPrerequisiteRequired
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInPrerequisiteRequired                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::SetPrerequisiteRequired(const bool bInPrerequisiteRequired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "SetPrerequisiteRequired");

	Params::InteractableObject_SetPrerequisiteRequired Parms{};

	Parms.bInPrerequisiteRequired = bInPrerequisiteRequired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.SetSelfSufficient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInSelfSufficient                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::SetSelfSufficient(const bool bInSelfSufficient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "SetSelfSufficient");

	Params::InteractableObject_SetSelfSufficient Parms{};

	Parms.bInSelfSufficient = bInSelfSufficient;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.SetUnbreakable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInUnbreakable                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableObject::SetUnbreakable(const bool bInUnbreakable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "SetUnbreakable");

	Params::InteractableObject_SetUnbreakable Parms{};

	Parms.bInUnbreakable = bInUnbreakable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableObject.Toggle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::Toggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "Toggle");

	Params::InteractableObject_Toggle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.IsBroken
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::IsBroken() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "IsBroken");

	Params::InteractableObject_IsBroken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "IsEnabled");

	Params::InteractableObject_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.IsInteractionActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::IsInteractionActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "IsInteractionActive");

	Params::InteractableObject_IsInteractionActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.IsPrerequisiteRequired
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::IsPrerequisiteRequired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "IsPrerequisiteRequired");

	Params::InteractableObject_IsPrerequisiteRequired Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.IsSelfSufficient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::IsSelfSufficient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "IsSelfSufficient");

	Params::InteractableObject_IsSelfSufficient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableObject.IsUnbreakable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInteractableObject::IsUnbreakable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableObject", "IsUnbreakable");

	Params::InteractableObject_IsUnbreakable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableStunVolume.ActivateVolume
// (Final, Native, Protected)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableStunVolume::ActivateVolume(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableStunVolume", "ActivateVolume");

	Params::InteractableStunVolume_ActivateVolume Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableStunVolume.OnCooldownEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableStunVolume::OnCooldownEnded(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableStunVolume", "OnCooldownEnded");

	Params::InteractableStunVolume_OnCooldownEnded Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractableStunVolume.OnVolumeActivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableStunVolume::OnVolumeActivated(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableStunVolume", "OnVolumeActivated");

	Params::InteractableStunVolume_OnVolumeActivated Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractableStunVolume.OnVolumeDeactivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableStunVolume::OnVolumeDeactivated(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableStunVolume", "OnVolumeDeactivated");

	Params::InteractableStunVolume_OnVolumeDeactivated Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractableStunVolume.OnVolumeForceDeactivated
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableStunVolume::OnVolumeForceDeactivated(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableStunVolume", "OnVolumeForceDeactivated");

	Params::InteractableStunVolume_OnVolumeForceDeactivated Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.AnimNotify_RetargetedAkEvent.AsyncPostAkEventAtMeshLocation
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UAkAudioEvent>     Event                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimNotify_RetargetedAkEvent::AsyncPostAkEventAtMeshLocation(class USkeletalMeshComponent* Mesh, TSoftObjectPtr<class UAkAudioEvent> Event) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_RetargetedAkEvent", "AsyncPostAkEventAtMeshLocation");

	Params::AnimNotify_RetargetedAkEvent_AsyncPostAkEventAtMeshLocation Parms{};

	Parms.Mesh = Mesh;
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimNotify_RetargetedAkEvent.AsyncPostAkEventOnComponent
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UAkComponent*                     AkComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UAkAudioEvent>     Event                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimNotify_RetargetedAkEvent::AsyncPostAkEventOnComponent(class UAkComponent* AkComponent, TSoftObjectPtr<class UAkAudioEvent> Event) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_RetargetedAkEvent", "AsyncPostAkEventOnComponent");

	Params::AnimNotify_RetargetedAkEvent_AsyncPostAkEventOnComponent Parms{};

	Parms.AkComponent = AkComponent;
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimNotify_RetargetedAkEvent.GetAkComponentForSocket
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      Socket                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAnimSequenceBase*          AnimSequenceBase                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkComponent*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAkComponent* UAnimNotify_RetargetedAkEvent::GetAkComponentForSocket(class USkeletalMeshComponent* Mesh, const class FName& Socket, const class UAnimSequenceBase* AnimSequenceBase) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_RetargetedAkEvent", "GetAkComponentForSocket");

	Params::AnimNotify_RetargetedAkEvent_GetAkComponentForSocket Parms{};

	Parms.Mesh = Mesh;
	Parms.Socket = Socket;
	Parms.AnimSequenceBase = AnimSequenceBase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.AISwarmComponent.OnConstruction
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SwarmHealth                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISwarmComponent::OnConstruction(const struct FTransform& Transform, const float SwarmHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISwarmComponent", "OnConstruction");

	Params::AISwarmComponent_OnConstruction Parms{};

	Parms.Transform = std::move(Transform);
	Parms.SwarmHealth = SwarmHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AISwarmComponent.SetDamageTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             OffsetToGroundLevel                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             EngageRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISwarmComponent::SetDamageTarget(const class AActor* Target, const float OffsetToGroundLevel, const float EngageRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISwarmComponent", "SetDamageTarget");

	Params::AISwarmComponent_SetDamageTarget Parms{};

	Parms.Target = Target;
	Parms.OffsetToGroundLevel = OffsetToGroundLevel;
	Parms.EngageRadius = EngageRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AISwarmComponent.Simulate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISwarmComponent::Simulate(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISwarmComponent", "Simulate");

	Params::AISwarmComponent_Simulate Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AISwarmComponent.GetVATAnimationNames
// (Final, Native, Private, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UAISwarmComponent::GetVATAnimationNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISwarmComponent", "GetVATAnimationNames");

	Params::AISwarmComponent_GetVATAnimationNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ViewBase.PreCloseUpdateView
// (Event, Public, BlueprintEvent)

void UViewBase::PreCloseUpdateView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewBase", "PreCloseUpdateView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.ViewBase.UIClose
// (Native, Protected)

void UViewBase::UIClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ViewBase", "UIClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ForceFeedbackSubsystem.BP_StartFeedback
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Trigger                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FForceFeedbackArgs&        Args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             InIntensityMultiplier                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bOverrideStopCurrent                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bStopCurrent                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UForceFeedbackSubsystem::BP_StartFeedback(const struct FGameplayTag& Trigger, const struct FForceFeedbackArgs& Args, const float InIntensityMultiplier, const bool bOverrideStopCurrent, const bool bStopCurrent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSubsystem", "BP_StartFeedback");

	Params::ForceFeedbackSubsystem_BP_StartFeedback Parms{};

	Parms.Trigger = std::move(Trigger);
	Parms.Args = std::move(Args);
	Parms.InIntensityMultiplier = InIntensityMultiplier;
	Parms.bOverrideStopCurrent = bOverrideStopCurrent;
	Parms.bStopCurrent = bStopCurrent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ForceFeedbackSubsystem.SetIntensityMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UForceFeedbackSubsystem::SetIntensityMultiplier(const float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSubsystem", "SetIntensityMultiplier");

	Params::ForceFeedbackSubsystem_SetIntensityMultiplier Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ForceFeedbackSubsystem.StopAll
// (Final, Native, Public, BlueprintCallable)

void UForceFeedbackSubsystem::StopAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSubsystem", "StopAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ForceFeedbackSubsystem.StopFeedback
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Trigger                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UForceFeedbackSubsystem::StopFeedback(const struct FGameplayTag& Trigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSubsystem", "StopFeedback");

	Params::ForceFeedbackSubsystem_StopFeedback Parms{};

	Parms.Trigger = std::move(Trigger);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ForceFeedbackSubsystem.GetIntensityMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UForceFeedbackSubsystem::GetIntensityMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSubsystem", "GetIntensityMultiplier");

	Params::ForceFeedbackSubsystem_GetIntensityMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.QuickSlot.StopCooldown
// (Final, Native, Public)

void UQuickSlot::StopCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickSlot", "StopCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SaveScreenSubView.OnNavigationButtonPressed
// (Final, Native, Public)
// Parameters:
// const int32                             InButtonIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USaveScreenSubView::OnNavigationButtonPressed(const int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveScreenSubView", "OnNavigationButtonPressed");

	Params::SaveScreenSubView_OnNavigationButtonPressed Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FadeoutScreen.UISkipFadeoutScreen
// (Final, Native, Protected)

void UFadeoutScreen::UISkipFadeoutScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadeoutScreen", "UISkipFadeoutScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.GetCharacterAnimInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AObj*                             Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimInstance* UAnimationUtilitiesBPFunctionLibrary::GetCharacterAnimInstance(class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "GetCharacterAnimInstance");

	Params::AnimationUtilitiesBPFunctionLibrary_GetCharacterAnimInstance Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.IsSimulationEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGroomAsset*                      GroomAsset                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimationUtilitiesBPFunctionLibrary::IsSimulationEnable(class UObject* Object, class UGroomAsset* GroomAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "IsSimulationEnable");

	Params::AnimationUtilitiesBPFunctionLibrary_IsSimulationEnable Parms{};

	Parms.Object = Object;
	Parms.GroomAsset = GroomAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.LerpPlayerToInteractable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APC*                              PC                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInteractionComponent*            InteractionComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimInteractableData&     InteractionData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAnimationUtilitiesBPFunctionLibrary::LerpPlayerToInteractable(class APC* PC, class UInteractionComponent* InteractionComponent, const struct FAnimInteractableData& InteractionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "LerpPlayerToInteractable");

	Params::AnimationUtilitiesBPFunctionLibrary_LerpPlayerToInteractable Parms{};

	Parms.PC = PC;
	Parms.InteractionComponent = InteractionComponent;
	Parms.InteractionData = std::move(InteractionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.MoveAnimNotifiesFromInvalidPoints
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UAnimNotify>          NotifyClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldNotifiesBeChangedToBranchingPoint               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimationUtilitiesBPFunctionLibrary::MoveAnimNotifiesFromInvalidPoints(class UAnimSequenceBase* Montage, TSubclassOf<class UAnimNotify> NotifyClass, bool bShouldNotifiesBeChangedToBranchingPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "MoveAnimNotifiesFromInvalidPoints");

	Params::AnimationUtilitiesBPFunctionLibrary_MoveAnimNotifiesFromInvalidPoints Parms{};

	Parms.Montage = Montage;
	Parms.NotifyClass = NotifyClass;
	Parms.bShouldNotifiesBeChangedToBranchingPoint = bShouldNotifiesBeChangedToBranchingPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.RefreshLodSyncComponents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULODSyncComponent*                LODSyncComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimationUtilitiesBPFunctionLibrary::RefreshLodSyncComponents(class UObject* Object, class ULODSyncComponent* LODSyncComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "RefreshLodSyncComponents");

	Params::AnimationUtilitiesBPFunctionLibrary_RefreshLodSyncComponents Parms{};

	Parms.Object = Object;
	Parms.LODSyncComponent = LODSyncComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.SetMontageSectionNextSection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      Section                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      NextSection                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimationUtilitiesBPFunctionLibrary::SetMontageSectionNextSection(class UAnimMontage* Montage, const class FName& Section, const class FName& NextSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "SetMontageSectionNextSection");

	Params::AnimationUtilitiesBPFunctionLibrary_SetMontageSectionNextSection Parms{};

	Parms.Montage = Montage;
	Parms.Section = Section;
	Parms.NextSection = NextSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimationUtilitiesBPFunctionLibrary.SetPlayerLockState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class APC*                              PC                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bLock                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimInteractableData&     InteractionData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAnimationUtilitiesBPFunctionLibrary::SetPlayerLockState(class APC* PC, const bool bLock, const struct FAnimInteractableData& InteractionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimationUtilitiesBPFunctionLibrary", "SetPlayerLockState");

	Params::AnimationUtilitiesBPFunctionLibrary_SetPlayerLockState Parms{};

	Parms.PC = PC;
	Parms.bLock = bLock;
	Parms.InteractionData = std::move(InteractionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.ForceActivateEndless
// (Native, Public)

void AAnomaly::ForceActivateEndless()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "ForceActivateEndless");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.ForceActivateOnce
// (Native, Public)

void AAnomaly::ForceActivateOnce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "ForceActivateOnce");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.ForceDeactivate
// (Native, Public)

void AAnomaly::ForceDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "ForceDeactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.OnActivationStateStarted
// (Event, Public, BlueprintEvent)

void AAnomaly::OnActivationStateStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnActivationStateStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.Anomaly.OnActiveStateStarted
// (Event, Public, BlueprintEvent)

void AAnomaly::OnActiveStateStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnActiveStateStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.Anomaly.OnBeginOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AAnomaly::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnBeginOverlap");

	Params::Anomaly_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.OnDieSoundFinished
// (Final, Native, Protected)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAnomaly::OnDieSoundFinished(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnDieSoundFinished");

	Params::Anomaly_OnDieSoundFinished Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.OnEndOverlap
// (Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAnomaly::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnEndOverlap");

	Params::Anomaly_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.OnIdleStateStarted
// (Event, Public, BlueprintEvent)

void AAnomaly::OnIdleStateStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnIdleStateStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.Anomaly.OnNiagaraFinished
// (Final, Native, Protected)
// Parameters:
// class UNiagaraComponent*                FinishedNiagara                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAnomaly::OnNiagaraFinished(class UNiagaraComponent* FinishedNiagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnNiagaraFinished");

	Params::Anomaly_OnNiagaraFinished Parms{};

	Parms.FinishedNiagara = FinishedNiagara;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Anomaly.OnRechargeStateStarted
// (Event, Public, BlueprintEvent)

void AAnomaly::OnRechargeStateStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Anomaly", "OnRechargeStateStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.ElectroAnomaly.BPDoLightningStrikeAfterPauseTime
// (Event, Public, BlueprintEvent)

void AElectroAnomaly::BPDoLightningStrikeAfterPauseTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ElectroAnomaly", "BPDoLightningStrikeAfterPauseTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.ElectroAnomaly.BPSetActiveIdleVFX
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bNewActive                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AElectroAnomaly::BPSetActiveIdleVFX(const bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ElectroAnomaly", "BPSetActiveIdleVFX");

	Params::ElectroAnomaly_BPSetActiveIdleVFX Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.ElectroAnomaly.GetElectroBakedData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FElectroAnomalyBakedDataFloat    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FElectroAnomalyBakedDataFloat AElectroAnomaly::GetElectroBakedData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ElectroAnomaly", "GetElectroBakedData");

	Params::ElectroAnomaly_GetElectroBakedData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ElectroAnomaly.GetParticleSpawnLocation
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AElectroAnomaly::GetParticleSpawnLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ElectroAnomaly", "GetParticleSpawnLocation");

	Params::ElectroAnomaly_GetParticleSpawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ElectroAnomaly.GetRadius
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AElectroAnomaly::GetRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ElectroAnomaly", "GetRadius");

	Params::ElectroAnomaly_GetRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.EULAView.Accept
// (Final, Native, Protected)

void UEULAView::Accept()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "Accept");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EULAView.Decline
// (Final, Native, Protected)

void UEULAView::Decline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "Decline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EULAView.OnUserScrolled
// (Final, Native, Protected)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEULAView::OnUserScrolled(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "OnUserScrolled");

	Params::EULAView_OnUserScrolled Parms{};

	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EULAView.ScrollDown
// (Final, Native, Protected)

void UEULAView::ScrollDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "ScrollDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EULAView.ScrollUp
// (Final, Native, Protected)

void UEULAView::ScrollUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "ScrollUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EULAView.ShowAcceptButtonBP
// (Event, Protected, BlueprintEvent)

void UEULAView::ShowAcceptButtonBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "ShowAcceptButtonBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.EULAView.TurnSendAnalyticsOff
// (Final, Native, Protected)

void UEULAView::TurnSendAnalyticsOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "TurnSendAnalyticsOff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EULAView.TurnSendAnalyticsOn
// (Final, Native, Protected)

void UEULAView::TurnSendAnalyticsOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EULAView", "TurnSendAnalyticsOn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimInstancePlayer.AnimNotify_InteractionEvent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UAnimInstancePlayer::AnimNotify_InteractionEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstancePlayer", "AnimNotify_InteractionEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HoldComponent.IsHoldStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHoldComponent::IsHoldStarted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HoldComponent", "IsHoldStarted");

	Params::HoldComponent_IsHoldStarted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.FaustBossfightController.OnCloneKilled
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     CloneActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFaustBossfightController::OnCloneKilled(const class AActor* CloneActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustBossfightController", "OnCloneKilled");

	Params::FaustBossfightController_OnCloneKilled Parms{};

	Parms.CloneActor = CloneActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.FaustBossfightController.OnCloneSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     CloneActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFaustBossfightController::OnCloneSpawned(const class AActor* CloneActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustBossfightController", "OnCloneSpawned");

	Params::FaustBossfightController_OnCloneSpawned Parms{};

	Parms.CloneActor = CloneActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.FaustBossfightController.OnCloneSwitch
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     CloneActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFaustBossfightController::OnCloneSwitch(const class AActor* CloneActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustBossfightController", "OnCloneSwitch");

	Params::FaustBossfightController_OnCloneSwitch Parms{};

	Parms.CloneActor = CloneActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.FaustBossfightController.SetCloneSpawnEnabled
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFaustBossfightController::SetCloneSpawnEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustBossfightController", "SetCloneSpawnEnabled");

	Params::FaustBossfightController_SetCloneSpawnEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FaustBossfightController.TryTeleportBossToHiddenLocation
// (Final, Native, Protected, BlueprintCallable)

void AFaustBossfightController::TryTeleportBossToHiddenLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustBossfightController", "TryTeleportBossToHiddenLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuMainViewBase.FadeInFinishedFunction
// (Final, Native, Public)

void UMenuMainViewBase::FadeInFinishedFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuMainViewBase", "FadeInFinishedFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuMainViewBase.FadeInStartedFunction
// (Final, Native, Public)

void UMenuMainViewBase::FadeInStartedFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuMainViewBase", "FadeInStartedFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuMainViewBase.FadeOutFinishedFunction
// (Final, Native, Public)

void UMenuMainViewBase::FadeOutFinishedFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuMainViewBase", "FadeOutFinishedFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuMainViewBase.FadeOutStartedFunction
// (Final, Native, Public)

void UMenuMainViewBase::FadeOutStartedFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuMainViewBase", "FadeOutStartedFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DebugTextWidgetBase.CheckDebugTextBluprint
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UUserWidget*                      InOwnerWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDebugTextWidgetBase::CheckDebugTextBluprint(const class FText& Text, class UUserWidget* InOwnerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugTextWidgetBase", "CheckDebugTextBluprint");

	Params::DebugTextWidgetBase_CheckDebugTextBluprint Parms{};

	Parms.Text = std::move(Text);
	Parms.InOwnerWidget = InOwnerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DebugTextWidgetBase.FindRengeSettings
// (Final, Native, Protected)
// Parameters:
// struct FUIWarningSettings               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FUIWarningSettings UDebugTextWidgetBase::FindRengeSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugTextWidgetBase", "FindRengeSettings");

	Params::DebugTextWidgetBase_FindRengeSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.DebugTextLenWidget.GetWarningIndex
// (Final, Native, Protected)
// Parameters:
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TextLen                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDebugTextLenWidget::GetWarningIndex(const class FString& Text, const int32 TextLen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugTextLenWidget", "GetWarningIndex");

	Params::DebugTextLenWidget_GetWarningIndex Parms{};

	Parms.Text = std::move(Text);
	Parms.TextLen = TextLen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.AnimInstanceValve.SetValveState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EValveState                       ValveState                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimInstanceValve::SetValveState(const EValveState ValveState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimInstanceValve", "SetValveState");

	Params::AnimInstanceValve_SetValveState Parms{};

	Parms.ValveState = ValveState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FirstTimeSettingsWidget.OnColorBlindnessChanged
// (Final, Native, Public)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirstTimeSettingsWidget::OnColorBlindnessChanged(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstTimeSettingsWidget", "OnColorBlindnessChanged");

	Params::FirstTimeSettingsWidget_OnColorBlindnessChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FirstTimeSettingsWidget.OnDynamicRangeChanged
// (Final, Native, Public)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirstTimeSettingsWidget::OnDynamicRangeChanged(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstTimeSettingsWidget", "OnDynamicRangeChanged");

	Params::FirstTimeSettingsWidget_OnDynamicRangeChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FirstTimeSettingsWidget.OnGammaChanged
// (Final, Native, Public)
// Parameters:
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirstTimeSettingsWidget::OnGammaChanged(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstTimeSettingsWidget", "OnGammaChanged");

	Params::FirstTimeSettingsWidget_OnGammaChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FirstTimeSettingsWidget.OnGammaSelected
// (Final, Native, Public)
// Parameters:
// const bool                              InSelected                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirstTimeSettingsWidget::OnGammaSelected(const bool InSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstTimeSettingsWidget", "OnGammaSelected");

	Params::FirstTimeSettingsWidget_OnGammaSelected Parms{};

	Parms.InSelected = InSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FirstTimeSettingsWidget.OnInterfaceLanguageChanged
// (Final, Native, Public)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirstTimeSettingsWidget::OnInterfaceLanguageChanged(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstTimeSettingsWidget", "OnInterfaceLanguageChanged");

	Params::FirstTimeSettingsWidget_OnInterfaceLanguageChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FirstTimeSettingsWidget.OnVoiceLanguageChanged
// (Final, Native, Public)
// Parameters:
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirstTimeSettingsWidget::OnVoiceLanguageChanged(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirstTimeSettingsWidget", "OnVoiceLanguageChanged");

	Params::FirstTimeSettingsWidget_OnVoiceLanguageChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplittingWidget.OnCancelButtonClicked
// (Final, Native, Private)

void UStackSplittingWidget::OnCancelButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplittingWidget", "OnCancelButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplittingWidget.OnSplitButtonClicked
// (Final, Native, Public)

void UStackSplittingWidget::OnSplitButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplittingWidget", "OnSplitButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplittingWidget.OnSplitValueChanged
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStackSplittingWidget::OnSplitValueChanged(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplittingWidget", "OnSplitValueChanged");

	Params::StackSplittingWidget_OnSplitValueChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FaustInductor.OnDamageAccumulated
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FUID&                      LastDamageDealerUID                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bProjectileFlownThroughObject                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFaustInductor::OnDamageAccumulated(const struct FUID& LastDamageDealerUID, const bool bProjectileFlownThroughObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustInductor", "OnDamageAccumulated");

	Params::FaustInductor_OnDamageAccumulated Parms{};

	Parms.LastDamageDealerUID = std::move(LastDamageDealerUID);
	Parms.bProjectileFlownThroughObject = bProjectileFlownThroughObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.FaustInductor.OnDamageDealt
// (Event, Public, BlueprintEvent)

void AFaustInductor::OnDamageDealt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustInductor", "OnDamageDealt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.FaustInductor.OnInductorCooldown
// (Event, Public, BlueprintEvent)

void AFaustInductor::OnInductorCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustInductor", "OnInductorCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.FaustInductor.OnInductorDisabled
// (Event, Public, BlueprintEvent)

void AFaustInductor::OnInductorDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustInductor", "OnInductorDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.FaustInductor.OnInductorEnabled
// (Event, Public, BlueprintEvent)

void AFaustInductor::OnInductorEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustInductor", "OnInductorEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.FaustInductor.OnInvulnerableHit
// (Event, Public, BlueprintEvent)

void AFaustInductor::OnInvulnerableHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustInductor", "OnInvulnerableHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.TelekineticShield.OnDeathParticleFinished
// (Final, Native, Private)
// Parameters:
// class UNiagaraComponent*                DeathVFXComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATelekineticShield::OnDeathParticleFinished(class UNiagaraComponent* DeathVFXComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TelekineticShield", "OnDeathParticleFinished");

	Params::TelekineticShield_OnDeathParticleFinished Parms{};

	Parms.DeathVFXComponent = DeathVFXComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TelekineticShield.OnHitReceivedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FCommonHitArgs&            HitArgs                                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATelekineticShield::OnHitReceivedBP(const struct FCommonHitArgs& HitArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TelekineticShield", "OnHitReceivedBP");

	Params::TelekineticShield_OnHitReceivedBP Parms{};

	Parms.HitArgs = std::move(HitArgs);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.TelekineticShield.OnShieldDestroyedBP
// (Event, Protected, BlueprintEvent)

void ATelekineticShield::OnShieldDestroyedBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TelekineticShield", "OnShieldDestroyedBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.TelekineticShield.GetOwnerActor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AObj*                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AObj* ATelekineticShield::GetOwnerActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TelekineticShield", "GetOwnerActor");

	Params::TelekineticShield_GetOwnerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.PDAQuestTaskContainer.MouseHoverStage
// (Final, Native, Protected)
// Parameters:
// const bool                              bHovered                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             IndexOnParent                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDAQuestTaskContainer::MouseHoverStage(const bool bHovered, const int32 IndexOnParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestTaskContainer", "MouseHoverStage");

	Params::PDAQuestTaskContainer_MouseHoverStage Parms{};

	Parms.bHovered = bHovered;
	Parms.IndexOnParent = IndexOnParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAQuestTaskContainer.StageClick
// (Final, Native, Protected)
// Parameters:
// class UPDAQuestTaskSlot*                InSlot                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDAQuestTaskContainer::StageClick(class UPDAQuestTaskSlot* InSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestTaskContainer", "StageClick");

	Params::PDAQuestTaskContainer_StageClick Parms{};

	Parms.InSlot = InSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDASlotPanelBase.ClickArrowButton
// (Final, Native, Protected)
// Parameters:
// const class FName                       ButtonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDASlotPanelBase::ClickArrowButton(const class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDASlotPanelBase", "ClickArrowButton");

	Params::PDASlotPanelBase_ClickArrowButton Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDASlotPanelBase.ClickSlot
// (Native, Protected)
// Parameters:
// const int32                             QuestSlotIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDASlotPanelBase::ClickSlot(const int32 QuestSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDASlotPanelBase", "ClickSlot");

	Params::PDASlotPanelBase_ClickSlot Parms{};

	Parms.QuestSlotIndex = QuestSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDASlotPanelBase.UpdateSelectSlotID
// (Native, Protected)

void UPDASlotPanelBase::UpdateSelectSlotID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDASlotPanelBase", "UpdateSelectSlotID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAQuestPanel.ChangeSelectedQuestSlot
// (Final, Native, Protected)
// Parameters:
// const int32                             JournalQuestIndex                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDAQuestPanel::ChangeSelectedQuestSlot(const int32 JournalQuestIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestPanel", "ChangeSelectedQuestSlot");

	Params::PDAQuestPanel_ChangeSelectedQuestSlot Parms{};

	Parms.JournalQuestIndex = JournalQuestIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuButtonBase.ExecuteAction
// (Native, Public)

void UMenuButtonBase::ExecuteAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonBase", "ExecuteAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuButtonBase.OnButtonHovered
// (Final, Native, Public)

void UMenuButtonBase::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonBase", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuButtonBase.OnMousePressed
// (Final, Native, Public)

void UMenuButtonBase::OnMousePressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonBase", "OnMousePressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuButtonBase.OnPressed
// (Final, Native, Public)

void UMenuButtonBase::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonBase", "OnPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCNavModifierComponent.AddSelectedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSCNavModifierComponent::AddSelectedComponent(class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCNavModifierComponent", "AddSelectedComponent");

	Params::GSCNavModifierComponent_AddSelectedComponent Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCNavModifierComponent.ClearSelectedComponents
// (Final, Native, Public, BlueprintCallable)

void UGSCNavModifierComponent::ClearSelectedComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCNavModifierComponent", "ClearSelectedComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCNavModifierComponent.RemoveSelectedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSCNavModifierComponent::RemoveSelectedComponent(class UPrimitiveComponent* PrimitiveComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCNavModifierComponent", "RemoveSelectedComponent");

	Params::GSCNavModifierComponent_RemoveSelectedComponent Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCNavModifierComponent.RequestBoundsRecalculation
// (Final, Native, Public, BlueprintCallable)

void UGSCNavModifierComponent::RequestBoundsRecalculation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCNavModifierComponent", "RequestBoundsRecalculation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCNavModifierComponent.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSCNavModifierComponent::SetEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCNavModifierComponent", "SetEnabled");

	Params::GSCNavModifierComponent_SetEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.QuestNotification.HideTasks
// (Final, Native, Public)

void UQuestNotification::HideTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestNotification", "HideTasks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAnalytics.XAnalyticsPrintDeaths
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAnalytics::XAnalyticsPrintDeaths()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAnalytics", "XAnalyticsPrintDeaths");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAnalytics.XAnalyticsPrintGlobalKills
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAnalytics::XAnalyticsPrintGlobalKills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAnalytics", "XAnalyticsPrintGlobalKills");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAnalytics.XAnalyticsPrintGlobalTotals
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAnalytics::XAnalyticsPrintGlobalTotals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAnalytics", "XAnalyticsPrintGlobalTotals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAnalytics.XAnalyticsPrintLocalKills
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAnalytics::XAnalyticsPrintLocalKills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAnalytics", "XAnalyticsPrintLocalKills");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAnalytics.XAnalyticsPrintLocalTotals
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAnalytics::XAnalyticsPrintLocalTotals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAnalytics", "XAnalyticsPrintLocalTotals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GameMenuElement.Confirm
// (Final, Native, Public)

void UGameMenuElement::Confirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameMenuElement", "Confirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.AllwaysShowDropHere
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bShow                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::AllwaysShowDropHere(const bool bShow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "AllwaysShowDropHere");

	Params::CustomConsoleManagerDK_AllwaysShowDropHere Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.HideCursorInMouseDrag
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bHide                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::HideCursorInMouseDrag(const bool bHide) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "HideCursorInMouseDrag");

	Params::CustomConsoleManagerDK_HideCursorInMouseDrag Parms{};

	Parms.bHide = bHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.MoveItemsInTrade
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bMoveTraderItems                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bMoveOwnItems                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bMoveBarterItems                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::MoveItemsInTrade(const bool bMoveTraderItems, const bool bMoveOwnItems, const bool bMoveBarterItems) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "MoveItemsInTrade");

	Params::CustomConsoleManagerDK_MoveItemsInTrade Parms{};

	Parms.bMoveTraderItems = bMoveTraderItems;
	Parms.bMoveOwnItems = bMoveOwnItems;
	Parms.bMoveBarterItems = bMoveBarterItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.UseStackSplitContextual
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bInUse                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::UseStackSplitContextual(const bool bInUse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "UseStackSplitContextual");

	Params::CustomConsoleManagerDK_UseStackSplitContextual Parms{};

	Parms.bInUse = bInUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XDKFinishQuest
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bWin                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XDKFinishQuest(const class FString& SID, const bool bWin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XDKFinishQuest");

	Params::CustomConsoleManagerDK_XDKFinishQuest Parms{};

	Parms.SID = std::move(SID);
	Parms.bWin = bWin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XDKFinishQuestStage
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    QSID                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SSID                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bWin                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XDKFinishQuestStage(const class FString& QSID, const class FString& SSID, const bool bWin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XDKFinishQuestStage");

	Params::CustomConsoleManagerDK_XDKFinishQuestStage Parms{};

	Parms.QSID = std::move(QSID);
	Parms.SSID = std::move(SSID);
	Parms.bWin = bWin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XDKStartQuest
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XDKStartQuest(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XDKStartQuest");

	Params::CustomConsoleManagerDK_XDKStartQuest Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XDKStartQuestStage
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    QSID                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SSID                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XDKStartQuestStage(const class FString& QSID, const class FString& SSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XDKStartQuestStage");

	Params::CustomConsoleManagerDK_XDKStartQuestStage Parms{};

	Parms.QSID = std::move(QSID);
	Parms.SSID = std::move(SSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XDKStartTwoQuestStage
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    QSID                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XDKStartTwoQuestStage(const class FString& QSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XDKStartTwoQuestStage");

	Params::CustomConsoleManagerDK_XDKStartTwoQuestStage Parms{};

	Parms.QSID = std::move(QSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XDrawDebugInventoryNavigation
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bDraw                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XDrawDebugInventoryNavigation(const bool bDraw) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XDrawDebugInventoryNavigation");

	Params::CustomConsoleManagerDK_XDrawDebugInventoryNavigation Parms{};

	Parms.bDraw = bDraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XGridNavigationVar
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             InVar                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XGridNavigationVar(const int32 InVar) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XGridNavigationVar");

	Params::CustomConsoleManagerDK_XGridNavigationVar Parms{};

	Parms.InVar = InVar;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XSetGamepadNavigationBorderSpeed
// (Final, Exec, Native, Public, Const)
// Parameters:
// const float                             Speed                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XSetGamepadNavigationBorderSpeed(const float Speed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XSetGamepadNavigationBorderSpeed");

	Params::CustomConsoleManagerDK_XSetGamepadNavigationBorderSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadInputDelay
// (Final, Exec, Native, Public, Const)
// Parameters:
// const float                             InputDelay                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XSetInventoryGamepadInputDelay(const float InputDelay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XSetInventoryGamepadInputDelay");

	Params::CustomConsoleManagerDK_XSetInventoryGamepadInputDelay Parms{};

	Parms.InputDelay = InputDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadInputSelectionDelay
// (Final, Exec, Native, Public, Const)
// Parameters:
// const float                             InputSelectionDelay                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XSetInventoryGamepadInputSelectionDelay(const float InputSelectionDelay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XSetInventoryGamepadInputSelectionDelay");

	Params::CustomConsoleManagerDK_XSetInventoryGamepadInputSelectionDelay Parms{};

	Parms.InputSelectionDelay = InputSelectionDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadInputThreshold
// (Final, Exec, Native, Public, Const)
// Parameters:
// const float                             InputThreshold                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XSetInventoryGamepadInputThreshold(const float InputThreshold) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XSetInventoryGamepadInputThreshold");

	Params::CustomConsoleManagerDK_XSetInventoryGamepadInputThreshold Parms{};

	Parms.InputThreshold = InputThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadNavigationByAxises
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bAxes                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XSetInventoryGamepadNavigationByAxises(const bool bAxes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XSetInventoryGamepadNavigationByAxises");

	Params::CustomConsoleManagerDK_XSetInventoryGamepadNavigationByAxises Parms{};

	Parms.bAxes = bAxes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDK.XSetInventoryGamepadNavigationParams
// (Final, Exec, Native, Public, Const)
// Parameters:
// const float                             InputDelay                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InputThreshold                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SelectionDelay                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDK::XSetInventoryGamepadNavigationParams(const float InputDelay, const float InputThreshold, const float SelectionDelay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDK", "XSetInventoryGamepadNavigationParams");

	Params::CustomConsoleManagerDK_XSetInventoryGamepadNavigationParams Parms{};

	Parms.InputDelay = InputDelay;
	Parms.InputThreshold = InputThreshold;
	Parms.SelectionDelay = SelectionDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AgentBehaviourEventData.GetGoalType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGoalType                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EGoalType UAgentBehaviourEventData::GetGoalType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AgentBehaviourEventData", "GetGoalType");

	Params::AgentBehaviourEventData_GetGoalType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CustomConsoleManagerGA.XShowAnalyticsUserId
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerGA::XShowAnalyticsUserId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerGA", "XShowAnalyticsUserId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerGA.XToggleAnalyticsTracking_Player
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bTracking                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerGA::XToggleAnalyticsTracking_Player(const bool bTracking) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerGA", "XToggleAnalyticsTracking_Player");

	Params::CustomConsoleManagerGA_XToggleAnalyticsTracking_Player Parms{};

	Parms.bTracking = bTracking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WaterContactController.IsPathToWaterSurfaceObstructed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FWaterSurfaceObstructionResultReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FWaterSurfaceObstructionResult UWaterContactController::IsPathToWaterSurfaceObstructed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WaterContactController", "IsPathToWaterSurfaceObstructed");

	Params::WaterContactController_IsPathToWaterSurfaceObstructed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.WaterContactController.ProjectOwnerPositionOnWaterSurface
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector UWaterContactController::ProjectOwnerPositionOnWaterSurface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WaterContactController", "ProjectOwnerPositionOnWaterSurface");

	Params::WaterContactController_ProjectOwnerPositionOnWaterSurface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.EjectedMagazine.OnHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AEjectedMagazine::OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EjectedMagazine", "OnHit");

	Params::EjectedMagazine_OnHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimNotify_LaunchVoiceOver.GetVoiceoverSIDOptions
// (Final, Native, Protected, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UAnimNotify_LaunchVoiceOver::GetVoiceoverSIDOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_LaunchVoiceOver", "GetVoiceoverSIDOptions");

	Params::AnimNotify_LaunchVoiceOver_GetVoiceoverSIDOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.Global.GoToMap
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FName                       MapName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobal::GoToMap(const class FName MapName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Global", "GoToMap");

	Params::Global_GoToMap Parms{};

	Parms.MapName = MapName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ExplosionComponent.Explode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FUID&                      ExplosionInstigatorUID                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExplosionComponent::Explode(const struct FUID& ExplosionInstigatorUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionComponent", "Explode");

	Params::ExplosionComponent_Explode Parms{};

	Parms.ExplosionInstigatorUID = std::move(ExplosionInstigatorUID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ExplosionComponent.ExplodeAtCustomLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ExplosionInstigator                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExplosionComponent::ExplodeAtCustomLocation(const struct FVector& Location, class UObject* ExplosionInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionComponent", "ExplodeAtCustomLocation");

	Params::ExplosionComponent_ExplodeAtCustomLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.ExplosionInstigator = ExplosionInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ExplosionComponent.ExplodeWithCustomLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUID&                      ExplosionInstigatorUID                                 (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExplosionComponent::ExplodeWithCustomLocation(const struct FVector& Location, const struct FUID& ExplosionInstigatorUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosionComponent", "ExplodeWithCustomLocation");

	Params::ExplosionComponent_ExplodeWithCustomLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.ExplosionInstigatorUID = std::move(ExplosionInstigatorUID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AnimNotify_PlayInteractablesFX.GetAvailableBones
// (Final, Native, Static, Public, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UAnimNotify_PlayInteractablesFX::GetAvailableBones()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimNotify_PlayInteractablesFX", "GetAvailableBones");

	Params::AnimNotify_PlayInteractablesFX_GetAvailableBones Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.GSCAblityBlueprintFunctions.ExecuteAbilityByActivationTagAttackPayload
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActivationTag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSCAblityBlueprintFunctions::ExecuteAbilityByActivationTagAttackPayload(class AActor* Actor, class FName ActivationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSCAblityBlueprintFunctions", "ExecuteAbilityByActivationTagAttackPayload");

	Params::GSCAblityBlueprintFunctions_ExecuteAbilityByActivationTagAttackPayload Parms{};

	Parms.Actor = Actor;
	Parms.ActivationTag = ActivationTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.OldSchoolTrigger.OnTriggerBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class UPrimitiveComponent*        Comp                                                   (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     OtherActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UPrimitiveComponent*        OtherComp                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AOldSchoolTrigger::OnTriggerBeginOverlap(const class UPrimitiveComponent* Comp, const class AActor* OtherActor, const class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OldSchoolTrigger", "OnTriggerBeginOverlap");

	Params::OldSchoolTrigger_OnTriggerBeginOverlap Parms{};

	Parms.Comp = Comp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.OldSchoolTrigger.OnTriggerEndOverlap
// (Final, Native, Protected)
// Parameters:
// const class UPrimitiveComponent*        OverlappedComponent                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     OtherActor                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UPrimitiveComponent*        OtherComp                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AOldSchoolTrigger::OnTriggerEndOverlap(const class UPrimitiveComponent* OverlappedComponent, const class AActor* OtherActor, const class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OldSchoolTrigger", "OnTriggerEndOverlap");

	Params::OldSchoolTrigger_OnTriggerEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PC.PlayInteractionInAnimation
// (Final, Native, Public)

void APC::PlayInteractionInAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC", "PlayInteractionInAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PC.PlayInteractionOutAnimation
// (Final, Native, Public)

void APC::PlayInteractionOutAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC", "PlayInteractionOutAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PC.SetInteractionTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UInteractionComponent*      Target                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APC::SetInteractionTarget(const class UInteractionComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC", "SetInteractionTarget");

	Params::PC_SetInteractionTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PC.SetLegsIKEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APC::SetLegsIKEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC", "SetLegsIKEnabled");

	Params::PC_SetLegsIKEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PC.GetInteractionTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UInteractionComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInteractionComponent* APC::GetInteractionTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PC", "GetInteractionTarget");

	Params::PC_GetInteractionTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.Grenade.OnHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AGrenade::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Grenade", "OnHit");

	Params::Grenade_OnHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Grenade.Explode
// (Final, Native, Public, Const)

void AGrenade::Explode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Grenade", "Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SettingsElementPercent.SetValue
// (Native, Public, BlueprintCallable)
// Parameters:
// const float                             InValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForce                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USettingsElementPercent::SetValue(const float InValue, const bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsElementPercent", "SetValue");

	Params::SettingsElementPercent_SetValue Parms{};

	Parms.InValue = InValue;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.TransformUID
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   UID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::TransformUID(int32 UID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "TransformUID");

	Params::CustomConsoleManagerRK_TransformUID Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XApplyEffectOnInteractNPC
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    EffectPrototypeSID                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XApplyEffectOnInteractNPC(const class FString& EffectPrototypeSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XApplyEffectOnInteractNPC");

	Params::CustomConsoleManagerRK_XApplyEffectOnInteractNPC Parms{};

	Parms.EffectPrototypeSID = std::move(EffectPrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XApplyEffectOnNPCByUID
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    EffectPrototypeSID                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             UID                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XApplyEffectOnNPCByUID(const class FString& EffectPrototypeSID, const int32 UID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XApplyEffectOnNPCByUID");

	Params::CustomConsoleManagerRK_XApplyEffectOnNPCByUID Parms{};

	Parms.EffectPrototypeSID = std::move(EffectPrototypeSID);
	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XApplyEffectOnPlayer
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    EffectPrototypeSID                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XApplyEffectOnPlayer(const class FString& EffectPrototypeSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XApplyEffectOnPlayer");

	Params::CustomConsoleManagerRK_XApplyEffectOnPlayer Parms{};

	Parms.EffectPrototypeSID = std::move(EffectPrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XDisableFrictionForPlayerInBulb
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bInDrawBulbDebug                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XDisableFrictionForPlayerInBulb(bool bInDrawBulbDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XDisableFrictionForPlayerInBulb");

	Params::CustomConsoleManagerRK_XDisableFrictionForPlayerInBulb Parms{};

	Parms.bInDrawBulbDebug = bInDrawBulbDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XDrawPsyFieldVolumes
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bInDrawPsyField                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XDrawPsyFieldVolumes(bool bInDrawPsyField)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XDrawPsyFieldVolumes");

	Params::CustomConsoleManagerRK_XDrawPsyFieldVolumes Parms{};

	Parms.bInDrawPsyField = bInDrawPsyField;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XIncreaseEnsuresLimit
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   IncreaseLimit                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XIncreaseEnsuresLimit(int32 IncreaseLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XIncreaseEnsuresLimit");

	Params::CustomConsoleManagerRK_XIncreaseEnsuresLimit Parms{};

	Parms.IncreaseLimit = IncreaseLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetGlobalBool
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetGlobalBool(const class FString& SID, bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetGlobalBool");

	Params::CustomConsoleManagerRK_XSetGlobalBool Parms{};

	Parms.SID = std::move(SID);
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetGlobalObjectPath
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InValue                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetGlobalObjectPath(const class FString& SID, const class FString& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetGlobalObjectPath");

	Params::CustomConsoleManagerRK_XSetGlobalObjectPath Parms{};

	Parms.SID = std::move(SID);
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetPsyNPCFilterParams
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bIsPsyPhantom                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAgentType                        AgentType1                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EAgentType                        AgentType2                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ObjPrototypeFilter1                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ObjPrototypeFilter2                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ObjPrototypeFilter3                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetPsyNPCFilterParams(const bool bIsPsyPhantom, const EAgentType AgentType1, const EAgentType AgentType2, const class FString& ObjPrototypeFilter1, const class FString& ObjPrototypeFilter2, const class FString& ObjPrototypeFilter3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetPsyNPCFilterParams");

	Params::CustomConsoleManagerRK_XSetPsyNPCFilterParams Parms{};

	Parms.bIsPsyPhantom = bIsPsyPhantom;
	Parms.AgentType1 = AgentType1;
	Parms.AgentType2 = AgentType2;
	Parms.ObjPrototypeFilter1 = std::move(ObjPrototypeFilter1);
	Parms.ObjPrototypeFilter2 = std::move(ObjPrototypeFilter2);
	Parms.ObjPrototypeFilter3 = std::move(ObjPrototypeFilter3);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetWeatherLocked
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bNowLocked                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetWeatherLocked(const bool bNowLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetWeatherLocked");

	Params::CustomConsoleManagerRK_XSetWeatherLocked Parms{};

	Parms.bNowLocked = bNowLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSpawnPsyNPC
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bIsPsyPhantom                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ObjPrototypeSID                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ERank                             Rank                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Count                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSpawnPsyNPC(const bool bIsPsyPhantom, const class FString& ObjPrototypeSID, const ERank Rank, const int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSpawnPsyNPC");

	Params::CustomConsoleManagerRK_XSpawnPsyNPC Parms{};

	Parms.bIsPsyPhantom = bIsPsyPhantom;
	Parms.ObjPrototypeSID = std::move(ObjPrototypeSID);
	Parms.Rank = Rank;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XStartBenchmark
// (Final, Exec, Native, Public)
// Parameters:
// float                                   CameraHeight                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CircleRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitialPitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitialYaw                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BenchRuns                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProfileCsv                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XStartBenchmark(float CameraHeight, float CircleRadius, float InitialPitch, float InitialYaw, int32 BenchRuns, bool bProfileCsv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XStartBenchmark");

	Params::CustomConsoleManagerRK_XStartBenchmark Parms{};

	Parms.CameraHeight = CameraHeight;
	Parms.CircleRadius = CircleRadius;
	Parms.InitialPitch = InitialPitch;
	Parms.InitialYaw = InitialYaw;
	Parms.BenchRuns = BenchRuns;
	Parms.bProfileCsv = bProfileCsv;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XStartGSCBackgroundProfiler
// (Final, Exec, Native, Public)
// Parameters:
// float                                   MsecThreshold                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RamMBThreshold                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  InFramesToCaptureOnSpike                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  InFrameCountToComputeAverage                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XStartGSCBackgroundProfiler(float MsecThreshold, float RamMBThreshold, uint32 InFramesToCaptureOnSpike, uint32 InFrameCountToComputeAverage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XStartGSCBackgroundProfiler");

	Params::CustomConsoleManagerRK_XStartGSCBackgroundProfiler Parms{};

	Parms.MsecThreshold = MsecThreshold;
	Parms.RamMBThreshold = RamMBThreshold;
	Parms.InFramesToCaptureOnSpike = InFramesToCaptureOnSpike;
	Parms.InFrameCountToComputeAverage = InFrameCountToComputeAverage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XStopBenchmark
// (Final, Exec, Native, Public)

void UCustomConsoleManagerRK::XStopBenchmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XStopBenchmark");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XTeleportToObjUID
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XTeleportToObjUID(int32 ObjUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XTeleportToObjUID");

	Params::CustomConsoleManagerRK_XTeleportToObjUID Parms{};

	Parms.ObjUID = ObjUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleClickerJumpDebugMode
// (Final, Exec, Native, Public)

void UCustomConsoleManagerRK::XToggleClickerJumpDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleClickerJumpDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleDetailedVitalsStat
// (Final, Exec, Native, Public)
// Parameters:
// EVitalType                              VitalType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XToggleDetailedVitalsStat(EVitalType VitalType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleDetailedVitalsStat");

	Params::CustomConsoleManagerRK_XToggleDetailedVitalsStat Parms{};

	Parms.VitalType = VitalType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleDrawCurrentDiscounts
// (Final, Exec, Native, Public)

void UCustomConsoleManagerRK::XToggleDrawCurrentDiscounts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleDrawCurrentDiscounts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleDrawInteractNPCStats
// (Final, Exec, Native, Public)
// Parameters:
// const float                             ValueFontXSizeCoef                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ValueFontYSizeCoef                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XToggleDrawInteractNPCStats(const float ValueFontXSizeCoef, const float ValueFontYSizeCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleDrawInteractNPCStats");

	Params::CustomConsoleManagerRK_XToggleDrawInteractNPCStats Parms{};

	Parms.ValueFontXSizeCoef = ValueFontXSizeCoef;
	Parms.ValueFontYSizeCoef = ValueFontYSizeCoef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleDrawPlayerStats
// (Final, Exec, Native, Public)
// Parameters:
// float                                   ValueFontXSizeCoef                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ValueFontYSizeCoef                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XToggleDrawPlayerStats(float ValueFontXSizeCoef, float ValueFontYSizeCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleDrawPlayerStats");

	Params::CustomConsoleManagerRK_XToggleDrawPlayerStats Parms{};

	Parms.ValueFontXSizeCoef = ValueFontXSizeCoef;
	Parms.ValueFontYSizeCoef = ValueFontYSizeCoef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleFreeCamera
// (Final, Exec, Native, Public)

void UCustomConsoleManagerRK::XToggleFreeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleFreeCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleHUDElements
// (Final, Exec, Native, Public)
// Parameters:
// EHUDElements                            ElementsToHide                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XToggleHUDElements(EHUDElements ElementsToHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleHUDElements");

	Params::CustomConsoleManagerRK_XToggleHUDElements Parms{};

	Parms.ElementsToHide = ElementsToHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XToggleNPCFlashlight
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   UID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XToggleNPCFlashlight(int32 UID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XToggleNPCFlashlight");

	Params::CustomConsoleManagerRK_XToggleNPCFlashlight Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XTogglePlayerRadiationSphereVisibility
// (Final, Exec, Native, Public)

void UCustomConsoleManagerRK::XTogglePlayerRadiationSphereVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XTogglePlayerRadiationSphereVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XTogglePsyPhantomDebugMode
// (Final, Exec, Native, Public)

void UCustomConsoleManagerRK::XTogglePsyPhantomDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XTogglePsyPhantomDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XApplyUpgradeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ItemPrototypeSID                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UpgradePrototypeSID                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XApplyUpgradeBySID(const class FString& ItemPrototypeSID, const class FString& UpgradePrototypeSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XApplyUpgradeBySID");

	Params::CustomConsoleManagerRK_XApplyUpgradeBySID Parms{};

	Parms.ItemPrototypeSID = std::move(ItemPrototypeSID);
	Parms.UpgradePrototypeSID = std::move(UpgradePrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XCreateItemInInventoryByID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    PrototypeID                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Durability                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XCreateItemInInventoryByID(const class FString& PrototypeID, int32 ObjUID, int32 Count, float Durability) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XCreateItemInInventoryByID");

	Params::CustomConsoleManagerRK_XCreateItemInInventoryByID Parms{};

	Parms.PrototypeID = std::move(PrototypeID);
	Parms.ObjUID = ObjUID;
	Parms.Count = Count;
	Parms.Durability = Durability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XDealDamage
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   TargetUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ArmorDamage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ArmorPiercing                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Bleeding                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BleedingChanceIncrement                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDamageType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BoneHit                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XDealDamage(int32 TargetUID, float Damage, float ArmorDamage, float ArmorPiercing, float Bleeding, float BleedingChanceIncrement, EDamageType Type, const class FString& BoneHit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XDealDamage");

	Params::CustomConsoleManagerRK_XDealDamage Parms{};

	Parms.TargetUID = TargetUID;
	Parms.Damage = Damage;
	Parms.ArmorDamage = ArmorDamage;
	Parms.ArmorPiercing = ArmorPiercing;
	Parms.Bleeding = Bleeding;
	Parms.BleedingChanceIncrement = BleedingChanceIncrement;
	Parms.Type = Type;
	Parms.BoneHit = std::move(BoneHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XDealDurabilityDamage
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ItemUID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurabilityDamage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XDealDurabilityDamage(int32 ItemUID, float DurabilityDamage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XDealDurabilityDamage");

	Params::CustomConsoleManagerRK_XDealDurabilityDamage Parms{};

	Parms.ItemUID = ItemUID;
	Parms.DurabilityDamage = DurabilityDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XDisassemblyCurrentWeapon
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerRK::XDisassemblyCurrentWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XDisassemblyCurrentWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XFileExists
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XFileExists(const class FString& FilePath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XFileExists");

	Params::CustomConsoleManagerRK_XFileExists Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XForceActorInteract
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ActorUID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InteractableUID                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XForceActorInteract(int32 ActorUID, int32 InteractableUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XForceActorInteract");

	Params::CustomConsoleManagerRK_XForceActorInteract Parms{};

	Parms.ActorUID = ActorUID;
	Parms.InteractableUID = InteractableUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XModifyBleeding
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   TargetUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddBleeding                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XModifyBleeding(int32 TargetUID, int32 AddBleeding) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XModifyBleeding");

	Params::CustomConsoleManagerRK_XModifyBleeding Parms{};

	Parms.TargetUID = TargetUID;
	Parms.AddBleeding = AddBleeding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XModifyStamina
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   TargetUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FPSpent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XModifyStamina(int32 TargetUID, float FPSpent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XModifyStamina");

	Params::CustomConsoleManagerRK_XModifyStamina Parms{};

	Parms.TargetUID = TargetUID;
	Parms.FPSpent = FPSpent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XObjRecalcAllCachedStats
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XObjRecalcAllCachedStats(int32 ObjUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XObjRecalcAllCachedStats");

	Params::CustomConsoleManagerRK_XObjRecalcAllCachedStats Parms{};

	Parms.ObjUID = ObjUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XObjRecalcAllEquipment
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XObjRecalcAllEquipment(int32 ObjUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XObjRecalcAllEquipment");

	Params::CustomConsoleManagerRK_XObjRecalcAllEquipment Parms{};

	Parms.ObjUID = ObjUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XOpenDoor
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   DoorUID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XOpenDoor(int32 DoorUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XOpenDoor");

	Params::CustomConsoleManagerRK_XOpenDoor Parms{};

	Parms.DoorUID = DoorUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XRevertUpgradeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ItemPrototypeSID                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    UpgradePrototypeSID                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XRevertUpgradeBySID(const class FString& ItemPrototypeSID, const class FString& UpgradePrototypeSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XRevertUpgradeBySID");

	Params::CustomConsoleManagerRK_XRevertUpgradeBySID Parms{};

	Parms.ItemPrototypeSID = std::move(ItemPrototypeSID);
	Parms.UpgradePrototypeSID = std::move(UpgradePrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetFullGodMode
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bGodMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetFullGodMode(bool bGodMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetFullGodMode");

	Params::CustomConsoleManagerRK_XSetFullGodMode Parms{};

	Parms.bGodMode = bGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetGodMode
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bGodMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetGodMode(bool bGodMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetGodMode");

	Params::CustomConsoleManagerRK_XSetGodMode Parms{};

	Parms.bGodMode = bGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSetGodModeForInteractObj
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bGodMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSetGodModeForInteractObj(bool bGodMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSetGodModeForInteractObj");

	Params::CustomConsoleManagerRK_XSetGodModeForInteractObj Parms{};

	Parms.bGodMode = bGodMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XSpawnItemContainer
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    PrototypeID                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Px                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Py                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Gold                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCustomConsoleManagerRK::XSpawnItemContainer(const class FString& PrototypeID, float Px, float Py, float Pz, int32 Gold, float Pitch, float Yaw, float Roll) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSpawnItemContainer");

	Params::CustomConsoleManagerRK_XSpawnItemContainer Parms{};

	Parms.PrototypeID = std::move(PrototypeID);
	Parms.Px = Px;
	Parms.Py = Py;
	Parms.Pz = Pz;
	Parms.Gold = Gold;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CustomConsoleManagerRK.XSpawnObjBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    PrototypeSID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERank                                   Rank                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDestroyOnOffline                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Px                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Py                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XSpawnObjBySID(const class FString& PrototypeSID, ERank Rank, bool bDestroyOnOffline, float Px, float Py, float Pz, float Pitch, float Yaw, float Roll) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XSpawnObjBySID");

	Params::CustomConsoleManagerRK_XSpawnObjBySID Parms{};

	Parms.PrototypeSID = std::move(PrototypeSID);
	Parms.Rank = Rank;
	Parms.bDestroyOnOffline = bDestroyOnOffline;
	Parms.Px = Px;
	Parms.Py = Py;
	Parms.Pz = Pz;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XTeleportTo
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   XCoord                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YCoord                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ZCoord                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XTeleportTo(float XCoord, float YCoord, float ZCoord) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XTeleportTo");

	Params::CustomConsoleManagerRK_XTeleportTo Parms{};

	Parms.XCoord = XCoord;
	Parms.YCoord = YCoord;
	Parms.ZCoord = ZCoord;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerRK.XUnlockDoor
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   DoorUID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerRK::XUnlockDoor(int32 DoorUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerRK", "XUnlockDoor");

	Params::CustomConsoleManagerRK_XUnlockDoor Parms{};

	Parms.DoorUID = DoorUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ApplyEffectComponent.ApplyEffects
// (Final, Native, Public, BlueprintCallable)

void UApplyEffectComponent::ApplyEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ApplyEffectComponent", "ApplyEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ApplyEffectComponent.RemoveEffects
// (Final, Native, Public, BlueprintCallable)

void UApplyEffectComponent::RemoveEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ApplyEffectComponent", "RemoveEffects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ButtonBase.ButtonClicked
// (Native, Protected)

void UButtonBase::ButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonBase", "ButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ButtonBase.ButtonPressed
// (Native, Protected)

void UButtonBase::ButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonBase", "ButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ButtonBase.ButtonReleased
// (Native, Protected)

void UButtonBase::ButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ButtonBase", "ButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DestructibleObject.GSCFramework_OnPostTransition
// (Event, Protected, BlueprintEvent)

void ADestructibleObject::GSCFramework_OnPostTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "GSCFramework_OnPostTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.DestructibleObject.GSCFramework_OnPreTransition
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADestructibleObject::GSCFramework_OnPreTransition(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "GSCFramework_OnPreTransition");

	Params::DestructibleObject_GSCFramework_OnPreTransition Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.DestructibleObject.OnDataLayersUpdated
// (Final, Native, Private)
// Parameters:
// const class UDataLayerInstance*         DataLayer                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDataLayerRuntimeState                  State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADestructibleObject::OnDataLayersUpdated(const class UDataLayerInstance* DataLayer, EDataLayerRuntimeState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "OnDataLayersUpdated");

	Params::DestructibleObject_OnDataLayersUpdated Parms{};

	Parms.DataLayer = DataLayer;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DestructibleObject.OnHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADestructibleObject::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "OnHit");

	Params::DestructibleObject_OnHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DestructibleObject.StartDestructActions
// (Final, Native, Private, BlueprintCallable)

void ADestructibleObject::StartDestructActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "StartDestructActions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DestructibleObject.TryAdjustPosition
// (Final, Native, Private)

void ADestructibleObject::TryAdjustPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "TryAdjustPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DestructibleObject.GetCurrentPhaseIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADestructibleObject::GetCurrentPhaseIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "GetCurrentPhaseIndex");

	Params::DestructibleObject_GetCurrentPhaseIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.DestructibleObject.GSCFramework_GetCurrentPhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FObjectPhaseSettings       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FObjectPhaseSettings ADestructibleObject::GSCFramework_GetCurrentPhase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "GSCFramework_GetCurrentPhase");

	Params::DestructibleObject_GSCFramework_GetCurrentPhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.DestructibleObject.GSCFramework_GetObjectPhases
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FObjectPhaseSettings>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FObjectPhaseSettings> ADestructibleObject::GSCFramework_GetObjectPhases() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructibleObject", "GSCFramework_GetObjectPhases");

	Params::DestructibleObject_GSCFramework_GetObjectPhases Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.BookViewBase.ChangeSelectButton
// (Final, Native, Protected)

void UBookViewBase::ChangeSelectButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BookViewBase", "ChangeSelectButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BookViewBase.ClickMenuButton
// (Final, Native, Protected)
// Parameters:
// int32                                   InButtonIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBookViewBase::ClickMenuButton(int32 InButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BookViewBase", "ClickMenuButton");

	Params::BookViewBase_ClickMenuButton Parms{};

	Parms.InButtonIndex = InButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAView.CloseUpdateView
// (Final, Native, Public)

void UPDAView::CloseUpdateView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAView", "CloseUpdateView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAView.HideAllWindows
// (Final, Native, Public)

void UPDAView::HideAllWindows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAView", "HideAllWindows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAView.UpdateQuestList
// (Event, Public, BlueprintEvent)

void UPDAView::UpdateQuestList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAView", "UpdateQuestList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.AttachSelectorSlot.OnButtonHover
// (Final, Native, Private)

void UAttachSelectorSlot::OnButtonHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorSlot", "OnButtonHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorSlot.OnUnhoverSlot
// (Final, Native, Public)

void UAttachSelectorSlot::OnUnhoverSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorSlot", "OnUnhoverSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorSlot.SelectAndEquipAttach
// (Final, Native, Public)

void UAttachSelectorSlot::SelectAndEquipAttach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorSlot", "SelectAndEquipAttach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorTip.Hide
// (Final, Native, Public)

void UAttachSelectorTip::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorTip", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorTip.Show
// (Final, Native, Public)

void UAttachSelectorTip::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorTip", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.AttachSelectorDetachAll
// (Final, Native, Public, BlueprintCallable)

void UAttachSelectorView::AttachSelectorDetachAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "AttachSelectorDetachAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.AttachSelectorSlotDown
// (Final, Native, Public)

void UAttachSelectorView::AttachSelectorSlotDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "AttachSelectorSlotDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.AttachSelectorSlotLeft
// (Final, Native, Public)

void UAttachSelectorView::AttachSelectorSlotLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "AttachSelectorSlotLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.AttachSelectorSlotRight
// (Final, Native, Public, BlueprintCallable)

void UAttachSelectorView::AttachSelectorSlotRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "AttachSelectorSlotRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.AttachSelectorSlotSelect
// (Final, Native, Public, BlueprintCallable)

void UAttachSelectorView::AttachSelectorSlotSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "AttachSelectorSlotSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.AttachSelectorSlotUp
// (Final, Native, Public)

void UAttachSelectorView::AttachSelectorSlotUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "AttachSelectorSlotUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.DetachAllAttachByDirection
// (Final, Native, Public)

void UAttachSelectorView::DetachAllAttachByDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "DetachAllAttachByDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.SetCurrentChooseLine
// (Final, Native, Public)
// Parameters:
// const ESlotDirection                    InCurrentChooseLine                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAttachSelectorView::SetCurrentChooseLine(const ESlotDirection InCurrentChooseLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "SetCurrentChooseLine");

	Params::AttachSelectorView_SetCurrentChooseLine Parms{};

	Parms.InCurrentChooseLine = InCurrentChooseLine;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.UIIterateDownSlots
// (Final, Native, Public)

void UAttachSelectorView::UIIterateDownSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "UIIterateDownSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.UIIterateLeftSlots
// (Final, Native, Public)

void UAttachSelectorView::UIIterateLeftSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "UIIterateLeftSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.UIIterateRightSlots
// (Final, Native, Public)

void UAttachSelectorView::UIIterateRightSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "UIIterateRightSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AttachSelectorView.UIIterateUpSlots
// (Final, Native, Public)

void UAttachSelectorView::UIIterateUpSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AttachSelectorView", "UIIterateUpSlots");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManager.ExecuteScripts
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class FString>&            ScriptArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomConsoleManager::ExecuteScripts(const TArray<class FString>& ScriptArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManager", "ExecuteScripts");

	Params::CustomConsoleManager_ExecuteScripts Parms{};

	Parms.ScriptArray = std::move(ScriptArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManager.XExecuteAdditionalScript
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    ScriptKeyName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManager::XExecuteAdditionalScript(const class FString& ScriptKeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManager", "XExecuteAdditionalScript");

	Params::CustomConsoleManager_XExecuteAdditionalScript Parms{};

	Parms.ScriptKeyName = std::move(ScriptKeyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManager.XExecuteFromFile
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    PathToFile                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManager::XExecuteFromFile(const class FString& PathToFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManager", "XExecuteFromFile");

	Params::CustomConsoleManager_XExecuteFromFile Parms{};

	Parms.PathToFile = std::move(PathToFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManager.XRunEngineCommand
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Command                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManager::XRunEngineCommand(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManager", "XRunEngineCommand");

	Params::CustomConsoleManager_XRunEngineCommand Parms{};

	Parms.Command = std::move(Command);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BarbedWireComponent.OnCompHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBarbedWireComponent::OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarbedWireComponent", "OnCompHit");

	Params::BarbedWireComponent_OnCompHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BarbedWireComponent.OnOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlapComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBarbedWireComponent::OnOverlapBegin(class UPrimitiveComponent* OverlapComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarbedWireComponent", "OnOverlapBegin");

	Params::BarbedWireComponent_OnOverlapBegin Parms{};

	Parms.OverlapComponent = OverlapComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BarbedWireComponent.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBarbedWireComponent::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BarbedWireComponent", "OnOverlapEnd");

	Params::BarbedWireComponent_OnOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlatformSwitcherBase.InitWidget
// (Final, Native, Public, BlueprintCallable)

void UPlatformSwitcherBase::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSwitcherBase", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlatformSwitcherBase.UpdateWidget
// (Native, Public)

void UPlatformSwitcherBase::UpdateWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformSwitcherBase", "UpdateWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XRemoveEffectFromPlayer
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    EffectPrototypeSID                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMH::XRemoveEffectFromPlayer(const class FString& EffectPrototypeSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XRemoveEffectFromPlayer");

	Params::CustomConsoleManagerMH_XRemoveEffectFromPlayer Parms{};

	Parms.EffectPrototypeSID = std::move(EffectPrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XSetFov
// (Final, Exec, Native, Public)
// Parameters:
// const float                             FOV                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMH::XSetFov(const float FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XSetFov");

	Params::CustomConsoleManagerMH_XSetFov Parms{};

	Parms.FOV = FOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleCustomFov
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMH::XToggleCustomFov(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleCustomFov");

	Params::CustomConsoleManagerMH_XToggleCustomFov Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleDrawAIShootingDebug
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMH::XToggleDrawAIShootingDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleDrawAIShootingDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleDrawPlayerDispersionDebug
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMH::XToggleDrawPlayerDispersionDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleDrawPlayerDispersionDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleDrawPlayerRecoilDebug
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMH::XToggleDrawPlayerRecoilDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleDrawPlayerRecoilDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleDrawPlayerShootingDebug
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMH::XToggleDrawPlayerShootingDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleDrawPlayerShootingDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleHubDoors
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bLocked                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMH::XToggleHubDoors(const bool bLocked, const float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleHubDoors");

	Params::CustomConsoleManagerMH_XToggleHubDoors Parms{};

	Parms.bLocked = bLocked;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XToggleSoapBubbleDebug
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMH::XToggleSoapBubbleDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XToggleSoapBubbleDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMH.XApplyMainHandWeaponUpgradeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    UpgradePrototypeSID                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMH::XApplyMainHandWeaponUpgradeBySID(const class FString& UpgradePrototypeSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMH", "XApplyMainHandWeaponUpgradeBySID");

	Params::CustomConsoleManagerMH_XApplyMainHandWeaponUpgradeBySID Parms{};

	Parms.UpgradePrototypeSID = std::move(UpgradePrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.ClickButtonMenu
// (Final, Native, Protected)
// Parameters:
// const class FName                       ButtonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialPage::ClickButtonMenu(const class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "ClickButtonMenu");

	Params::TutorialPage_ClickButtonMenu Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.ShowBlockListNavigation
// (Final, Native, Protected)
// Parameters:
// const bool                              bBlock                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialPage::ShowBlockListNavigation(const bool bBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "ShowBlockListNavigation");

	Params::TutorialPage_ShowBlockListNavigation Parms{};

	Parms.bBlock = bBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.ShowDetails
// (Final, Native, Protected)
// Parameters:
// const bool                              bEmpty                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialPage::ShowDetails(const bool bEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "ShowDetails");

	Params::TutorialPage_ShowDetails Parms{};

	Parms.bEmpty = bEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationButtonRelease
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationButtonRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationButtonRelease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationDown
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationLeft
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationMouseDown
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationMouseDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationMouseDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationMouseUp
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationMouseUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationMouseUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationRight
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigationUp
// (Final, Native, Public)

void UTutorialPage::UIPDANavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigatioTutorialDown
// (Final, Native, Public)

void UTutorialPage::UIPDANavigatioTutorialDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigatioTutorialDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TutorialPage.UIPDANavigatioTutorialUp
// (Final, Native, Public)

void UTutorialPage::UIPDANavigatioTutorialUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPage", "UIPDANavigatioTutorialUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerCamera.ForegroundDepthScale
// (Final, Exec, Native, Public)
// Parameters:
// const float                             DepthScale                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerCamera::ForegroundDepthScale(const float DepthScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerCamera", "ForegroundDepthScale");

	Params::CustomConsoleManagerCamera_ForegroundDepthScale Parms{};

	Parms.DepthScale = DepthScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BaseInteractableAction.CanInteract
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBaseInteractableAction::CanInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInteractableAction", "CanInteract");

	Params::BaseInteractableAction_CanInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.BaseInteractableAction.RunAction
// (Native, Event, Public, BlueprintEvent)

void UBaseInteractableAction::RunAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInteractableAction", "RunAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BaseInteractableAction.RunAlternativeAction
// (Native, Event, Public, BlueprintEvent)

void UBaseInteractableAction::RunAlternativeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseInteractableAction", "RunAlternativeAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPS.XChangeCompasMarkers
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPS::XChangeCompasMarkers(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPS", "XChangeCompasMarkers");

	Params::CustomConsoleManagerPS_XChangeCompasMarkers Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPS.XChangeInventoryScroll
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPS::XChangeInventoryScroll(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPS", "XChangeInventoryScroll");

	Params::CustomConsoleManagerPS_XChangeInventoryScroll Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPS.XShowInventoryDebugItmesStats
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bShow                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPS::XShowInventoryDebugItmesStats(const bool bShow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPS", "XShowInventoryDebugItmesStats");

	Params::CustomConsoleManagerPS_XShowInventoryDebugItmesStats Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BedView.Interact
// (Final, Native, Public)

void ABedView::Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BedView", "Interact");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BedView.OnSleepEnded
// (Event, Protected, BlueprintEvent)

void ABedView::OnSleepEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BedView", "OnSleepEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.BedView.OnSleepStarted
// (Event, Protected, BlueprintEvent)

void ABedView::OnSleepStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BedView", "OnSleepStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.BedView.SetInteractiveState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInteractive                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABedView::SetInteractiveState(const bool bInteractive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BedView", "SetInteractiveState");

	Params::BedView_SetInteractiveState Parms{};

	Parms.bInteractive = bInteractive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIM.XHighlightCovers
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    NavMeshAgentName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIM::XHighlightCovers(const class FString& NavMeshAgentName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIM", "XHighlightCovers");

	Params::CustomConsoleManagerIM_XHighlightCovers Parms{};

	Parms.NavMeshAgentName = std::move(NavMeshAgentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIM.XHighlightDangerAreas
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    NavMeshAgentName                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIM::XHighlightDangerAreas(const class FString& NavMeshAgentName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIM", "XHighlightDangerAreas");

	Params::CustomConsoleManagerIM_XHighlightDangerAreas Parms{};

	Parms.NavMeshAgentName = std::move(NavMeshAgentName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDASlotBase.SetSelectPointTint
// (Native, Public, HasDefaults)
// Parameters:
// const struct FLinearColor&              InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDASlotBase::SetSelectPointTint(const struct FLinearColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDASlotBase", "SetSelectPointTint");

	Params::PDASlotBase_SetSelectPointTint Parms{};

	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XStartEmissionBySID
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    PrototypeSID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerSM::XStartEmissionBySID(const class FString& PrototypeSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XStartEmissionBySID");

	Params::CustomConsoleManagerSM_XStartEmissionBySID Parms{};

	Parms.PrototypeSID = std::move(PrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XGetEmissionState
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSM::XGetEmissionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XGetEmissionState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XPauseScheduledEmission
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSM::XPauseScheduledEmission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XPauseScheduledEmission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XResumeScheduledEmission
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSM::XResumeScheduledEmission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XResumeScheduledEmission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XShowProjectileTrajectory
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerSM::XShowProjectileTrajectory(bool bShow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XShowProjectileTrajectory");

	Params::CustomConsoleManagerSM_XShowProjectileTrajectory Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XStartEmission
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSM::XStartEmission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XStartEmission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XStopEmission
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSM::XStopEmission() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XStopEmission");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSM.XSVFriendlyFire
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerSM::XSVFriendlyFire(bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSM", "XSVFriendlyFire");

	Params::CustomConsoleManagerSM_XSVFriendlyFire Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Bolt.OnComponentHit
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABolt::OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Bolt", "OnComponentHit");

	Params::Bolt_OnComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XPrintModelCapacity
// (Final, Exec, Native, Private)

void UCustomConsoleManagerAK::XPrintModelCapacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XPrintModelCapacity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XSaveObjListToFile
// (Final, Exec, Native, Private)

void UCustomConsoleManagerAK::XSaveObjListToFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XSaveObjListToFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XToggleAutoSaveEachFrame
// (Final, Exec, Native, Private)

void UCustomConsoleManagerAK::XToggleAutoSaveEachFrame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XToggleAutoSaveEachFrame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XKillThemAll
// (Final, Exec, Native, Private, Const)

void UCustomConsoleManagerAK::XKillThemAll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XKillThemAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XPrintInventory
// (Final, Exec, Native, Private, Const)
// Parameters:
// int32                                   UnitUID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAK::XPrintInventory(int32 UnitUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XPrintInventory");

	Params::CustomConsoleManagerAK_XPrintInventory Parms{};

	Parms.UnitUID = UnitUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XSuicide
// (Final, Exec, Native, Private, Const)

void UCustomConsoleManagerAK::XSuicide() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XSuicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XTestDangling
// (Final, Exec, Native, Private, Const)

void UCustomConsoleManagerAK::XTestDangling() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XTestDangling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAK.XTestST162667
// (Final, Exec, Native, Private, Const)

void UCustomConsoleManagerAK::XTestST162667() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAK", "XTestST162667");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnCancelButtonClicked
// (Final, Native, Private)

void UStackSplitContextual::OnCancelButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnCancelButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnDropAllButtonClicked
// (Final, Native, Public)

void UStackSplitContextual::OnDropAllButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnDropAllButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnHoldTimerTriggered
// (Final, Native, Private)

void UStackSplitContextual::OnHoldTimerTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnHoldTimerTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnMinusButtonClicked
// (Final, Native, Public)

void UStackSplitContextual::OnMinusButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnMinusButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnMinusButtonPressed
// (Final, Native, Private)

void UStackSplitContextual::OnMinusButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnMinusButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnMinusButtonReleased
// (Final, Native, Private)

void UStackSplitContextual::OnMinusButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnMinusButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnPlusButtonClicked
// (Final, Native, Public)

void UStackSplitContextual::OnPlusButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnPlusButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnPlusButtonPressed
// (Final, Native, Private)

void UStackSplitContextual::OnPlusButtonPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnPlusButtonPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnPlusButtonReleased
// (Final, Native, Private)

void UStackSplitContextual::OnPlusButtonReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnPlusButtonReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnSplitButtonClicked
// (Final, Native, Public)

void UStackSplitContextual::OnSplitButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnSplitButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.OnSplitValueChanged
// (Final, Native, Private)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStackSplitContextual::OnSplitValueChanged(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "OnSplitValueChanged");

	Params::StackSplitContextual_OnSplitValueChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StackSplitContextual.PressChangeAmmount
// (Final, Native, Private)

void UStackSplitContextual::PressChangeAmmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StackSplitContextual", "PressChangeAmmount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BossInterface.OnDashAbilityBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IBossInterface::OnDashAbilityBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BossInterface", "OnDashAbilityBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BossInterface.OnDashAbilityEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IBossInterface::OnDashAbilityEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BossInterface", "OnDashAbilityEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BossInterface.OnStunBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IBossInterface::OnStunBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BossInterface", "OnStunBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BossInterface.OnStunEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IBossInterface::OnStunEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BossInterface", "OnStunEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCBPFunctionLibrary.SetAffectNavigationForComponent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanAffect                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSCBPFunctionLibrary::SetAffectNavigationForComponent(class UPrimitiveComponent* PrimitiveComponent, bool bCanAffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GSCBPFunctionLibrary", "SetAffectNavigationForComponent");

	Params::GSCBPFunctionLibrary_SetAffectNavigationForComponent Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.bCanAffect = bCanAffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VictoryBPFunctionLibrary.GetAllWidgetsOfClass
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUserWidget*>*             FoundWidgets                                           (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    TopLevelOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::GetAllWidgetsOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass, TArray<class UUserWidget*>* FoundWidgets, bool TopLevelOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "GetAllWidgetsOfClass");

	Params::VictoryBPFunctionLibrary_GetAllWidgetsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;
	Parms.TopLevelOnly = TopLevelOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FoundWidgets != nullptr)
		*FoundWidgets = std::move(Parms.FoundWidgets);
}


// Function Stalker2.VictoryBPFunctionLibrary.GetFirstWidgetOfClass
// (Final, BlueprintCosmetic, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TopLevelOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UVictoryBPFunctionLibrary::GetFirstWidgetOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass, bool TopLevelOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "GetFirstWidgetOfClass");

	Params::VictoryBPFunctionLibrary_GetFirstWidgetOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;
	Parms.TopLevelOnly = TopLevelOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.GetObjectPath
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UVictoryBPFunctionLibrary::GetObjectPath(class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "GetObjectPath");

	Params::VictoryBPFunctionLibrary_GetObjectPath Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.IsWidgetOfClassInViewport
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::IsWidgetOfClassInViewport(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "IsWidgetOfClassInViewport");

	Params::VictoryBPFunctionLibrary_IsWidgetOfClassInViewport Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.LoadObjectFromAssetPath
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              ObjectClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Path                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UVictoryBPFunctionLibrary::LoadObjectFromAssetPath(TSubclassOf<class UObject> ObjectClass, class FName Path, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "LoadObjectFromAssetPath");

	Params::VictoryBPFunctionLibrary_LoadObjectFromAssetPath Parms{};

	Parms.ObjectClass = ObjectClass;
	Parms.Path = Path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.MapRangeClamped
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InRangeA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InRangeB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutRangeA                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutRangeB                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVictoryBPFunctionLibrary::MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "MapRangeClamped");

	Params::VictoryBPFunctionLibrary_MapRangeClamped Parms{};

	Parms.Value = Value;
	Parms.InRangeA = InRangeA;
	Parms.InRangeB = InRangeB;
	Parms.OutRangeA = OutRangeA;
	Parms.OutRangeB = OutRangeB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.RemoveAllWidgetsOfClass
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::RemoveAllWidgetsOfClass(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "RemoveAllWidgetsOfClass");

	Params::VictoryBPFunctionLibrary_RemoveAllWidgetsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VictoryBPFunctionLibrary.SaveConfigToFile
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const TArray<struct FVictoryInput>&     VictoryInputs                                          (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::SaveConfigToFile(const TArray<struct FVictoryInput>& VictoryInputs, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "SaveConfigToFile");

	Params::VictoryBPFunctionLibrary_SaveConfigToFile Parms{};

	Parms.VictoryInputs = std::move(VictoryInputs);
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VictoryBPFunctionLibrary.SaveGameObject_GetAllSaveSlotFileNames
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>*                  FileNames                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::SaveGameObject_GetAllSaveSlotFileNames(TArray<class FString>* FileNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "SaveGameObject_GetAllSaveSlotFileNames");

	Params::VictoryBPFunctionLibrary_SaveGameObject_GetAllSaveSlotFileNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FileNames != nullptr)
		*FileNames = std::move(Parms.FileNames);
}


// Function Stalker2.VictoryBPFunctionLibrary.ScreenShots_Rename_Move_Most_Recent
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          OriginalFileName                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewAbsoluteFolderPath                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HighResolution                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::ScreenShots_Rename_Move_Most_Recent(class FString* OriginalFileName, const class FString& NewName, const class FString& NewAbsoluteFolderPath, bool HighResolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "ScreenShots_Rename_Move_Most_Recent");

	Params::VictoryBPFunctionLibrary_ScreenShots_Rename_Move_Most_Recent Parms{};

	Parms.NewName = std::move(NewName);
	Parms.NewAbsoluteFolderPath = std::move(NewAbsoluteFolderPath);
	Parms.HighResolution = HighResolution;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OriginalFileName != nullptr)
		*OriginalFileName = std::move(Parms.OriginalFileName);

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetAllActionKeyBindings
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVictoryInput>*           Bindings                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::VictoryGetAllActionKeyBindings(TArray<struct FVictoryInput>* Bindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryGetAllActionKeyBindings");

	Params::VictoryBPFunctionLibrary_VictoryGetAllActionKeyBindings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bindings != nullptr)
		*Bindings = std::move(Parms.Bindings);
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetAllAxisAndActionMappingsForKey
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVictoryInput>*           ActionBindings                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVictoryInputAxis>*       AxisBindings                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::VictoryGetAllAxisAndActionMappingsForKey(const struct FKey& Key, TArray<struct FVictoryInput>* ActionBindings, TArray<struct FVictoryInputAxis>* AxisBindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryGetAllAxisAndActionMappingsForKey");

	Params::VictoryBPFunctionLibrary_VictoryGetAllAxisAndActionMappingsForKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActionBindings != nullptr)
		*ActionBindings = std::move(Parms.ActionBindings);

	if (AxisBindings != nullptr)
		*AxisBindings = std::move(Parms.AxisBindings);
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetAllAxisKeyBindings
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVictoryInputAxis>*       Bindings                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::VictoryGetAllAxisKeyBindings(TArray<struct FVictoryInputAxis>* Bindings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryGetAllAxisKeyBindings");

	Params::VictoryBPFunctionLibrary_VictoryGetAllAxisKeyBindings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Bindings != nullptr)
		*Bindings = std::move(Parms.Bindings);
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetVictoryInput
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKeyEvent&                 KeyEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVictoryInput                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FVictoryInput UVictoryBPFunctionLibrary::VictoryGetVictoryInput(const struct FKeyEvent& KeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryGetVictoryInput");

	Params::VictoryBPFunctionLibrary_VictoryGetVictoryInput Parms{};

	Parms.KeyEvent = std::move(KeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryGetVictoryInputAxis
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKeyEvent&                 KeyEvent                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVictoryInputAxis                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FVictoryInputAxis UVictoryBPFunctionLibrary::VictoryGetVictoryInputAxis(const struct FKeyEvent& KeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryGetVictoryInputAxis");

	Params::VictoryBPFunctionLibrary_VictoryGetVictoryInputAxis Parms{};

	Parms.KeyEvent = std::move(KeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryPaths__SavedDir
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVictoryBPFunctionLibrary::VictoryPaths__SavedDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryPaths__SavedDir");

	Params::VictoryBPFunctionLibrary_VictoryPaths__SavedDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryPaths__ScreenShotsDir
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVictoryBPFunctionLibrary::VictoryPaths__ScreenShotsDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryPaths__ScreenShotsDir");

	Params::VictoryBPFunctionLibrary_VictoryPaths__ScreenShotsDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryReBindActionKey
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const struct FVictoryInput&             Original                                               (Parm, NativeAccessSpecifierPublic)
// const struct FVictoryInput&             NewBinding                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::VictoryReBindActionKey(const struct FVictoryInput& Original, const struct FVictoryInput& NewBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryReBindActionKey");

	Params::VictoryBPFunctionLibrary_VictoryReBindActionKey Parms{};

	Parms.Original = std::move(Original);
	Parms.NewBinding = std::move(NewBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryReBindAxisKey
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const struct FVictoryInputAxis&         Original                                               (Parm, NativeAccessSpecifierPublic)
// const struct FVictoryInputAxis&         NewBinding                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::VictoryReBindAxisKey(const struct FVictoryInputAxis& Original, const struct FVictoryInputAxis& NewBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryReBindAxisKey");

	Params::VictoryBPFunctionLibrary_VictoryReBindAxisKey Parms{};

	Parms.Original = std::move(Original);
	Parms.NewBinding = std::move(NewBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryRemoveActionKeyBind
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const struct FVictoryInput&             ToRemove                                               (Parm, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::VictoryRemoveActionKeyBind(const struct FVictoryInput& ToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryRemoveActionKeyBind");

	Params::VictoryBPFunctionLibrary_VictoryRemoveActionKeyBind Parms{};

	Parms.ToRemove = std::move(ToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictoryRemoveAxisKeyBind
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const struct FVictoryInputAxis&         ToRemove                                               (Parm, NativeAccessSpecifierPublic)

void UVictoryBPFunctionLibrary::VictoryRemoveAxisKeyBind(const struct FVictoryInputAxis& ToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictoryRemoveAxisKeyBind");

	Params::VictoryBPFunctionLibrary_VictoryRemoveAxisKeyBind Parms{};

	Parms.ToRemove = std::move(ToRemove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VictoryBPFunctionLibrary.VictorySoundVolumeChange
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class USoundClass*                      SoundClassObject                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewVolume                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::VictorySoundVolumeChange(class USoundClass* SoundClassObject, float NewVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "VictorySoundVolumeChange");

	Params::VictoryBPFunctionLibrary_VictorySoundVolumeChange Parms{};

	Parms.SoundClassObject = SoundClassObject;
	Parms.NewVolume = NewVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.Viewport__GetCenterOfViewport
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APlayerController*          ThePC                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  PosX                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  PosY                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::Viewport__GetCenterOfViewport(const class APlayerController* ThePC, float* PosX, float* PosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "Viewport__GetCenterOfViewport");

	Params::VictoryBPFunctionLibrary_Viewport__GetCenterOfViewport Parms{};

	Parms.ThePC = ThePC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PosX != nullptr)
		*PosX = Parms.PosX;

	if (PosY != nullptr)
		*PosY = Parms.PosY;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.WidgetGetParentOfClass
// (Final, BlueprintCosmetic, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UWidget*                          ChildWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UVictoryBPFunctionLibrary::WidgetGetParentOfClass(class UWidget* ChildWidget, TSubclassOf<class UUserWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "WidgetGetParentOfClass");

	Params::VictoryBPFunctionLibrary_WidgetGetParentOfClass Parms{};

	Parms.ChildWidget = ChildWidget;
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VictoryBPFunctionLibrary.WidgetIsChildOf
// (Final, BlueprintCosmetic, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UWidget*                          ChildWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          PossibleParent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVictoryBPFunctionLibrary::WidgetIsChildOf(class UWidget* ChildWidget, class UWidget* PossibleParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VictoryBPFunctionLibrary", "WidgetIsChildOf");

	Params::VictoryBPFunctionLibrary_WidgetIsChildOf Parms{};

	Parms.ChildWidget = ChildWidget;
	Parms.PossibleParent = PossibleParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CustomConsoleManagerOP.XNpcArraySetFaceBlendShapeState
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             StartNpcUID                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             EndNpcUID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOP::XNpcArraySetFaceBlendShapeState(const int32 StartNpcUID, const int32 EndNpcUID, const bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOP", "XNpcArraySetFaceBlendShapeState");

	Params::CustomConsoleManagerOP_XNpcArraySetFaceBlendShapeState Parms{};

	Parms.StartNpcUID = StartNpcUID;
	Parms.EndNpcUID = EndNpcUID;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOP.XNpcFreezeRagdollPose
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOP::XNpcFreezeRagdollPose(const int32 NpcUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOP", "XNpcFreezeRagdollPose");

	Params::CustomConsoleManagerOP_XNpcFreezeRagdollPose Parms{};

	Parms.NpcUID = NpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOP.XNpcSetFaceBlendShapeState
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOP::XNpcSetFaceBlendShapeState(const int32 NpcUID, const bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOP", "XNpcSetFaceBlendShapeState");

	Params::CustomConsoleManagerOP_XNpcSetFaceBlendShapeState Parms{};

	Parms.NpcUID = NpcUID;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOP.XNpcSetFaceBlockingBlendMask
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EFaceBlockingBlendMasks           FaceBlockingMask                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             BlockingWeight                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOP::XNpcSetFaceBlockingBlendMask(const int32 NpcUID, const EFaceBlockingBlendMasks FaceBlockingMask, const float BlockingWeight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOP", "XNpcSetFaceBlockingBlendMask");

	Params::CustomConsoleManagerOP_XNpcSetFaceBlockingBlendMask Parms{};

	Parms.NpcUID = NpcUID;
	Parms.FaceBlockingMask = FaceBlockingMask;
	Parms.BlockingWeight = BlockingWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOP.XNpcSetStateTag
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EStateTag                         StateTag                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOP::XNpcSetStateTag(const int32 NpcUID, const EStateTag StateTag, const bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOP", "XNpcSetStateTag");

	Params::CustomConsoleManagerOP_XNpcSetStateTag Parms{};

	Parms.NpcUID = NpcUID;
	Parms.StateTag = StateTag;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BulbAnomaly.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABulbAnomaly::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulbAnomaly", "OnBeginOverlap");

	Params::BulbAnomaly_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.BulbAnomaly.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABulbAnomaly::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BulbAnomaly", "OnEndOverlap");

	Params::BulbAnomaly_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDR.XDisableCinematicMode
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDR::XDisableCinematicMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDR", "XDisableCinematicMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDR.XEnableCinematicMode
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDR::XEnableCinematicMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDR", "XEnableCinematicMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDR.XInitializeBenchmarkSequence
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    AssetPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDR::XInitializeBenchmarkSequence(const class FString& AssetPath, const class FString& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDR", "XInitializeBenchmarkSequence");

	Params::CustomConsoleManagerDR_XInitializeBenchmarkSequence Parms{};

	Parms.AssetPath = std::move(AssetPath);
	Parms.AssetName = std::move(AssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDR.XForceWeather
// (Final, Exec, Native, Public, Const)
// Parameters:
// const EWeather                          WeatherType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDR::XForceWeather(const EWeather WeatherType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDR", "XForceWeather");

	Params::CustomConsoleManagerDR_XForceWeather Parms{};

	Parms.WeatherType = WeatherType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDR.XSwitchToWeather
// (Final, Exec, Native, Public, Const)
// Parameters:
// const EWeather                          WeatherType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDR::XSwitchToWeather(const EWeather WeatherType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDR", "XSwitchToWeather");

	Params::CustomConsoleManagerDR_XSwitchToWeather Parms{};

	Parms.WeatherType = WeatherType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.DebugUIShowTextSize
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::DebugUIShowTextSize(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "DebugUIShowTextSize");

	Params::CustomConsoleManagerVC_DebugUIShowTextSize Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XAddItemDragToQuickSlot
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   IndexSlot                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XAddItemDragToQuickSlot(int32 IndexSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XAddItemDragToQuickSlot");

	Params::CustomConsoleManagerVC_XAddItemDragToQuickSlot Parms{};

	Parms.IndexSlot = IndexSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XAddNotesById
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    InNotePrototypeID                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XAddNotesById(const class FString& InNotePrototypeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XAddNotesById");

	Params::CustomConsoleManagerVC_XAddNotesById Parms{};

	Parms.InNotePrototypeID = std::move(InNotePrototypeID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XAddPDATutorialsBySID
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    InPDATutorialPrototypeSID                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XAddPDATutorialsBySID(const class FString& InPDATutorialPrototypeSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XAddPDATutorialsBySID");

	Params::CustomConsoleManagerVC_XAddPDATutorialsBySID Parms{};

	Parms.InPDATutorialPrototypeSID = std::move(InPDATutorialPrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XChangeLanguage
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   LanguageIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XChangeLanguage(int32 LanguageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XChangeLanguage");

	Params::CustomConsoleManagerVC_XChangeLanguage Parms{};

	Parms.LanguageIndex = LanguageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XChangeLanguageEN
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XChangeLanguageEN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XChangeLanguageEN");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XChangeLanguageRU
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XChangeLanguageRU()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XChangeLanguageRU");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XDialogFontSizeAnswer
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InTextSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XDialogFontSizeAnswer(int32 InTextSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XDialogFontSizeAnswer");

	Params::CustomConsoleManagerVC_XDialogFontSizeAnswer Parms{};

	Parms.InTextSize = InTextSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XDialogFontSizeSubtitle
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InTextSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XDialogFontSizeSubtitle(int32 InTextSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XDialogFontSizeSubtitle");

	Params::CustomConsoleManagerVC_XDialogFontSizeSubtitle Parms{};

	Parms.InTextSize = InTextSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XEnterRegion
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    RegionSID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XEnterRegion(const class FString& RegionSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XEnterRegion");

	Params::CustomConsoleManagerVC_XEnterRegion Parms{};

	Parms.RegionSID = std::move(RegionSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XHideGameDataAndTime
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XHideGameDataAndTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XHideGameDataAndTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowCompassAngle
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XShowCompassAngle(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowCompassAngle");

	Params::CustomConsoleManagerVC_XShowCompassAngle Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowGameDataAndTime
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowGameDataAndTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowGameDataAndTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowHUD
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bIsShow                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XShowHUD(bool bIsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowHUD");

	Params::CustomConsoleManagerVC_XShowHUD Parms{};

	Parms.bIsShow = bIsShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupAttentionIcon
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupAttentionIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupAttentionIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupBrokenIcon
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupBrokenIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupBrokenIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupCurruptedSaveData
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupCurruptedSaveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupCurruptedSaveData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupDeleteSave
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupDeleteSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupDeleteSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupDiscardChanges
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupDiscardChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupDiscardChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupExitGame
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupExitGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupExitGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupGameCannotBeSaveNow
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupGameCannotBeSaveNow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupGameCannotBeSaveNow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupNoIcon
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupNoIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupNoIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupNotEnoughSpace
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupNotEnoughSpace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupNotEnoughSpace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupOverwriteCampaignSlot
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupOverwriteCampaignSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupOverwriteCampaignSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupOverwriteSavedGame
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupOverwriteSavedGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupOverwriteSavedGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupSaveIcon
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupSaveIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupSaveIcon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupSaveSettings
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupSaveSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupSaveSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowPopupSaveSettinsRestart
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XShowPopupSaveSettinsRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowPopupSaveSettinsRestart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowStatProgres
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XShowStatProgres(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowStatProgres");

	Params::CustomConsoleManagerVC_XShowStatProgres Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XShowUIDebugInput
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVC::XShowUIDebugInput(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XShowUIDebugInput");

	Params::CustomConsoleManagerVC_XShowUIDebugInput Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestJournal
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestJournal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestJournal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestJournalFinishQuest
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestJournalFinishQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestJournalFinishQuest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestPDA
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestPDA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestPDA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotification
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotification");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationAddAudilog
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationAddAudilog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationAddAudilog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationAddItem
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationAddItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationAddItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationAddMoney
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationAddMoney()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationAddMoney");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationAddStash
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationAddStash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationAddStash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationDiscoverRegion
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationDiscoverRegion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationDiscoverRegion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationInspectArtifact
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationInspectArtifact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationInspectArtifact");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationRemoveItem
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationRemoveItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationRemoveItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVC.XTestSysNotificationRemoveMoney
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVC::XTestSysNotificationRemoveMoney()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVC", "XTestSysNotificationRemoveMoney");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StoreButtonStateDefiner.GetSubsystemOptions
// (Final, Native, Protected, Const)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UStoreButtonStateDefiner::GetSubsystemOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreButtonStateDefiner", "GetSubsystemOptions");

	Params::StoreButtonStateDefiner_GetSubsystemOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CustomConsoleManagerMS.XCommitSuicide
// (Final, Exec, Native, Public, Const)
// Parameters:
// EDamageType                             DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMS::XCommitSuicide(EDamageType DamageType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMS", "XCommitSuicide");

	Params::CustomConsoleManagerMS_XCommitSuicide Parms{};

	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMS.XLaunchCustomAnimation
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimSlotName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMS::XLaunchCustomAnimation(int32 ObjUID, const class FString& AnimPath, const class FString& AnimSlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMS", "XLaunchCustomAnimation");

	Params::CustomConsoleManagerMS_XLaunchCustomAnimation Parms{};

	Parms.ObjUID = ObjUID;
	Parms.AnimPath = std::move(AnimPath);
	Parms.AnimSlotName = std::move(AnimSlotName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMS.XSetAIStayGoal
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             ObjUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMS::XSetAIStayGoal(const int32 ObjUID, const class FString& AnimPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMS", "XSetAIStayGoal");

	Params::CustomConsoleManagerMS_XSetAIStayGoal Parms{};

	Parms.ObjUID = ObjUID;
	Parms.AnimPath = std::move(AnimPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMS.XSetCameraShakeScale
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   NewScale                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMS::XSetCameraShakeScale(float NewScale) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMS", "XSetCameraShakeScale");

	Params::CustomConsoleManagerMS_XSetCameraShakeScale Parms{};

	Parms.NewScale = NewScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMS.XShowMaterial
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaterialID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LODId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMS::XShowMaterial(int32 ObjUID, int32 MaterialID, int32 LODId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMS", "XShowMaterial");

	Params::CustomConsoleManagerMS_XShowMaterial Parms{};

	Parms.ObjUID = ObjUID;
	Parms.MaterialID = MaterialID;
	Parms.LODId = LODId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CameraModifier_AbilityCamModifier.ResetCameraTargetLocation
// (Final, Native, Public, BlueprintCallable)

void UCameraModifier_AbilityCamModifier::ResetCameraTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraModifier_AbilityCamModifier", "ResetCameraTargetLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CameraModifier_AbilityCamModifier.UpdateCameraTargetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraModifier_AbilityCamModifier::UpdateCameraTargetLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraModifier_AbilityCamModifier", "UpdateCameraTargetLocation");

	Params::CameraModifier_AbilityCamModifier_UpdateCameraTargetLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomGrid.OnScrollBarScrolled
// (Final, Native, Private)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomGrid::OnScrollBarScrolled(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomGrid", "OnScrollBarScrolled");

	Params::CustomGrid_OnScrollBarScrolled Parms{};

	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomGrid.SetCurrentCellDelayed
// (Final, Native, Private)

void UCustomGrid::SetCurrentCellDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomGrid", "SetCurrentCellDelayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomGrid.SetTargetCellDelayed
// (Final, Native, Private)

void UCustomGrid::SetTargetCellDelayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomGrid", "SetTargetCellDelayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DealDamageComponent.DealDamage
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const class AActor*                     InTargetActor                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDealDamageComponent::DealDamage(const class AActor* InTargetActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DealDamageComponent", "DealDamage");

	Params::DealDamageComponent_DealDamage Parms{};

	Parms.InTargetActor = InTargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlaySoundQuestNodeListener.OnSoundFinished
// (Final, Native, Public)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlaySoundQuestNodeListener::OnSoundFinished(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlaySoundQuestNodeListener", "OnSoundFinished");

	Params::PlaySoundQuestNodeListener_OnSoundFinished Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DebugTextLineWidget.GetIndecRowSettings
// (Final, Native, Protected, HasOutParams)
// Parameters:
// int32                                   CurrentRow                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FRengeSettings>&    RowSettings                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UDebugTextLineWidget::GetIndecRowSettings(int32 CurrentRow, const TArray<struct FRengeSettings>& RowSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DebugTextLineWidget", "GetIndecRowSettings");

	Params::DebugTextLineWidget_GetIndecRowSettings Parms{};

	Parms.CurrentRow = CurrentRow;
	Parms.RowSettings = std::move(RowSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ChangeWidgetSwitcher.PreConstructUpdate
// (Final, Native, Public, BlueprintCallable)

void UChangeWidgetSwitcher::PreConstructUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChangeWidgetSwitcher", "PreConstructUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ChangeWidgetSwitcher.PreDestructUpdate
// (Final, Native, Public, BlueprintCallable)

void UChangeWidgetSwitcher::PreDestructUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChangeWidgetSwitcher", "PreDestructUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CheckBoxWidget.SetChecked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInChecked                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bBrodcastOnChangeCheck                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCheckBoxWidget::SetChecked(const bool bInChecked, const bool bBrodcastOnChangeCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CheckBoxWidget", "SetChecked");

	Params::CheckBoxWidget_SetChecked Parms{};

	Parms.bInChecked = bInChecked;
	Parms.bBrodcastOnChangeCheck = bBrodcastOnChangeCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CheckBoxWidget.GetChecked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCheckBoxWidget::GetChecked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CheckBoxWidget", "GetChecked");

	Params::CheckBoxWidget_GetChecked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.FaustBossComponent.WoundedBark
// (Final, Native, Protected, BlueprintCallable)

void UFaustBossComponent::WoundedBark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FaustBossComponent", "WoundedBark");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ChemicalAnomaly.OnDecalSpawn
// (Event, Protected, BlueprintEvent)

void AChemicalAnomaly::OnDecalSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChemicalAnomaly", "OnDecalSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.PsyVolumeComponent.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPsyVolumeComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PsyVolumeComponent", "OnBeginOverlap");

	Params::PsyVolumeComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PsyVolumeComponent.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPsyVolumeComponent::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PsyVolumeComponent", "OnEndOverlap");

	Params::PsyVolumeComponent_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnCinematicStarted
// (Final, Native, Public)

void UCinematicManager::OnCinematicStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnCinematicStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnCinematicStopped
// (Final, Native, Public)

void UCinematicManager::OnCinematicStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnCinematicStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnFadeScreenEnd
// (Final, Native, Private, HasDefaults)
// Parameters:
// bool                                    bFadeOut                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              FadeTargetColor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeAmount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicManager::OnFadeScreenEnd(bool bFadeOut, const struct FLinearColor& FadeTargetColor, float FadeAmount, float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnFadeScreenEnd");

	Params::CinematicManager_OnFadeScreenEnd Parms{};

	Parms.bFadeOut = bFadeOut;
	Parms.FadeTargetColor = std::move(FadeTargetColor);
	Parms.FadeAmount = FadeAmount;
	Parms.FadeTime = FadeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnKeyFrameSectionEnd
// (Final, Native, Public)
// Parameters:
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicManager::OnKeyFrameSectionEnd(class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnKeyFrameSectionEnd");

	Params::CinematicManager_OnKeyFrameSectionEnd Parms{};

	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnKeyFrameSectionStart
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FCinematicSectionParams&   InCinematicSectionParams                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCinematicManager::OnKeyFrameSectionStart(const struct FCinematicSectionParams& InCinematicSectionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnKeyFrameSectionStart");

	Params::CinematicManager_OnKeyFrameSectionStart Parms{};

	Parms.InCinematicSectionParams = std::move(InCinematicSectionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnSubtitleSectionEnd
// (Final, Native, Public)

void UCinematicManager::OnSubtitleSectionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnSubtitleSectionEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnSubtitleSectionStart
// (Final, Native, Public)
// Parameters:
// const class FString&                    NPCSID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DialogSID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicManager::OnSubtitleSectionStart(const class FString& NPCSID, const class FString& DialogSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnSubtitleSectionStart");

	Params::CinematicManager_OnSubtitleSectionStart Parms{};

	Parms.NPCSID = std::move(NPCSID);
	Parms.DialogSID = std::move(DialogSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnHapticFeedbackEnd
// (Final, Native, Public, Const)
// Parameters:
// const struct FGameplayTag&              ForceFeeedbackEffectTag                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicManager::OnHapticFeedbackEnd(const struct FGameplayTag& ForceFeeedbackEffectTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnHapticFeedbackEnd");

	Params::CinematicManager_OnHapticFeedbackEnd Parms{};

	Parms.ForceFeeedbackEffectTag = std::move(ForceFeeedbackEffectTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CinematicManager.OnHapticFeedbackStart
// (Final, Native, Public, Const)
// Parameters:
// const struct FGameplayTag&              ForceFeeedbackEffectTag                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCinematicManager::OnHapticFeedbackStart(const struct FGameplayTag& ForceFeeedbackEffectTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicManager", "OnHapticFeedbackStart");

	Params::CinematicManager_OnHapticFeedbackStart Parms{};

	Parms.ForceFeeedbackEffectTag = std::move(ForceFeeedbackEffectTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ClassicFireAnomaly.OnStateChanged
// (Event, Protected, BlueprintEvent)

void AClassicFireAnomaly::OnStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClassicFireAnomaly", "OnStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.ClickerAnomaly.OnBeginParticleOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AClickerAnomaly::OnBeginParticleOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClickerAnomaly", "OnBeginParticleOverlap");

	Params::ClickerAnomaly_OnBeginParticleOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FinalCreditsWithVideo.EndVideo
// (Native, Public, BlueprintCallable)

void UFinalCreditsWithVideo::EndVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FinalCreditsWithVideo", "EndVideo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FinalCreditsWithVideo.PlayVideo
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMediaSource*                     VideoToPlay                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFinalCreditsWithVideo::PlayVideo(class UMediaSource* VideoToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FinalCreditsWithVideo", "PlayVideo");

	Params::FinalCreditsWithVideo_PlayVideo Parms{};

	Parms.VideoToPlay = VideoToPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.FinalCreditsWithVideo.GetVideoDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFinalCreditsWithVideo::GetVideoDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FinalCreditsWithVideo", "GetVideoDuration");

	Params::FinalCreditsWithVideo_GetVideoDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CodeComponent.ResetCode
// (Final, Native, Public, BlueprintCallable)

void UCodeComponent::ResetCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CodeComponent", "ResetCode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomSimplifiedGrid.OnScrollBarScrolled
// (Final, Native, Private)
// Parameters:
// float                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomSimplifiedGrid::OnScrollBarScrolled(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSimplifiedGrid", "OnScrollBarScrolled");

	Params::CustomSimplifiedGrid_OnScrollBarScrolled Parms{};

	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Codelock.OnInputCodeFailed
// (Event, Public, BlueprintEvent)

void ACodelock::OnInputCodeFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Codelock", "OnInputCodeFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.Codelock.OnInputCodePassed
// (Event, Public, BlueprintEvent)

void ACodelock::OnInputCodePassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Codelock", "OnInputCodePassed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.Codelock.OnKeyPressed
// (Event, Public, BlueprintEvent)

void ACodelock::OnKeyPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Codelock", "OnKeyPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.FogActor.GetFogParamsForCurrentWeather
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FFogParams                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FFogParams AFogActor::GetFogParamsForCurrentWeather() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FogActor", "GetFogParamsForCurrentWeather");

	Params::FogActor_GetFogParamsForCurrentWeather Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.DeadBody.GetInteractedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AObj*                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AObj* UDeadBody::GetInteractedActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeadBody", "GetInteractedActor");

	Params::DeadBody_GetInteractedActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CodelockSingleClickComponent.Interact
// (Final, Native, Public)
// Parameters:
// class AObj*                             InteractedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCodelockSingleClickComponent::Interact(class AObj* InteractedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CodelockSingleClickComponent", "Interact");

	Params::CodelockSingleClickComponent_Interact Parms{};

	Parms.InteractedActor = InteractedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogManager.OnToggleAudiolog
// (Final, Native, Public)
// Parameters:
// const bool                              bPlayAudiolog                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogManager::OnToggleAudiolog(const bool bPlayAudiolog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogManager", "OnToggleAudiolog");

	Params::DialogManager_OnToggleAudiolog Parms{};

	Parms.bPlayAudiolog = bPlayAudiolog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableComponent.SetDisplayPriority
// (Final, Native, Public, HasOutParams)
// Parameters:
// const EDisplayPriority&                 NewPriority                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractableComponent::SetDisplayPriority(const EDisplayPriority& NewPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableComponent", "SetDisplayPriority");

	Params::InteractableComponent_SetDisplayPriority Parms{};

	Parms.NewPriority = NewPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableComponent.SetEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInEnabled                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInteractableComponent::SetEnabled(const bool bInEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableComponent", "SetEnabled");

	Params::InteractableComponent_SetEnabled Parms{};

	Parms.bInEnabled = bInEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableComponent.GetDisplayPriority
// (Final, Native, Public, Const)
// Parameters:
// const EDisplayPriority                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EDisplayPriority UInteractableComponent::GetDisplayPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableComponent", "GetDisplayPriority");

	Params::InteractableComponent_GetDisplayPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableComponent.GetInteractionType
// (Final, Native, Public, Const)
// Parameters:
// const EInteractionType                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EInteractionType UInteractableComponent::GetInteractionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableComponent", "GetInteractionType");

	Params::InteractableComponent_GetInteractionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.InteractableComponent.GetPreventDefaultInteract
// (Final, Native, Public, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool UInteractableComponent::GetPreventDefaultInteract() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableComponent", "GetPreventDefaultInteract");

	Params::InteractableComponent_GetPreventDefaultInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.PossessedObjectEventData.GetPossessedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UPossessedObjectEventData::GetPossessedObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessedObjectEventData", "GetPossessedObject");

	Params::PossessedObjectEventData_GetPossessedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.HintBase.HoverChangeHintTextColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bShow                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InStylePrefix                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintBase::HoverChangeHintTextColor(const bool bShow, const class FString& InStylePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintBase", "HoverChangeHintTextColor");

	Params::HintBase_HoverChangeHintTextColor Parms{};

	Parms.bShow = bShow;
	Parms.InStylePrefix = std::move(InStylePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintBase.PostShowHover
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bInShow                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintBase::PostShowHover(bool bInShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintBase", "PostShowHover");

	Params::HintBase_PostShowHover Parms{};

	Parms.bInShow = bInShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.HintBase.SetStylePrefix
// (Final, Native, Public)
// Parameters:
// const class FString&                    InStylePrefix                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintBase::SetStylePrefix(const class FString& InStylePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintBase", "SetStylePrefix");

	Params::HintBase_SetStylePrefix Parms{};

	Parms.InStylePrefix = std::move(InStylePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintBase.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHintBase::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintBase", "SetText");

	Params::HintBase_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintBase.UpdateHintWidget
// (Native, Public)

void UHintBase::UpdateHintWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintBase", "UpdateHintWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintBase.GetHoverSettings
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// const TArray<struct FHoverAction>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<struct FHoverAction> UHintBase::GetHoverSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintBase", "GetHoverSettings");

	Params::HintBase_GetHoverSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPoppyFieldAnomalyBehaviorComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoppyFieldAnomalyBehaviorComponent", "OnBeginOverlap");

	Params::PoppyFieldAnomalyBehaviorComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnBeginOverlapFlowers
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPoppyFieldAnomalyBehaviorComponent::OnBeginOverlapFlowers(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoppyFieldAnomalyBehaviorComponent", "OnBeginOverlapFlowers");

	Params::PoppyFieldAnomalyBehaviorComponent_OnBeginOverlapFlowers Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoppyFieldAnomalyBehaviorComponent::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoppyFieldAnomalyBehaviorComponent", "OnEndOverlap");

	Params::PoppyFieldAnomalyBehaviorComponent_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PoppyFieldAnomalyBehaviorComponent.OnEndOverlapFlowers
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoppyFieldAnomalyBehaviorComponent::OnEndOverlapFlowers(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoppyFieldAnomalyBehaviorComponent", "OnEndOverlapFlowers");

	Params::PoppyFieldAnomalyBehaviorComponent_OnEndOverlapFlowers Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XResurrectNPCAsZombie
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XResurrectNPCAsZombie(const int32 NpcUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XResurrectNPCAsZombie");

	Params::CustomConsoleManagerVP_XResurrectNPCAsZombie Parms{};

	Parms.NpcUID = NpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XWoundNpcByUID
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XWoundNpcByUID(const int32 NpcUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XWoundNpcByUID");

	Params::CustomConsoleManagerVP_XWoundNpcByUID Parms{};

	Parms.NpcUID = NpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XKnockDownNpc
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XKnockDownNpc(const int32 NpcUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XKnockDownNpc");

	Params::CustomConsoleManagerVP_XKnockDownNpc Parms{};

	Parms.NpcUID = NpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XKnockDownNpcByAnotherNpc
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttackerNpcUID                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XKnockDownNpcByAnotherNpc(const int32 NpcUID, const int32 AttackerNpcUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XKnockDownNpcByAnotherNpc");

	Params::CustomConsoleManagerVP_XKnockDownNpcByAnotherNpc Parms{};

	Parms.NpcUID = NpcUID;
	Parms.AttackerNpcUID = AttackerNpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XLaunchFacialAnimation
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             ObjUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AnimPath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XLaunchFacialAnimation(const int32 ObjUID, const class FString& AnimPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XLaunchFacialAnimation");

	Params::CustomConsoleManagerVP_XLaunchFacialAnimation Parms{};

	Parms.ObjUID = ObjUID;
	Parms.AnimPath = std::move(AnimPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XLimitNpcBodyPartRotation
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LimitAngle                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERotationPartType                       RotationPartType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XLimitNpcBodyPartRotation(const int32 NpcUID, const float LimitAngle, ERotationPartType RotationPartType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XLimitNpcBodyPartRotation");

	Params::CustomConsoleManagerVP_XLimitNpcBodyPartRotation Parms{};

	Parms.NpcUID = NpcUID;
	Parms.LimitAngle = LimitAngle;
	Parms.RotationPartType = RotationPartType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XNpcLookAt
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XNpcLookAt(const int32 NpcUID, const float X, const float Y, const float Z) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XNpcLookAt");

	Params::CustomConsoleManagerVP_XNpcLookAt Parms{};

	Parms.NpcUID = NpcUID;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XNpcLookAtNPC
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TargetNpcUID                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XNpcLookAtNPC(const int32 NpcUID, const int32 TargetNpcUID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XNpcLookAtNPC");

	Params::CustomConsoleManagerVP_XNpcLookAtNPC Parms{};

	Parms.NpcUID = NpcUID;
	Parms.TargetNpcUID = TargetNpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XNpcSetLookAtOwnerState
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELookAtOwnerState                       LookAtOwnerState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVP::XNpcSetLookAtOwnerState(const int32 NpcUID, ELookAtOwnerState LookAtOwnerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XNpcSetLookAtOwnerState");

	Params::CustomConsoleManagerVP_XNpcSetLookAtOwnerState Parms{};

	Parms.NpcUID = NpcUID;
	Parms.LookAtOwnerState = LookAtOwnerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XReloadAttach
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerVP::XReloadAttach() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XReloadAttach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XReloadAttachTactical
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerVP::XReloadAttachTactical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XReloadAttachTactical");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVP.XShootAttach
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerVP::XShootAttach() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVP", "XShootAttach");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerYS.XSpawnALifeDirectorScenario
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ScenarioSID                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerYS::XSpawnALifeDirectorScenario(const class FString& ScenarioSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerYS", "XSpawnALifeDirectorScenario");

	Params::CustomConsoleManagerYS_XSpawnALifeDirectorScenario Parms{};

	Parms.ScenarioSID = std::move(ScenarioSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickBack
// (Final, Native, Private)

void UPauseGameView::OnClickBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickBackToMainMenu
// (Final, Native, Private)

void UPauseGameView::OnClickBackToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickBackToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickContinue
// (Final, Native, Private)

void UPauseGameView::OnClickContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickContinue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickDebugMaps
// (Final, Native, Private)

void UPauseGameView::OnClickDebugMaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickDebugMaps");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickExit
// (Final, Native, Private)

void UPauseGameView::OnClickExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickLoad
// (Final, Native, Private)

void UPauseGameView::OnClickLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickOnline
// (Final, Native, Private)

void UPauseGameView::OnClickOnline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickOnline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickOptions
// (Final, Native, Private)

void UPauseGameView::OnClickOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickOptions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickPlay
// (Final, Native, Private)

void UPauseGameView::OnClickPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnClickSave
// (Final, Native, Private)

void UPauseGameView::OnClickSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnClickSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.OnItemHovered
// (Final, Native, Private)

void UPauseGameView::OnItemHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "OnItemHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.UIMenuBack
// (Final, Native, Public)

void UPauseGameView::UIMenuBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "UIMenuBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.UIMenuConfirm
// (Final, Native, Public)

void UPauseGameView::UIMenuConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "UIMenuConfirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.UIMenuMoveDown
// (Final, Native, Public)

void UPauseGameView::UIMenuMoveDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "UIMenuMoveDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.UIMenuMoveUp
// (Final, Native, Public)

void UPauseGameView::UIMenuMoveUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "UIMenuMoveUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.UIOptionsBack
// (Final, Native, Public)

void UPauseGameView::UIOptionsBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "UIOptionsBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PauseGameView.UpdateShowDebugMenu
// (Final, Native, Private)

void UPauseGameView::UpdateShowDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseGameView", "UpdateShowDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotificationWidget.HideNotificationMain
// (Final, Native, Private)

void UNotificationWidget::HideNotificationMain()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWidget", "HideNotificationMain");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotificationWidget.HideNotificationSecondary
// (Final, Native, Private)

void UNotificationWidget::HideNotificationSecondary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWidget", "HideNotificationSecondary");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotificationWidget.TryShowNextNotify
// (Final, Native, Private)

void UNotificationWidget::TryShowNextNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWidget", "TryShowNextNotify");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.door.OnDoorMeshHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void Udoor::OnDoorMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("door", "OnDoorMeshHit");

	Params::door_OnDoorMeshHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ContextualNavLinkProxy.OnStartUsingCustomLink
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DestinationPoint                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AContextualNavLinkProxy::OnStartUsingCustomLink(class AActor* MovingActor, const struct FVector& DestinationPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ContextualNavLinkProxy", "OnStartUsingCustomLink");

	Params::ContextualNavLinkProxy_OnStartUsingCustomLink Parms{};

	Parms.MovingActor = MovingActor;
	Parms.DestinationPoint = std::move(DestinationPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.BindInteractPaintMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AffectedActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::BindInteractPaintMaterial(class AActor* AffectedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "BindInteractPaintMaterial");

	Params::CppMediator_BindInteractPaintMaterial Parms{};

	Parms.AffectedActor = AffectedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.CanPlayAudiolog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::CanPlayAudiolog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "CanPlayAudiolog");

	Params::CppMediator_CanPlayAudiolog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.CreateAIEvent
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AObj*                       SenderObj                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ESoundEventType                   EventType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::CreateAIEvent(const class AObj* SenderObj, const struct FVector& Location, const ESoundEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "CreateAIEvent");

	Params::CppMediator_CreateAIEvent Parms{};

	Parms.SenderObj = SenderObj;
	Parms.Location = std::move(Location);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.CreateAIVoiceEvent
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AObj*                       SenderObj                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::CreateAIVoiceEvent(const class AObj* SenderObj, const struct FVector& Location, const struct FVector& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "CreateAIVoiceEvent");

	Params::CppMediator_CreateAIVoiceEvent Parms{};

	Parms.SenderObj = SenderObj;
	Parms.Location = std::move(Location);
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.DespawnSearchPoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::DespawnSearchPoint(const class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "DespawnSearchPoint");

	Params::CppMediator_DespawnSearchPoint Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.GetActiveMainQuests
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FJournalQuest>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FJournalQuest> UCppMediator::GetActiveMainQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetActiveMainQuests");

	Params::CppMediator_GetActiveMainQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetActiveSecondaryQuests
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FJournalQuest>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FJournalQuest> UCppMediator::GetActiveSecondaryQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetActiveSecondaryQuests");

	Params::CppMediator_GetActiveSecondaryQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetActorByGuid
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGuid&                     TargetGUID                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UCppMediator::GetActorByGuid(const struct FGuid& TargetGUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetActorByGuid");

	Params::CppMediator_GetActorByGuid Parms{};

	Parms.TargetGUID = std::move(TargetGUID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetAnomalyCullingRadius
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCppMediator::GetAnomalyCullingRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetAnomalyCullingRadius");

	Params::CppMediator_GetAnomalyCullingRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetAudiologAudioTimeSeconds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UCppMediator::GetAudiologAudioTimeSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetAudiologAudioTimeSeconds");

	Params::CppMediator_GetAudiologAudioTimeSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetCurrentAudiologDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCppMediator::GetCurrentAudiologDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetCurrentAudiologDuration");

	Params::CppMediator_GetCurrentAudiologDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetCurrentAudiologPlayedTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCppMediator::GetCurrentAudiologPlayedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetCurrentAudiologPlayedTime");

	Params::CppMediator_GetCurrentAudiologPlayedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetEmissionLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCppMediator::GetEmissionLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetEmissionLocation");

	Params::CppMediator_GetEmissionLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetFailedQuests
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FJournalQuest>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FJournalQuest> UCppMediator::GetFailedQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetFailedQuests");

	Params::CppMediator_GetFailedQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetFinishedQuests
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FJournalQuest>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FJournalQuest> UCppMediator::GetFinishedQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetFinishedQuests");

	Params::CppMediator_GetFinishedQuests Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetFocusedEnemy
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AObj*                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AObj* UCppMediator::GetFocusedEnemy(const class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetFocusedEnemy");

	Params::CppMediator_GetFocusedEnemy Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetGUID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCppMediator::GetGUID(const class AObj* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetGUID");

	Params::CppMediator_GetGUID Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetItemsCountInInventory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ItemName                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCppMediator::GetItemsCountInInventory(const class AObj* Obj, const class FString& ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetItemsCountInInventory");

	Params::CppMediator_GetItemsCountInInventory Parms{};

	Parms.Obj = Obj;
	Parms.ItemName = std::move(ItemName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetMeshGenerators
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class UMeshGeneratorEditor*>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMeshGeneratorEditor*> UCppMediator::GetMeshGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetMeshGenerators");

	Params::CppMediator_GetMeshGenerators Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetNotePrototypeIDs
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UCppMediator::GetNotePrototypeIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetNotePrototypeIDs");

	Params::CppMediator_GetNotePrototypeIDs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetNotificationAudiologDelay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCppMediator::GetNotificationAudiologDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetNotificationAudiologDelay");

	Params::CppMediator_GetNotificationAudiologDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetPrototypeID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCppMediator::GetPrototypeID(const class AObj* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetPrototypeID");

	Params::CppMediator_GetPrototypeID Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.GetSkyLightUpdateDeltaTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCppMediator::GetSkyLightUpdateDeltaTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "GetSkyLightUpdateDeltaTime");

	Params::CppMediator_GetSkyLightUpdateDeltaTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.HasAnySignal
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::HasAnySignal(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "HasAnySignal");

	Params::CppMediator_HasAnySignal Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.HasValidGUID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::HasValidGUID(const class AObj* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "HasValidGUID");

	Params::CppMediator_HasValidGUID Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsActorInGameWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToCheck                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsActorInGameWorld(class AActor* ActorToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsActorInGameWorld");

	Params::CppMediator_IsActorInGameWorld Parms{};

	Parms.ActorToCheck = ActorToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsEmissionActive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsEmissionActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsEmissionActive");

	Params::CppMediator_IsEmissionActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsFarAwayFromPlayer
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsFarAwayFromPlayer(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsFarAwayFromPlayer");

	Params::CppMediator_IsFarAwayFromPlayer Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsGamePlaying
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsGamePlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsGamePlaying");

	Params::CppMediator_IsGamePlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsInteractionPaintEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsInteractionPaintEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsInteractionPaintEnabled");

	Params::CppMediator_IsInteractionPaintEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsMoving
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsMoving(const class AObj* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsMoving");

	Params::CppMediator_IsMoving Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsNaniteEnabledForMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UStaticMesh*                Mesh                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsNaniteEnabledForMesh(const class UStaticMesh* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsNaniteEnabledForMesh");

	Params::CppMediator_IsNaniteEnabledForMesh Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsObjAlive
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsObjAlive(const class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsObjAlive");

	Params::CppMediator_IsObjAlive Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsPendingLoadQuickSave
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsPendingLoadQuickSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsPendingLoadQuickSave");

	Params::CppMediator_IsPendingLoadQuickSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsQuestSelected
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJournalQuest&             JournalQuest                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsQuestSelected(const struct FJournalQuest& JournalQuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsQuestSelected");

	Params::CppMediator_IsQuestSelected Parms{};

	Parms.JournalQuest = std::move(JournalQuest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsRunningWorldPartitionMigrationFromCommandlet
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsRunningWorldPartitionMigrationFromCommandlet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsRunningWorldPartitionMigrationFromCommandlet");

	Params::CppMediator_IsRunningWorldPartitionMigrationFromCommandlet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsSoundInProximity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAkAudioEvent*              AudioEvent                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsSoundInProximity(const struct FVector& Location, const class UAkAudioEvent* AudioEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsSoundInProximity");

	Params::CppMediator_IsSoundInProximity Parms{};

	Parms.Location = std::move(Location);
	Parms.AudioEvent = AudioEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.IsWalking
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::IsWalking(const class AObj* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "IsWalking");

	Params::CppMediator_IsWalking Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.LerpPlayerToLocationAndRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCppMediator::LerpPlayerToLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "LerpPlayerToLocationAndRotation");

	Params::CppMediator_LerpPlayerToLocationAndRotation Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.LogError
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Sender                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    errorMessage                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::LogError(class AActor* Sender, const class FString& errorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "LogError");

	Params::CppMediator_LogError Parms{};

	Parms.Sender = Sender;
	Parms.errorMessage = std::move(errorMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.MakeInvalidGUID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCppMediator::MakeInvalidGUID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "MakeInvalidGUID");

	Params::CppMediator_MakeInvalidGUID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.MakeInvulnerable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::MakeInvulnerable(const class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "MakeInvulnerable");

	Params::CppMediator_MakeInvulnerable Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.MakeItemContainerUID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   RawInt32                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FItemContainerUID                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FItemContainerUID UCppMediator::MakeItemContainerUID(int32 RawInt32)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "MakeItemContainerUID");

	Params::CppMediator_MakeItemContainerUID Parms{};

	Parms.RawInt32 = RawInt32;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.MakeItemUID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   RawInt32                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FItemUID                         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FItemUID UCppMediator::MakeItemUID(int32 RawInt32)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "MakeItemUID");

	Params::CppMediator_MakeItemUID Parms{};

	Parms.RawInt32 = RawInt32;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.ObjGetHP
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCppMediator::ObjGetHP(const class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "ObjGetHP");

	Params::CppMediator_ObjGetHP Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.OnToggleAudiolog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const bool                              bPlayAudiolog                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::OnToggleAudiolog(const bool bPlayAudiolog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "OnToggleAudiolog");

	Params::CppMediator_OnToggleAudiolog Parms{};

	Parms.bPlayAudiolog = bPlayAudiolog;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.QuestInteractionComponentFinishAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInteractionComponent*            InteractionComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LauncherName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::QuestInteractionComponentFinishAction(class UInteractionComponent* InteractionComponent, const class FString& LauncherName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "QuestInteractionComponentFinishAction");

	Params::CppMediator_QuestInteractionComponentFinishAction Parms{};

	Parms.InteractionComponent = InteractionComponent;
	Parms.LauncherName = std::move(LauncherName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.ReloadConfigPrototypes
// (Final, Native, Static, Public, BlueprintCallable)

void UCppMediator::ReloadConfigPrototypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "ReloadConfigPrototypes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.RequestSaveSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UCppMediator::RequestSaveSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "RequestSaveSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.ResetComponentVelocity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class USceneComponent*            Component                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::ResetComponentVelocity(const class USceneComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "ResetComponentVelocity");

	Params::CppMediator_ResetComponentVelocity Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.ResetInvulnerable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::ResetInvulnerable(const class AObj* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "ResetInvulnerable");

	Params::CppMediator_ResetInvulnerable Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.ResetSelectedSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UCppMediator::ResetSelectedSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "ResetSelectedSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.RuntimeGetWorld
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UCppMediator::RuntimeGetWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "RuntimeGetWorld");

	Params::CppMediator_RuntimeGetWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.SaveCharacter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CharacterSID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UMeshGeneratorEditor*       MeshGenerator                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bSaveObj                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bSaveItemGenerator                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveObjConfigPath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParentItemGenerator                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    NewRank                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SaveCharacter(const class FString& CharacterSID, const class UMeshGeneratorEditor* MeshGenerator, const bool bSaveObj, const bool bSaveItemGenerator, const class FString& SaveObjConfigPath, const class FString& ParentItemGenerator, const class FString& NewRank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SaveCharacter");

	Params::CppMediator_SaveCharacter Parms{};

	Parms.CharacterSID = std::move(CharacterSID);
	Parms.MeshGenerator = MeshGenerator;
	Parms.bSaveObj = bSaveObj;
	Parms.bSaveItemGenerator = bSaveItemGenerator;
	Parms.SaveObjConfigPath = std::move(SaveObjConfigPath);
	Parms.ParentItemGenerator = std::move(ParentItemGenerator);
	Parms.NewRank = std::move(NewRank);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SelectCurrentSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESettingCategoryType                    SettingCategoryType                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SelectCurrentSettings(ESettingCategoryType SettingCategoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SelectCurrentSettings");

	Params::CppMediator_SelectCurrentSettings Parms{};

	Parms.SettingCategoryType = SettingCategoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SerializeCoverOffsetsToConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UHumanDefaultAnimCollection*HumanDefaultAnimCollection                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SerializeCoverOffsetsToConfig(const class UHumanDefaultAnimCollection* HumanDefaultAnimCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SerializeCoverOffsetsToConfig");

	Params::CppMediator_SerializeCoverOffsetsToConfig Parms{};

	Parms.HumanDefaultAnimCollection = HumanDefaultAnimCollection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetAimMouseSensitivityCoef
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InAimMouseSensitivityCoef                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetAimMouseSensitivityCoef(float InAimMouseSensitivityCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetAimMouseSensitivityCoef");

	Params::CppMediator_SetAimMouseSensitivityCoef Parms{};

	Parms.InAimMouseSensitivityCoef = InAimMouseSensitivityCoef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetDialogueVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InDialogueVolume                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetDialogueVolume(float InDialogueVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetDialogueVolume");

	Params::CppMediator_SetDialogueVolume Parms{};

	Parms.InDialogueVolume = InDialogueVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetEffectsVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InEffectsVolume                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetEffectsVolume(float InEffectsVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetEffectsVolume");

	Params::CppMediator_SetEffectsVolume Parms{};

	Parms.InEffectsVolume = InEffectsVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetMainVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InVolume                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetMainVolume(float InVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetMainVolume");

	Params::CppMediator_SetMainVolume Parms{};

	Parms.InVolume = InVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetMeshNaniteSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UStaticMesh*                Mesh                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetMeshNaniteSettings(const class UStaticMesh* Mesh, const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetMeshNaniteSettings");

	Params::CppMediator_SetMeshNaniteSettings Parms{};

	Parms.Mesh = Mesh;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetMouseSensitivityCoef
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InMouseSensitivityCoef                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetMouseSensitivityCoef(float InMouseSensitivityCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetMouseSensitivityCoef");

	Params::CppMediator_SetMouseSensitivityCoef Parms{};

	Parms.InMouseSensitivityCoef = InMouseSensitivityCoef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetMusicVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   InMusicVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetMusicVolume(float InMusicVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetMusicVolume");

	Params::CppMediator_SetMusicVolume Parms{};

	Parms.InMusicVolume = InMusicVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetMuteAllVolume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bInMuteAllVolume                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetMuteAllVolume(bool bInMuteAllVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetMuteAllVolume");

	Params::CppMediator_SetMuteAllVolume Parms{};

	Parms.bInMuteAllVolume = bInMuteAllVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetSelectedAudioLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ELocalizationLanguage                   InSelectedLanguage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetSelectedAudioLanguage(ELocalizationLanguage InSelectedLanguage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetSelectedAudioLanguage");

	Params::CppMediator_SetSelectedAudioLanguage Parms{};

	Parms.InSelectedLanguage = InSelectedLanguage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetSelectedLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ELocalizationLanguage                   InSelectedLanguage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetSelectedLanguage(ELocalizationLanguage InSelectedLanguage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetSelectedLanguage");

	Params::CppMediator_SetSelectedLanguage Parms{};

	Parms.InSelectedLanguage = InSelectedLanguage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetSelectedTextLanguage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ELocalizationLanguage                   InSelectedLanguage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetSelectedTextLanguage(ELocalizationLanguage InSelectedLanguage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetSelectedTextLanguage");

	Params::CppMediator_SetSelectedTextLanguage Parms{};

	Parms.InSelectedLanguage = InSelectedLanguage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SettingsManagerApplySettings
// (Final, Native, Static, Public, BlueprintCallable)

void UCppMediator::SettingsManagerApplySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SettingsManagerApplySettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SettingsManagerCacheCurrentSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UCppMediator::SettingsManagerCacheCurrentSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SettingsManagerCacheCurrentSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SettingsManagerRestoreCachedSettings
// (Final, Native, Static, Public, BlueprintCallable)

void UCppMediator::SettingsManagerRestoreCachedSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SettingsManagerRestoreCachedSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SetupMaterialForInteractPaint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   AffectedMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>YellowPaintMaterial                                    (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>DefaultMaterial                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bPaintEnabled                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MaterialSlot                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SetupMaterialForInteractPaint(class UMeshComponent* AffectedMesh, TSoftObjectPtr<class UMaterialInterface> YellowPaintMaterial, TSoftObjectPtr<class UMaterialInterface> DefaultMaterial, const bool bPaintEnabled, const int32 MaterialSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SetupMaterialForInteractPaint");

	Params::CppMediator_SetupMaterialForInteractPaint Parms{};

	Parms.AffectedMesh = AffectedMesh;
	Parms.YellowPaintMaterial = YellowPaintMaterial;
	Parms.DefaultMaterial = DefaultMaterial;
	Parms.bPaintEnabled = bPaintEnabled;
	Parms.MaterialSlot = MaterialSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.ShouldUpdateSolarTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   PrevSolarTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SolarTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UpdateSunDeltaTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCppMediator::ShouldUpdateSolarTime(float PrevSolarTime, float SolarTime, float UpdateSunDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "ShouldUpdateSolarTime");

	Params::CppMediator_ShouldUpdateSolarTime Parms{};

	Parms.PrevSolarTime = PrevSolarTime;
	Parms.SolarTime = SolarTime;
	Parms.UpdateSunDeltaTime = UpdateSunDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.SpawnSearchPoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AObj*                       Obj                                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShowOnMap                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShowOnCompass                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::SpawnSearchPoint(const class AObj* Obj, const bool bShowOnMap, const bool bShowOnCompass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SpawnSearchPoint");

	Params::CppMediator_SpawnSearchPoint Parms{};

	Parms.Obj = Obj;
	Parms.bShowOnMap = bShowOnMap;
	Parms.bShowOnCompass = bShowOnCompass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.SpawnTriplanarDecalAtLocation
// (Final, BlueprintCosmetic, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               DecalMaterial                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DecalSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   LifeSpan                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTriplanarDecalComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTriplanarDecalComponent* UCppMediator::SpawnTriplanarDecalAtLocation(const class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "SpawnTriplanarDecalAtLocation");

	Params::CppMediator_SpawnTriplanarDecalAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DecalMaterial = DecalMaterial;
	Parms.DecalSize = std::move(DecalSize);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LifeSpan = LifeSpan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.StartQuestNode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPrototypeSID&             SID                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::StartQuestNode(const struct FPrototypeSID& SID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "StartQuestNode");

	Params::CppMediator_StartQuestNode Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.UIManagerGenerateAndGetDefaultNameSave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCppMediator::UIManagerGenerateAndGetDefaultNameSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "UIManagerGenerateAndGetDefaultNameSave");

	Params::CppMediator_UIManagerGenerateAndGetDefaultNameSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.CppMediator.UIManagerOnQuestDeselected
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PrototypeID                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::UIManagerOnQuestDeselected(const class FString& PrototypeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "UIManagerOnQuestDeselected");

	Params::CppMediator_UIManagerOnQuestDeselected Parms{};

	Parms.PrototypeID = std::move(PrototypeID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CppMediator.UnbindInteractPaintMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AffectedActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCppMediator::UnbindInteractPaintMaterial(class AActor* AffectedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CppMediator", "UnbindInteractPaintMaterial");

	Params::CppMediator_UnbindInteractPaintMaterial Parms{};

	Parms.AffectedActor = AffectedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomButton.OnClick
// (Final, Native, Public)

void UCustomButton::OnClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomButton", "OnClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomButton.OnPress
// (Final, Native, Public)

void UCustomButton::OnPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomButton", "OnPress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetAkVisualizationRadius
// (Final, Exec, Native, Public)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetAkVisualizationRadius(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetAkVisualizationRadius");

	Params::CustomConsoleManagerAA_XSetAkVisualizationRadius Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSimulateWaitForProfileSettingUp
// (Final, Exec, Native, Public)
// Parameters:
// const float                             SetupDuration                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSimulateWaitForProfileSettingUp(const float SetupDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSimulateWaitForProfileSettingUp");

	Params::CustomConsoleManagerAA_XSimulateWaitForProfileSettingUp Parms{};

	Parms.SetupDuration = SetupDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XToggleAkVisualization
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Types                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XToggleAkVisualization(const class FString& Types)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XToggleAkVisualization");

	Params::CustomConsoleManagerAA_XToggleAkVisualization Parms{};

	Parms.Types = std::move(Types);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XTryReceiveSignal
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Guid                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XTryReceiveSignal(const class FString& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XTryReceiveSignal");

	Params::CustomConsoleManagerAA_XTryReceiveSignal Parms{};

	Parms.Guid = std::move(Guid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.OnWaitForProfileSimulationFinished
// (Final, Native, Private, Const)

void UCustomConsoleManagerAA::OnWaitForProfileSimulationFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "OnWaitForProfileSimulationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XAddAllNotes
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XAddAllNotes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XAddAllNotes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XAddMoneyToPlayer
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XAddMoneyToPlayer(int32 Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XAddMoneyToPlayer");

	Params::CustomConsoleManagerAA_XAddMoneyToPlayer Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XCheckGamedata
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XCheckGamedata() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XCheckGamedata");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XClearDialogQueue
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XClearDialogQueue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XClearDialogQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XDebugAddHelloDialogsToQueue
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             TargetUID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             DialogsCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XDebugAddHelloDialogsToQueue(const int32 TargetUID, const int32 DialogsCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XDebugAddHelloDialogsToQueue");

	Params::CustomConsoleManagerAA_XDebugAddHelloDialogsToQueue Parms{};

	Parms.TargetUID = TargetUID;
	Parms.DialogsCount = DialogsCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XDespawnAliveNPCsAtRadius
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XDespawnAliveNPCsAtRadius(float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XDespawnAliveNPCsAtRadius");

	Params::CustomConsoleManagerAA_XDespawnAliveNPCsAtRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XDespawnDeadNPCsAtRadius
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XDespawnDeadNPCsAtRadius(float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XDespawnDeadNPCsAtRadius");

	Params::CustomConsoleManagerAA_XDespawnDeadNPCsAtRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XDespawnNPCsAtRadius
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XDespawnNPCsAtRadius(float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XDespawnNPCsAtRadius");

	Params::CustomConsoleManagerAA_XDespawnNPCsAtRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XDiscoverAllMarkers
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XDiscoverAllMarkers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XDiscoverAllMarkers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XDiscoverMarker
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    MarkerSID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XDiscoverMarker(const class FString& MarkerSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XDiscoverMarker");

	Params::CustomConsoleManagerAA_XDiscoverMarker Parms{};

	Parms.MarkerSID = std::move(MarkerSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XEndQuest
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XEndQuest(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XEndQuest");

	Params::CustomConsoleManagerAA_XEndQuest Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XEndQuestBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XEndQuestBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XEndQuestBySID");

	Params::CustomConsoleManagerAA_XEndQuestBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XEndQuestNode
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XEndQuestNode(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XEndQuestNode");

	Params::CustomConsoleManagerAA_XEndQuestNode Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XEndQuestNodeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XEndQuestNodeBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XEndQuestNodeBySID");

	Params::CustomConsoleManagerAA_XEndQuestNodeBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XExcludeQuest
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XExcludeQuest(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XExcludeQuest");

	Params::CustomConsoleManagerAA_XExcludeQuest Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XExcludeQuestBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XExcludeQuestBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XExcludeQuestBySID");

	Params::CustomConsoleManagerAA_XExcludeQuestBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XExcludeQuestNode
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XExcludeQuestNode(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XExcludeQuestNode");

	Params::CustomConsoleManagerAA_XExcludeQuestNode Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XExcludeQuestNodeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XExcludeQuestNodeBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XExcludeQuestNodeBySID");

	Params::CustomConsoleManagerAA_XExcludeQuestNodeBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XFindNonEndingDialogs
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XFindNonEndingDialogs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XFindNonEndingDialogs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XKillNPCInRadius
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MinimalReputationToKill                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxReputationToKill                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XKillNPCInRadius(float Radius, const int32 MinimalReputationToKill, int32 MaxReputationToKill) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XKillNPCInRadius");

	Params::CustomConsoleManagerAA_XKillNPCInRadius Parms{};

	Parms.Radius = Radius;
	Parms.MinimalReputationToKill = MinimalReputationToKill;
	Parms.MaxReputationToKill = MaxReputationToKill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XListMapMarkers
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    MarkerType                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XListMapMarkers(const class FString& MarkerType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XListMapMarkers");

	Params::CustomConsoleManagerAA_XListMapMarkers Parms{};

	Parms.MarkerType = std::move(MarkerType);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XPlayCommentFromPool
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    DialogEventTypeName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NPCUIDValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XPlayCommentFromPool(const class FString& DialogEventTypeName, int32 NPCUIDValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XPlayCommentFromPool");

	Params::CustomConsoleManagerAA_XPlayCommentFromPool Parms{};

	Parms.DialogEventTypeName = std::move(DialogEventTypeName);
	Parms.NPCUIDValue = NPCUIDValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XPlayDialogFromPool
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    DialogEventTypeName                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NPCUIDValue1                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NPCUIDValue2                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XPlayDialogFromPool(const class FString& DialogEventTypeName, int32 NPCUIDValue1, int32 NPCUIDValue2) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XPlayDialogFromPool");

	Params::CustomConsoleManagerAA_XPlayDialogFromPool Parms{};

	Parms.DialogEventTypeName = std::move(DialogEventTypeName);
	Parms.NPCUIDValue1 = NPCUIDValue1;
	Parms.NPCUIDValue2 = NPCUIDValue2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XPlayDialogLine
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             SpeakerUID                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DialogPrototypeSID                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XPlayDialogLine(const int32 SpeakerUID, const class FString& DialogPrototypeSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XPlayDialogLine");

	Params::CustomConsoleManagerAA_XPlayDialogLine Parms{};

	Parms.SpeakerUID = SpeakerUID;
	Parms.DialogPrototypeSID = std::move(DialogPrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XPrintGlobalVariable
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XPrintGlobalVariable(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XPrintGlobalVariable");

	Params::CustomConsoleManagerAA_XPrintGlobalVariable Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XResetQuestBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XResetQuestBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XResetQuestBySID");

	Params::CustomConsoleManagerAA_XResetQuestBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XResetRandomNode
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XResetRandomNode(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XResetRandomNode");

	Params::CustomConsoleManagerAA_XResetRandomNode Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XResetRandomNodeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XResetRandomNodeBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XResetRandomNodeBySID");

	Params::CustomConsoleManagerAA_XResetRandomNodeBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XRestartCurrentDialog
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XRestartCurrentDialog() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XRestartCurrentDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XRevealAllMarkers
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XRevealAllMarkers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XRevealAllMarkers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetAudioLanguage
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    LocaleString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetAudioLanguage(const class FString& LocaleString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetAudioLanguage");

	Params::CustomConsoleManagerAA_XSetAudioLanguage Parms{};

	Parms.LocaleString = std::move(LocaleString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetDifficultySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    DifficultySID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetDifficultySID(const class FString& DifficultySID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetDifficultySID");

	Params::CustomConsoleManagerAA_XSetDifficultySID Parms{};

	Parms.DifficultySID = std::move(DifficultySID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetGameTime
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             Hour                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Minute                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Second                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetGameTime(const int32 Hour, const int32 Minute, const int32 Second) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetGameTime");

	Params::CustomConsoleManagerAA_XSetGameTime Parms{};

	Parms.Hour = Hour;
	Parms.Minute = Minute;
	Parms.Second = Second;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetRandomNodeDefinedPin
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PinNumber                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetRandomNodeDefinedPin(const class FString& ID, int32 PinNumber) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetRandomNodeDefinedPin");

	Params::CustomConsoleManagerAA_XSetRandomNodeDefinedPin Parms{};

	Parms.ID = std::move(ID);
	Parms.PinNumber = PinNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetRandomNodeDefinedPinBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PinNumber                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetRandomNodeDefinedPinBySID(const class FString& SID, int32 PinNumber) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetRandomNodeDefinedPinBySID");

	Params::CustomConsoleManagerAA_XSetRandomNodeDefinedPinBySID Parms{};

	Parms.SID = std::move(SID);
	Parms.PinNumber = PinNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetRelationsInRadius
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RelationValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetRelationsInRadius(float Radius, int32 RelationValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetRelationsInRadius");

	Params::CustomConsoleManagerAA_XSetRelationsInRadius Parms{};

	Parms.Radius = Radius;
	Parms.RelationValue = RelationValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetSearchpointDebugState
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bState                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetSearchpointDebugState(bool bState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetSearchpointDebugState");

	Params::CustomConsoleManagerAA_XSetSearchpointDebugState Parms{};

	Parms.bState = bState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetTextLanguage
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    LocaleString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetTextLanguage(const class FString& LocaleString) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetTextLanguage");

	Params::CustomConsoleManagerAA_XSetTextLanguage Parms{};

	Parms.LocaleString = std::move(LocaleString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetTimeSpeed
// (Final, Exec, Native, Public, Const)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetTimeSpeed(float Speed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetTimeSpeed");

	Params::CustomConsoleManagerAA_XSetTimeSpeed Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSetWeatherTime
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             Hour                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Minute                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Second                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSetWeatherTime(const int32 Hour, const int32 Minute, const int32 Second) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSetWeatherTime");

	Params::CustomConsoleManagerAA_XSetWeatherTime Parms{};

	Parms.Hour = Hour;
	Parms.Minute = Minute;
	Parms.Second = Second;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XShowCurrentImportantChoices
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XShowCurrentImportantChoices() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XShowCurrentImportantChoices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XShowCurrentLocation
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XShowCurrentLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XShowCurrentLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XShowHubOwner
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    HubSID                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XShowHubOwner(const class FString& HubSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XShowHubOwner");

	Params::CustomConsoleManagerAA_XShowHubOwner Parms{};

	Parms.HubSID = std::move(HubSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XShowQuestTriggers
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bShow                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XShowQuestTriggers(const bool bShow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XShowQuestTriggers");

	Params::CustomConsoleManagerAA_XShowQuestTriggers Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XShowSpawnDebugInfo
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              Show                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XShowSpawnDebugInfo(const bool Show) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XShowSpawnDebugInfo");

	Params::CustomConsoleManagerAA_XShowSpawnDebugInfo Parms{};

	Parms.Show = Show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSkipInfotopicRefreshCooldown
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XSkipInfotopicRefreshCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSkipInfotopicRefreshCooldown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XSkipToQuestNode
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XSkipToQuestNode(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XSkipToQuestNode");

	Params::CustomConsoleManagerAA_XSkipToQuestNode Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XStartQuest
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XStartQuest(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XStartQuest");

	Params::CustomConsoleManagerAA_XStartQuest Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XStartQuestBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XStartQuestBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XStartQuestBySID");

	Params::CustomConsoleManagerAA_XStartQuestBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XStartQuestNode
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XStartQuestNode(const class FString& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XStartQuestNode");

	Params::CustomConsoleManagerAA_XStartQuestNode Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XStartQuestNodeBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XStartQuestNodeBySID(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XStartQuestNodeBySID");

	Params::CustomConsoleManagerAA_XStartQuestNodeBySID Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XTeleportNPCToPlayer
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    NPCSID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XTeleportNPCToPlayer(const class FString& NPCSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XTeleportNPCToPlayer");

	Params::CustomConsoleManagerAA_XTeleportNPCToPlayer Parms{};

	Parms.NPCSID = std::move(NPCSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XTeleportNPCToSpawn
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    NPCSID                                                 (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XTeleportNPCToSpawn(const class FString& NPCSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XTeleportNPCToSpawn");

	Params::CustomConsoleManagerAA_XTeleportNPCToSpawn Parms{};

	Parms.NPCSID = std::move(NPCSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XTestJournalQuestRewardCategory
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    QuestSID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAA::XTestJournalQuestRewardCategory(const class FString& QuestSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XTestJournalQuestRewardCategory");

	Params::CustomConsoleManagerAA_XTestJournalQuestRewardCategory Parms{};

	Parms.QuestSID = std::move(QuestSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAA.XToggleArtifactSpawnerDebugInfo
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerAA::XToggleArtifactSpawnerDebugInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAA", "XToggleArtifactSpawnerDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAI2.XSetRelation
// (Final, Exec, Native, Public, Const)
// Parameters:
// const int32                             FirstUID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SecondUID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Relation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAI2::XSetRelation(const int32 FirstUID, const int32 SecondUID, const int32 Relation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAI2", "XSetRelation");

	Params::CustomConsoleManagerAI2_XSetRelation Parms{};

	Parms.FirstUID = FirstUID;
	Parms.SecondUID = SecondUID;
	Parms.Relation = Relation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SettingElementSwitcher.SortValues
// (Final, Native, Private)

void USettingElementSwitcher::SortValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingElementSwitcher", "SortValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.GetRelationBetween
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             LHS                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             RHS                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::GetRelationBetween(const int32 LHS, const int32 RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "GetRelationBetween");

	Params::CustomConsoleManagerAM_GetRelationBetween Parms{};

	Parms.LHS = LHS;
	Parms.RHS = RHS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.StartFollowing
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             TargetUID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bLockOrientation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const double                            ZOffset                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::StartFollowing(const int32 TargetUID, const bool bLockOrientation, const double ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "StartFollowing");

	Params::CustomConsoleManagerAM_StartFollowing Parms{};

	Parms.TargetUID = TargetUID;
	Parms.bLockOrientation = bLockOrientation;
	Parms.ZOffset = ZOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.StopFollowing
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAM::StopFollowing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "StopFollowing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XActivateAIFeature
// (Final, Exec, Native, Public)
// Parameters:
// const EAIFeature                        Feature                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XActivateAIFeature(const EAIFeature Feature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XActivateAIFeature");

	Params::CustomConsoleManagerAM_XActivateAIFeature Parms{};

	Parms.Feature = Feature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XAddMoveTo
// (Final, Exec, Native, Private)
// Parameters:
// int32                                   UID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XAddMoveTo(int32 UID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XAddMoveTo");

	Params::CustomConsoleManagerAM_XAddMoveTo Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XCallQuickLoad
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Angular                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XCallQuickLoad(float Angular)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XCallQuickLoad");

	Params::CustomConsoleManagerAM_XCallQuickLoad Parms{};

	Parms.Angular = Angular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XCallQuickSave
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Angular                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XCallQuickSave(float Angular)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XCallQuickSave");

	Params::CustomConsoleManagerAM_XCallQuickSave Parms{};

	Parms.Angular = Angular;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XDeactivateAIFeature
// (Final, Exec, Native, Public)
// Parameters:
// const EAIFeature                        Feature                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XDeactivateAIFeature(const EAIFeature Feature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XDeactivateAIFeature");

	Params::CustomConsoleManagerAM_XDeactivateAIFeature Parms{};

	Parms.Feature = Feature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XMoveToPlayer
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   NPC_UID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementBehaviour                      Behaviour                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XMoveToPlayer(int32 NPC_UID, EMovementBehaviour Behaviour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XMoveToPlayer");

	Params::CustomConsoleManagerAM_XMoveToPlayer Parms{};

	Parms.NPC_UID = NPC_UID;
	Parms.Behaviour = Behaviour;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XResetAI
// (Final, Exec, Native, Private)
// Parameters:
// int32                                   UID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerAM::XResetAI(int32 UID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XResetAI");

	Params::CustomConsoleManagerAM_XResetAI Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerAM.XToggleDebugTool
// (Final, Exec, Native, Public)

void UCustomConsoleManagerAM::XToggleDebugTool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerAM", "XToggleDebugTool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XDisplayFocusingPlayerEnemiesCount
// (Final, Exec, Native, Public)

void UCustomConsoleManagerBuild::XDisplayFocusingPlayerEnemiesCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XDisplayFocusingPlayerEnemiesCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XRepairCurrentWeapon
// (Final, Exec, Native, Public)

void UCustomConsoleManagerBuild::XRepairCurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XRepairCurrentWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XResetCurrentBodyArmorDurabilityToZero
// (Final, Exec, Native, Public)

void UCustomConsoleManagerBuild::XResetCurrentBodyArmorDurabilityToZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XResetCurrentBodyArmorDurabilityToZero");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XResetCurrentWeaponDurabilityToZero
// (Final, Exec, Native, Public)

void UCustomConsoleManagerBuild::XResetCurrentWeaponDurabilityToZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XResetCurrentWeaponDurabilityToZero");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetFreeCameraSpeedMultiplier
// (Final, Exec, Native, Public)
// Parameters:
// float                                   SpeedMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetFreeCameraSpeedMultiplier(float SpeedMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetFreeCameraSpeedMultiplier");

	Params::CustomConsoleManagerBuild_XSetFreeCameraSpeedMultiplier Parms{};

	Parms.SpeedMultiplier = SpeedMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetNoClipGSC
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bNoClipGSC                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetNoClipGSC(bool bNoClipGSC, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetNoClipGSC");

	Params::CustomConsoleManagerBuild_XSetNoClipGSC Parms{};

	Parms.bNoClipGSC = bNoClipGSC;
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetPlayerSpeedMultiplier
// (Final, Exec, Native, Public)
// Parameters:
// float                                   SpeedMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetPlayerSpeedMultiplier(float SpeedMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetPlayerSpeedMultiplier");

	Params::CustomConsoleManagerBuild_XSetPlayerSpeedMultiplier Parms{};

	Parms.SpeedMultiplier = SpeedMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetEntityUnkillableByUID
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   EntityUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGodModeState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetEntityUnkillableByUID(int32 EntityUID, bool bGodModeState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetEntityUnkillableByUID");

	Params::CustomConsoleManagerBuild_XSetEntityUnkillableByUID Parms{};

	Parms.EntityUID = EntityUID;
	Parms.bGodModeState = bGodModeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetFactionGodMode
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    CurrentFactionSelector                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGodModeState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetFactionGodMode(const class FString& CurrentFactionSelector, bool bGodModeState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetFactionGodMode");

	Params::CustomConsoleManagerBuild_XSetFactionGodMode Parms{};

	Parms.CurrentFactionSelector = std::move(CurrentFactionSelector);
	Parms.bGodModeState = bGodModeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetGodModeAllFactions
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bGodModeState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetGodModeAllFactions(bool bGodModeState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetGodModeAllFactions");

	Params::CustomConsoleManagerBuild_XSetGodModeAllFactions Parms{};

	Parms.bGodModeState = bGodModeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSetGodModeByUID
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   EntityUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGodModeState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSetGodModeByUID(int32 EntityUID, bool bGodModeState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSetGodModeByUID");

	Params::CustomConsoleManagerBuild_XSetGodModeByUID Parms{};

	Parms.EntityUID = EntityUID;
	Parms.bGodModeState = bGodModeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XShowPlayerCoordinates
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerBuild::XShowPlayerCoordinates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XShowPlayerCoordinates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSpawnItemInCoordinatesBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ItemPrototypeSID                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Px                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Py                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pz                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSpawnItemInCoordinatesBySID(const class FString& ItemPrototypeSID, float Px, float Py, float Pz) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSpawnItemInCoordinatesBySID");

	Params::CustomConsoleManagerBuild_XSpawnItemInCoordinatesBySID Parms{};

	Parms.ItemPrototypeSID = std::move(ItemPrototypeSID);
	Parms.Px = Px;
	Parms.Py = Py;
	Parms.Pz = Pz;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerBuild.XSpawnItemNearPlayerBySID
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    ItemPrototypeSID                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerBuild::XSpawnItemNearPlayerBySID(const class FString& ItemPrototypeSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerBuild", "XSpawnItemNearPlayerBySID");

	Params::CustomConsoleManagerBuild_XSpawnItemNearPlayerBySID Parms{};

	Parms.ItemPrototypeSID = std::move(ItemPrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XChangeDropBodyMethod
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bShouldDrop                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XChangeDropBodyMethod(bool bShouldDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XChangeDropBodyMethod");

	Params::CustomConsoleManagerDC_XChangeDropBodyMethod Parms{};

	Parms.bShouldDrop = bShouldDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XKillNpcByUID
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XKillNpcByUID(const int32 NpcUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XKillNpcByUID");

	Params::CustomConsoleManagerDC_XKillNpcByUID Parms{};

	Parms.NpcUID = NpcUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XNPCAddAbility
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AbilityTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XNPCAddAbility(const int32 NpcUID, const class FString& AbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XNPCAddAbility");

	Params::CustomConsoleManagerDC_XNPCAddAbility Parms{};

	Parms.NpcUID = NpcUID;
	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XNPCRemoveAbility
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             NpcUID                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    AbilityTag                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XNPCRemoveAbility(const int32 NpcUID, const class FString& AbilityTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XNPCRemoveAbility");

	Params::CustomConsoleManagerDC_XNPCRemoveAbility Parms{};

	Parms.NpcUID = NpcUID;
	Parms.AbilityTag = std::move(AbilityTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XRegenerateItemsInStashes
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XRegenerateItemsInStashes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XRegenerateItemsInStashes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XSetCurrentCode
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    InCurrentCode                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XSetCurrentCode(const class FString& InCurrentCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XSetCurrentCode");

	Params::CustomConsoleManagerDC_XSetCurrentCode Parms{};

	Parms.InCurrentCode = std::move(InCurrentCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XSetWeatherTransitionTimeMultiplier
// (Final, Exec, Native, Public)
// Parameters:
// const float                             WeatherTransitionTimeMultiplier                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XSetWeatherTransitionTimeMultiplier(const float WeatherTransitionTimeMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XSetWeatherTransitionTimeMultiplier");

	Params::CustomConsoleManagerDC_XSetWeatherTransitionTimeMultiplier Parms{};

	Parms.WeatherTransitionTimeMultiplier = WeatherTransitionTimeMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XShowDebugInfoForStash
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    InStashIdentifier                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XShowDebugInfoForStash(const class FString& InStashIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XShowDebugInfoForStash");

	Params::CustomConsoleManagerDC_XShowDebugInfoForStash Parms{};

	Parms.InStashIdentifier = std::move(InStashIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XShowIntroductionLogo
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XShowIntroductionLogo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XShowIntroductionLogo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XTeleportPlayerInForwardDirection
// (Final, Exec, Native, Public)
// Parameters:
// const float                             Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XTeleportPlayerInForwardDirection(const float Distance, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XTeleportPlayerInForwardDirection");

	Params::CustomConsoleManagerDC_XTeleportPlayerInForwardDirection Parms{};

	Parms.Distance = Distance;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XTeleportPlayerWithFade
// (Final, Exec, Native, Public)
// Parameters:
// const float                             Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XTeleportPlayerWithFade(const float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XTeleportPlayerWithFade");

	Params::CustomConsoleManagerDC_XTeleportPlayerWithFade Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XToggleDebugBulletDistanceScaling
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XToggleDebugBulletDistanceScaling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XToggleDebugBulletDistanceScaling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XToggleDebugCodeLock
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XToggleDebugCodeLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XToggleDebugCodeLock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XToggleDebugDrawOverlapWithAnomalyObjects
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XToggleDebugDrawOverlapWithAnomalyObjects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XToggleDebugDrawOverlapWithAnomalyObjects");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XToggleDebugLightningBallNavigation
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XToggleDebugLightningBallNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XToggleDebugLightningBallNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XToggleDebugPlayerArmorInfo
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XToggleDebugPlayerArmorInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XToggleDebugPlayerArmorInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XToggleDrawDebugDiamondAnomaly
// (Final, Exec, Native, Public)

void UCustomConsoleManagerDC::XToggleDrawDebugDiamondAnomaly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XToggleDrawDebugDiamondAnomaly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDC.XVideoTeleportPlayerWithFade
// (Final, Exec, Native, Public)
// Parameters:
// const float                             Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDC::XVideoTeleportPlayerWithFade(const float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDC", "XVideoTeleportPlayerWithFade");

	Params::CustomConsoleManagerDC_XVideoTeleportPlayerWithFade Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XInitializeLocalizationManager
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XInitializeLocalizationManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XInitializeLocalizationManager");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XPrintLocalizedTextByKey
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    StringKey                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDP::XPrintLocalizedTextByKey(const class FString& StringKey) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XPrintLocalizedTextByKey");

	Params::CustomConsoleManagerDP_XPrintLocalizedTextByKey Parms{};

	Parms.StringKey = std::move(StringKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashCheckFalse
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XTestCrashCheckFalse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashCheckFalse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashLambda
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XTestCrashLambda() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashLambda");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashNullptr
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XTestCrashNullptr() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashNullptr");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashNullptrRT
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XTestCrashNullptrRT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashNullptrRT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashRandomAddress
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XTestCrashRandomAddress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashRandomAddress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashReturnIfFalse
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerDP::XTestCrashReturnIfFalse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashReturnIfFalse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerDP.XTestCrashStackOverflow
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   Counter                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerDP::XTestCrashStackOverflow(int32 Counter) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerDP", "XTestCrashStackOverflow");

	Params::CustomConsoleManagerDP_XTestCrashStackOverflow Parms{};

	Parms.Counter = Counter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerEG.XGarbageCollector
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerEG::XGarbageCollector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerEG", "XGarbageCollector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XBluePrintSearch
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerIK::XBluePrintSearch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XBluePrintSearch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XInputActionBlock
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    IAName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IMCName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIK::XInputActionBlock(const class FString& IAName, const class FString& IMCName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XInputActionBlock");

	Params::CustomConsoleManagerIK_XInputActionBlock Parms{};

	Parms.IAName = std::move(IAName);
	Parms.IMCName = std::move(IMCName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XInputActionUnlock
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    IAName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    IMCName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIK::XInputActionUnlock(const class FString& IAName, const class FString& IMCName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XInputActionUnlock");

	Params::CustomConsoleManagerIK_XInputActionUnlock Parms{};

	Parms.IAName = std::move(IAName);
	Parms.IMCName = std::move(IMCName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XSetTwelveHourTime
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              bSet                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIK::XSetTwelveHourTime(const bool bSet) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XSetTwelveHourTime");

	Params::CustomConsoleManagerIK_XSetTwelveHourTime Parms{};

	Parms.bSet = bSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XSignalStrengthTest
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerIK::XSignalStrengthTest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XSignalStrengthTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XSkipTimeHours
// (Final, Exec, Native, Public, Const)
// Parameters:
// const float                             Hours                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIK::XSkipTimeHours(const float Hours) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XSkipTimeHours");

	Params::CustomConsoleManagerIK_XSkipTimeHours Parms{};

	Parms.Hours = Hours;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerIK.XSwitchPlayerRank
// (Final, Exec, Native, Public, Const)
// Parameters:
// const ERank                             Rank                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerIK::XSwitchPlayerRank(const ERank Rank) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerIK", "XSwitchPlayerRank");

	Params::CustomConsoleManagerIK_XSwitchPlayerRank Parms{};

	Parms.Rank = Rank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XSetDrawDebugExplosion
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bDebug                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DebugTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMB::XSetDrawDebugExplosion(const bool bDebug, const float DebugTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XSetDrawDebugExplosion");

	Params::CustomConsoleManagerMB_XSetDrawDebugExplosion Parms{};

	Parms.bDebug = bDebug;
	Parms.DebugTime = DebugTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XSwitchAnomalySpawnerPreset
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XSwitchAnomalySpawnerPreset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XSwitchAnomalySpawnerPreset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowLightningBallAnomalyDebugInfo
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XToggleShowLightningBallAnomalyDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowLightningBallAnomalyDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowModels
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XToggleShowModels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowModels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowPlayerLastHeldItem
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XToggleShowPlayerLastHeldItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowPlayerLastHeldItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowPlayerLocation
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XToggleShowPlayerLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowPlayerLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowPlayerRequestedMainHandWeaponType
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XToggleShowPlayerRequestedMainHandWeaponType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowPlayerRequestedMainHandWeaponType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowProtection
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMB::XToggleShowProtection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowProtection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleDebugExpulsionAnomaly
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMB::XToggleDebugExpulsionAnomaly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleDebugExpulsionAnomaly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMB.XToggleShowTriggerCapsuleView
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMB::XToggleShowTriggerCapsuleView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMB", "XToggleShowTriggerCapsuleView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XDisableLegsIK
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMP::XDisableLegsIK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XDisableLegsIK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XDisplayArtifactSpawnLuckStatus
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    ArtifactSpawnerSID                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMP::XDisplayArtifactSpawnLuckStatus(const class FString& ArtifactSpawnerSID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XDisplayArtifactSpawnLuckStatus");

	Params::CustomConsoleManagerMP_XDisplayArtifactSpawnLuckStatus Parms{};

	Parms.ArtifactSpawnerSID = std::move(ArtifactSpawnerSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XEnableLegsIK
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMP::XEnableLegsIK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XEnableLegsIK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XSetAimAssistEnabled
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMP::XSetAimAssistEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XSetAimAssistEnabled");

	Params::CustomConsoleManagerMP_XSetAimAssistEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XSetArtifactSpawnLuck
// (Final, Exec, Native, Public)
// Parameters:
// const float                             LuckValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMP::XSetArtifactSpawnLuck(const float LuckValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XSetArtifactSpawnLuck");

	Params::CustomConsoleManagerMP_XSetArtifactSpawnLuck Parms{};

	Parms.LuckValue = LuckValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XSetClosestFaustCloneSwitchValue
// (Final, Exec, Native, Public)
// Parameters:
// const float                             SearchRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SwitchValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMP::XSetClosestFaustCloneSwitchValue(const float SearchRadius, const float SwitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XSetClosestFaustCloneSwitchValue");

	Params::CustomConsoleManagerMP_XSetClosestFaustCloneSwitchValue Parms{};

	Parms.SearchRadius = SearchRadius;
	Parms.SwitchValue = SwitchValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XToggleDebugAimAssist
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMP::XToggleDebugAimAssist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XToggleDebugAimAssist");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XWeaponDrag
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             ModelUID                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMP::XWeaponDrag(const int32 ModelUID, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XWeaponDrag");

	Params::CustomConsoleManagerMP_XWeaponDrag Parms{};

	Parms.ModelUID = ModelUID;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XLoadLastSave
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMP::XLoadLastSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XLoadLastSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XStartSleep
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMP::XStartSleep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XStartSleep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XToggleLogLoadingProgress
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMP::XToggleLogLoadingProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XToggleLogLoadingProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XToggleShowDebugStealthKill
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMP::XToggleShowDebugStealthKill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XToggleShowDebugStealthKill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMP.XTriggerAutoSave
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerMP::XTriggerAutoSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMP", "XTriggerAutoSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMY.XEnsureAllRelevantCollisionStreamed
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMY::XEnsureAllRelevantCollisionStreamed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMY", "XEnsureAllRelevantCollisionStreamed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMY.XSetDebugMode
// (Final, Exec, Native, Public)

void UCustomConsoleManagerMY::XSetDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMY", "XSetDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMY.XPossessToCharacterByUID
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   UID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMY::XPossessToCharacterByUID(int32 UID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMY", "XPossessToCharacterByUID");

	Params::CustomConsoleManagerMY_XPossessToCharacterByUID Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMY.XSetXRayMode
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMY::XSetXRayMode(bool bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMY", "XSetXRayMode");

	Params::CustomConsoleManagerMY_XSetXRayMode Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerMY.XSimulatePhysicsOnBoneForObj
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   ObjUID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    BoneName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerMY::XSimulatePhysicsOnBoneForObj(int32 ObjUID, const class FString& BoneName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerMY", "XSimulatePhysicsOnBoneForObj");

	Params::CustomConsoleManagerMY_XSimulatePhysicsOnBoneForObj Parms{};

	Parms.ObjUID = ObjUID;
	Parms.BoneName = std::move(BoneName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XDebugAudioScattererEvents
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DrawTime                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOA::XDebugAudioScattererEvents(const bool bEnabled, const float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XDebugAudioScattererEvents");

	Params::CustomConsoleManagerOA_XDebugAudioScattererEvents Parms{};

	Parms.bEnabled = bEnabled;
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XDebugAudioScattererMap
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOA::XDebugAudioScattererMap(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XDebugAudioScattererMap");

	Params::CustomConsoleManagerOA_XDebugAudioScattererMap Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XGetActiveDLC
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerOA::XGetActiveDLC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XGetActiveDLC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XHasDLC
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FName                       DLCName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOA::XHasDLC(const class FName DLCName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XHasDLC");

	Params::CustomConsoleManagerOA_XHasDLC Parms{};

	Parms.DLCName = DLCName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XIsHDREnabled
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerOA::XIsHDREnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XIsHDREnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XNewDLCAvailable
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerOA::XNewDLCAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XNewDLCAvailable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOA.XPlayVideo
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOA::XPlayVideo(const class FString& Path) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOA", "XPlayVideo");

	Params::CustomConsoleManagerOA_XPlayVideo Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselAngle
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselAngle(float Angle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselAngle");

	Params::CustomConsoleManagerOM_XSetCarouselAngle Parms{};

	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselDebugTrajectory
// (Final, Exec, Native, Private, Const)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselDebugTrajectory(bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselDebugTrajectory");

	Params::CustomConsoleManagerOM_XSetCarouselDebugTrajectory Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselDuration
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselDuration(float Duration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselDuration");

	Params::CustomConsoleManagerOM_XSetCarouselDuration Parms{};

	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselForce
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselForce(float Force) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselForce");

	Params::CustomConsoleManagerOM_XSetCarouselForce Parms{};

	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselLiftUpTime
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselLiftUpTime(float Time) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselLiftUpTime");

	Params::CustomConsoleManagerOM_XSetCarouselLiftUpTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselRotation
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselRotation(float Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselRotation");

	Params::CustomConsoleManagerOM_XSetCarouselRotation Parms{};

	Parms.Rotation = Rotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerOM.XSetCarouselTimeToCenter
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerOM::XSetCarouselTimeToCenter(float Time) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerOM", "XSetCarouselTimeToCenter");

	Params::CustomConsoleManagerOM_XSetCarouselTimeToCenter Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPA.XToggleHoldBreathDebug
// (Final, Exec, Native, Public)

void UCustomConsoleManagerPA::XToggleHoldBreathDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPA", "XToggleHoldBreathDebug");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPA.XTogglePhysicalMaterialDebug
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPA::XTogglePhysicalMaterialDebug(float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPA", "XTogglePhysicalMaterialDebug");

	Params::CustomConsoleManagerPA_XTogglePhysicalMaterialDebug Parms{};

	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPA.XChangePlayerMovementFXPrototype
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    PrototypeSID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPA::XChangePlayerMovementFXPrototype(const class FString& PrototypeSID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPA", "XChangePlayerMovementFXPrototype");

	Params::CustomConsoleManagerPA_XChangePlayerMovementFXPrototype Parms{};

	Parms.PrototypeSID = std::move(PrototypeSID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPA.XToggleGrenadeDebug
// (Final, Exec, Native, Public, Const)
// Parameters:
// EGrenadeDebugFlag                       FlagValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPA::XToggleGrenadeDebug(EGrenadeDebugFlag FlagValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPA", "XToggleGrenadeDebug");

	Params::CustomConsoleManagerPA_XToggleGrenadeDebug Parms{};

	Parms.FlagValue = FlagValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPU.XShowDemoPopup
// (Final, Exec, Native, Public)

void UCustomConsoleManagerPU::XShowDemoPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPU", "XShowDemoPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPU.XShowPopup
// (Final, Exec, Native, Public)
// Parameters:
// const int32                             ButtonsNum                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerPU::XShowPopup(const int32 ButtonsNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPU", "XShowPopup");

	Params::CustomConsoleManagerPU_XShowPopup Parms{};

	Parms.ButtonsNum = ButtonsNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPU.XStartProcPopup
// (Final, Exec, Native, Public)

void UCustomConsoleManagerPU::XStartProcPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPU", "XStartProcPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerPU.XStopProcPopup
// (Final, Exec, Native, Public)

void UCustomConsoleManagerPU::XStopProcPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerPU", "XStopProcPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XBeginPlay
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSD::XBeginPlay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XGetActorNameByUID
// (Final, Exec, Native, Public, Const)
// Parameters:
// int32                                   UID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerSD::XGetActorNameByUID(int32 UID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XGetActorNameByUID");

	Params::CustomConsoleManagerSD_XGetActorNameByUID Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XHideAllWidget
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSD::XHideAllWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XHideAllWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XHideCompass
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSD::XHideCompass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XHideCompass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XShowAllWidget
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSD::XShowAllWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XShowAllWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XShowCompass
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSD::XShowCompass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XShowCompass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSD.XTeleportToPlacesOfInterest
// (Final, Exec, Native, Public, Const)
// Parameters:
// const class FString&                    SID                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerSD::XTeleportToPlacesOfInterest(const class FString& SID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSD", "XTeleportToPlacesOfInterest");

	Params::CustomConsoleManagerSD_XTeleportToPlacesOfInterest Parms{};

	Parms.SID = std::move(SID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSS.XALifeDisable
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSS::XALifeDisable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSS", "XALifeDisable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSS.XALifeEnable
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSS::XALifeEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSS", "XALifeEnable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerSS.XALifeKillAll
// (Final, Exec, Native, Public, Const)

void UCustomConsoleManagerSS::XALifeKillAll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerSS", "XALifeKillAll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVD.XProtectItemContainer
// (Final, Exec, Native, Private, Const)
// Parameters:
// const class FString&                    ContainerUID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProtect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVD::XProtectItemContainer(const class FString& ContainerUID, bool bProtect) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVD", "XProtectItemContainer");

	Params::CustomConsoleManagerVD_XProtectItemContainer Parms{};

	Parms.ContainerUID = std::move(ContainerUID);
	Parms.bProtect = bProtect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVD.XProtectSquad
// (Final, Exec, Native, Private, Const)
// Parameters:
// const class FString&                    SquadUID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bProtect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVD::XProtectSquad(const class FString& SquadUID, bool bProtect) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVD", "XProtectSquad");

	Params::CustomConsoleManagerVD_XProtectSquad Parms{};

	Parms.SquadUID = std::move(SquadUID);
	Parms.bProtect = bProtect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVD.XShowUnitAndSquadUIDs
// (Final, Exec, Native, Private, Const)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerVD::XShowUnitAndSquadUIDs(float Radius) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVD", "XShowUnitAndSquadUIDs");

	Params::CustomConsoleManagerVD_XShowUnitAndSquadUIDs Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVD.XSpawnDeadNpc
// (Final, Exec, Native, Private, Const)

void UCustomConsoleManagerVD::XSpawnDeadNpc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVD", "XSpawnDeadNpc");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVV.XCheckAllJournalQuestPrototypes
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVV::XCheckAllJournalQuestPrototypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVV", "XCheckAllJournalQuestPrototypes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerVV.XGiveWeaponWithAttaches
// (Final, Exec, Native, Public)

void UCustomConsoleManagerVV::XGiveWeaponWithAttaches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerVV", "XGiveWeaponWithAttaches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerYK.XTestSetDiscount
// (Final, Exec, Native, Public)
// Parameters:
// const bool                              InbDiscount                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerYK::XTestSetDiscount(const bool InbDiscount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerYK", "XTestSetDiscount");

	Params::CustomConsoleManagerYK_XTestSetDiscount Parms{};

	Parms.InbDiscount = InbDiscount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerYK.XBlockItemSelectorSlot
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              InBlock                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             InSlotNum                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerYK::XBlockItemSelectorSlot(const bool InBlock, const int32 InSlotNum) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerYK", "XBlockItemSelectorSlot");

	Params::CustomConsoleManagerYK_XBlockItemSelectorSlot Parms{};

	Parms.InBlock = InBlock;
	Parms.InSlotNum = InSlotNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.CustomConsoleManagerYK.XBlockItemSelectorSlots
// (Final, Exec, Native, Public, Const)
// Parameters:
// const bool                              InBlock                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomConsoleManagerYK::XBlockItemSelectorSlots(const bool InBlock) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomConsoleManagerYK", "XBlockItemSelectorSlots");

	Params::CustomConsoleManagerYK_XBlockItemSelectorSlots Parms{};

	Parms.InBlock = InBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DataLayerPhysicsComponent.OnDataLayersUpdated
// (Final, Native, Private)
// Parameters:
// const class UDataLayerInstance*         DataLayer                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDataLayerRuntimeState                  State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDataLayerPhysicsComponent::OnDataLayersUpdated(const class UDataLayerInstance* DataLayer, EDataLayerRuntimeState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataLayerPhysicsComponent", "OnDataLayersUpdated");

	Params::DataLayerPhysicsComponent_OnDataLayersUpdated Parms{};

	Parms.DataLayer = DataLayer;
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueAnswer.AnswerWidgetClick
// (Final, Native, Public)

void UDialogueAnswer::AnswerWidgetClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueAnswer", "AnswerWidgetClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueFastAnswer.EndSelectAnswer
// (Final, Native, Public, BlueprintCallable)

void UDialogueFastAnswer::EndSelectAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueFastAnswer", "EndSelectAnswer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueFastAnswer.PostSelectAnswer
// (Event, Public, BlueprintEvent)

void UDialogueFastAnswer::PostSelectAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueFastAnswer", "PostSelectAnswer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.DialogueFastAnswer.SelectAnswer
// (Final, Native, Public)

void UDialogueFastAnswer::SelectAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueFastAnswer", "SelectAnswer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueViewFolder.ChangeSelectFolder
// (Final, Native, Public)
// Parameters:
// const int32                             IndexOldFolder                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AxisMove                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UDialogueAnswer*            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UDialogueAnswer* UDialogueViewFolder::ChangeSelectFolder(const int32 IndexOldFolder, const int32 AxisMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "ChangeSelectFolder");

	Params::DialogueViewFolder_ChangeSelectFolder Parms{};

	Parms.IndexOldFolder = IndexOldFolder;
	Parms.AxisMove = AxisMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.DialogueViewFolder.UIDialogAnswerConfirm
// (Final, Native, Public)

void UDialogueViewFolder::UIDialogAnswerConfirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "UIDialogAnswerConfirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueViewFolder.UIDialogAnswerDown
// (Final, Native, Public)

void UDialogueViewFolder::UIDialogAnswerDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "UIDialogAnswerDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueViewFolder.UIDialogAnswerUp
// (Final, Native, Public)

void UDialogueViewFolder::UIDialogAnswerUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "UIDialogAnswerUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueViewFolder.UIDialogClose
// (Final, Native, Public)

void UDialogueViewFolder::UIDialogClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "UIDialogClose");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueViewFolder.UIDialogOpenTrade
// (Final, Native, Public)

void UDialogueViewFolder::UIDialogOpenTrade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "UIDialogOpenTrade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DialogueViewFolder.UIDialogOpenUpgrade
// (Final, Native, Public)

void UDialogueViewFolder::UIDialogOpenUpgrade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DialogueViewFolder", "UIDialogOpenUpgrade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.ActualizeNavigationProperties
// (Final, Native, Public, BlueprintCallable)

void ADoorView::ActualizeNavigationProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "ActualizeNavigationProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.CloseDoor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bCloseFast                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADoorView::CloseDoor(const bool bCloseFast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "CloseDoor");

	Params::DoorView_CloseDoor Parms{};

	Parms.bCloseFast = bCloseFast;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.ForceCloseDoor
// (Final, Native, Public, BlueprintCallable)

void ADoorView::ForceCloseDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "ForceCloseDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.ForceOpenDoor
// (Final, Native, Public, BlueprintCallable)

void ADoorView::ForceOpenDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "ForceOpenDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.InvertDoorLock
// (Final, Native, Public, BlueprintCallable)

void ADoorView::InvertDoorLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "InvertDoorLock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.InvertDoorState
// (Final, Native, Public, BlueprintCallable)

void ADoorView::InvertDoorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "InvertDoorState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.LockDoor
// (Final, Native, Public, BlueprintCallable)

void ADoorView::LockDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "LockDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.OnComponentHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADoorView::OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "OnComponentHit");

	Params::DoorView_OnComponentHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.OnDoorClosedCompletely
// (Event, Public, BlueprintEvent)

void ADoorView::OnDoorClosedCompletely()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "OnDoorClosedCompletely");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.DoorView.OpenDoor
// (Final, Native, Public, BlueprintCallable)

void ADoorView::OpenDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "OpenDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.PeekCloseDoor
// (Final, Native, Public, BlueprintCallable)

void ADoorView::PeekCloseDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "PeekCloseDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.PeekDoor
// (Final, Native, Public, BlueprintCallable)

void ADoorView::PeekDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "PeekDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.PlayLockedDoorSound
// (Final, Native, Private)

void ADoorView::PlayLockedDoorSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "PlayLockedDoorSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.RebuildDoorView
// (Final, Native, Public, BlueprintCallable)

void ADoorView::RebuildDoorView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "RebuildDoorView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.SetClosed
// (Final, Native, Private, BlueprintCallable)

void ADoorView::SetClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "SetClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.IsLocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADoorView::IsLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "IsLocked");

	Params::DoorView_IsLocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.DoorView.SetDoubleDoor
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADoorView::SetDoubleDoor(const bool bValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "SetDoubleDoor");

	Params::DoorView_SetDoubleDoor Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.SetLocked
// (Final, Native, Private, BlueprintCallable, Const)

void ADoorView::SetLocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "SetLocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.SetOpen
// (Final, Native, Private, BlueprintCallable, Const)

void ADoorView::SetOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "SetOpen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.SetPreopened
// (Final, Native, Private, BlueprintCallable, Const)

void ADoorView::SetPreopened() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "SetPreopened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.SetUnlocked
// (Final, Native, Private, BlueprintCallable, Const)

void ADoorView::SetUnlocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "SetUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.DoorView.UnlockDoor
// (Final, Native, Public, BlueprintCallable, Const)

void ADoorView::UnlockDoor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoorView", "UnlockDoor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.GetSkyLightUpdateDeltaTime
// (Final, Native, Static, Public)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AEditorTools::GetSkyLightUpdateDeltaTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorTools", "GetSkyLightUpdateDeltaTime");

	Params::EditorTools_GetSkyLightUpdateDeltaTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.EditorTools.IsActorInGameWorld
// (Final, Native, Static, Public)
// Parameters:
// class AActor*                           ActorToCheck                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AEditorTools::IsActorInGameWorld(class AActor* ActorToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorTools", "IsActorInGameWorld");

	Params::EditorTools_IsActorInGameWorld Parms{};

	Parms.ActorToCheck = ActorToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.EditorTools.IsGameWorld
// (Final, Native, Static, Public)
// Parameters:
// class UWorld*                           GameWorld                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AEditorTools::IsGameWorld(class UWorld* GameWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EditorTools", "IsGameWorld");

	Params::EditorTools_IsGameWorld Parms{};

	Parms.GameWorld = GameWorld;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.EditorTools.ChangeNotesToTeleportPoints
// (Final, Native, Private)

void AEditorTools::ChangeNotesToTeleportPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "ChangeNotesToTeleportPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.CheckAllPrototypes
// (Final, Native, Private)

void AEditorTools::CheckAllPrototypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "CheckAllPrototypes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.FixAttachMeshes
// (Final, Native, Private)

void AEditorTools::FixAttachMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "FixAttachMeshes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.RemoveEditorContainers
// (Final, Native, Private)

void AEditorTools::RemoveEditorContainers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "RemoveEditorContainers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.UpdateVoiceSounds
// (Final, Native, Private)

void AEditorTools::UpdateVoiceSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "UpdateVoiceSounds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.XVerifyAllActorsForBrokenReference
// (Final, Native, Private)

void AEditorTools::XVerifyAllActorsForBrokenReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "XVerifyAllActorsForBrokenReference");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EditorTools.XRemoveRestoredLabelFromActors
// (Final, Native, Private, Const)

void AEditorTools::XRemoveRestoredLabelFromActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EditorTools", "XRemoveRestoredLabelFromActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EmissionManager.GeneratorsSequenceIdle
// (Final, Native, Protected)

void UEmissionManager::GeneratorsSequenceIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EmissionManager", "GeneratorsSequenceIdle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EncounterNPCSpawner.Despawn
// (Final, Native, Protected, BlueprintCallable)

void AEncounterNPCSpawner::Despawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterNPCSpawner", "Despawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EncounterNPCSpawner.Disable
// (Final, Native, Protected, BlueprintCallable)

void AEncounterNPCSpawner::Disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterNPCSpawner", "Disable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EncounterNPCSpawner.Enable
// (Final, Native, Protected, BlueprintCallable)

void AEncounterNPCSpawner::Enable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterNPCSpawner", "Enable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EncounterNPCSpawner.OnAllNPCKilled
// (Event, Protected, BlueprintEvent)

void AEncounterNPCSpawner::OnAllNPCKilled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterNPCSpawner", "OnAllNPCKilled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.EquipmentSlots.OnItemMouseEnter
// (Final, Native, Public)
// Parameters:
// class UInteractableItemSlotBaseWidget*  ItemWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentSlots::OnItemMouseEnter(class UInteractableItemSlotBaseWidget* ItemWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlots", "OnItemMouseEnter");

	Params::EquipmentSlots_OnItemMouseEnter Parms{};

	Parms.ItemWidget = ItemWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.EquipmentSlots.OnItemMouseLeave
// (Final, Native, Public)
// Parameters:
// class UInteractableItemSlotBaseWidget*  ItemWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEquipmentSlots::OnItemMouseLeave(class UInteractableItemSlotBaseWidget* ItemWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquipmentSlots", "OnItemMouseLeave");

	Params::EquipmentSlots_OnItemMouseLeave Parms{};

	Parms.ItemWidget = ItemWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ExpulsionAnomaly.OnBoltCollided
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   LocalPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AExpulsionAnomaly::OnBoltCollided(const struct FVector& LocalPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExpulsionAnomaly", "OnBoltCollided");

	Params::ExpulsionAnomaly_OnBoltCollided Parms{};

	Parms.LocalPoint = std::move(LocalPoint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.OnAKEventFinished_Proxy.OnSoundFinished
// (Final, Native, Public)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnAKEventFinished_Proxy::OnSoundFinished(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnAKEventFinished_Proxy", "OnSoundFinished");

	Params::OnAKEventFinished_Proxy_OnSoundFinished Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FastDialogueView.BlockInput
// (Final, Native, Protected)

void UFastDialogueView::BlockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastDialogueView", "BlockInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FastDialogueView.EndSelectAnswer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsRightAnswer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFastDialogueView::EndSelectAnswer(bool bIsRightAnswer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastDialogueView", "EndSelectAnswer");

	Params::FastDialogueView_EndSelectAnswer Parms{};

	Parms.bIsRightAnswer = bIsRightAnswer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FastDialogueView.PostSelectAnswer
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsRightAnswer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFastDialogueView::PostSelectAnswer(bool bIsRightAnswer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastDialogueView", "PostSelectAnswer");

	Params::FastDialogueView_PostSelectAnswer Parms{};

	Parms.bIsRightAnswer = bIsRightAnswer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.FastDialogueView.UIFastDialogFirstAnswer
// (Final, Native, Public)

void UFastDialogueView::UIFastDialogFirstAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastDialogueView", "UIFastDialogFirstAnswer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FastDialogueView.UIFastDialogSecondAnswer
// (Final, Native, Public)

void UFastDialogueView::UIFastDialogSecondAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastDialogueView", "UIFastDialogSecondAnswer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FastDialogueView.UpdateAfterClick
// (Final, Native, Protected)

void UFastDialogueView::UpdateAfterClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FastDialogueView", "UpdateAfterClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FireBreathArchiAnomaly.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFireBreathArchiAnomaly::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireBreathArchiAnomaly", "OnBeginOverlap");

	Params::FireBreathArchiAnomaly_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FireBreathArchiAnomaly.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFireBreathArchiAnomaly::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireBreathArchiAnomaly", "OnEndOverlap");

	Params::FireBreathArchiAnomaly_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FireBreathArchiAnomaly.SetScaleAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             InScaleAlpha                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFireBreathArchiAnomaly::SetScaleAlpha(const float InScaleAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireBreathArchiAnomaly", "SetScaleAlpha");

	Params::FireBreathArchiAnomaly_SetScaleAlpha Parms{};

	Parms.InScaleAlpha = InScaleAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FireBreathArchiAnomaly.SetTimeAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             InTimeAlpha                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFireBreathArchiAnomaly::SetTimeAlpha(const float InTimeAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireBreathArchiAnomaly", "SetTimeAlpha");

	Params::FireBreathArchiAnomaly_SetTimeAlpha Parms{};

	Parms.InTimeAlpha = InTimeAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.FireBreathArchiAnomaly.GetScaleAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFireBreathArchiAnomaly::GetScaleAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireBreathArchiAnomaly", "GetScaleAlpha");

	Params::FireBreathArchiAnomaly_GetScaleAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.FireBreathArchiAnomaly.GetTimeAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFireBreathArchiAnomaly::GetTimeAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireBreathArchiAnomaly", "GetTimeAlpha");

	Params::FireBreathArchiAnomaly_GetTimeAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ForceFeedbackSphereComponent.DisableForceFeedback
// (Final, Native, Public, BlueprintCallable)

void UForceFeedbackSphereComponent::DisableForceFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSphereComponent", "DisableForceFeedback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ForceFeedbackSphereComponent.EnableForceFeedback
// (Final, Native, Public, BlueprintCallable)

void UForceFeedbackSphereComponent::EnableForceFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSphereComponent", "EnableForceFeedback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ForceFeedbackSphereComponent.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UForceFeedbackSphereComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSphereComponent", "OnBeginOverlap");

	Params::ForceFeedbackSphereComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ForceFeedbackSphereComponent.OnEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UForceFeedbackSphereComponent::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ForceFeedbackSphereComponent", "OnEndOverlap");

	Params::ForceFeedbackSphereComponent_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GameGraphRenderingComponent.ShowAllComponents
// (Final, Native, Protected)

void UGameGraphRenderingComponent::ShowAllComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameGraphRenderingComponent", "ShowAllComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.AbilityEventData.GetAbilityType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAbility                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAbility UAbilityEventData::GetAbilityType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityEventData", "GetAbilityType");

	Params::AbilityEventData_GetAbilityType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.AbilityEventData.GetActivationTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UAbilityEventData::GetActivationTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityEventData", "GetActivationTag");

	Params::AbilityEventData_GetActivationTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.SummonAbilityEventData.GetSummonLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> USummonAbilityEventData::GetSummonLocations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SummonAbilityEventData", "GetSummonLocations");

	Params::SummonAbilityEventData_GetSummonLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.SummonAbilityEventData.ShouldSpawnEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USummonAbilityEventData::ShouldSpawnEffects() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SummonAbilityEventData", "ShouldSpawnEffects");

	Params::SummonAbilityEventData_ShouldSpawnEffects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.GameplayEventListener.OnGameplayEvent
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UGameplayEventData*         EventData                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGameplayEventListener::OnGameplayEvent(const struct FGameplayTag& EventTag, const class UGameplayEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GameplayEventListener", "OnGameplayEvent");

	Params::GameplayEventListener_OnGameplayEvent Parms{};

	Parms.EventTag = std::move(EventTag);
	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCLocalPlayer.XClipboardToFile
// (Final, Exec, Native, Private)

void UGSCLocalPlayer::XClipboardToFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCLocalPlayer", "XClipboardToFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCLocalPlayer.XExportSaves
// (Final, Exec, Native, Private)

void UGSCLocalPlayer::XExportSaves()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCLocalPlayer", "XExportSaves");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCLocalPlayer.XFileToClipboard
// (Final, Exec, Native, Private)

void UGSCLocalPlayer::XFileToClipboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCLocalPlayer", "XFileToClipboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCLocalPlayer.XFinishLoginProcess
// (Final, Exec, Native, Private)
// Parameters:
// const bool                              bSuccess                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGSCLocalPlayer::XFinishLoginProcess(const bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCLocalPlayer", "XFinishLoginProcess");

	Params::GSCLocalPlayer_XFinishLoginProcess Parms{};

	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCLocalPlayer.XImportSaves
// (Final, Exec, Native, Private)

void UGSCLocalPlayer::XImportSaves()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCLocalPlayer", "XImportSaves");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GSCModIOSubsystem.HandleModBrowserClosed
// (Final, Native, Public)

void UGSCModIOSubsystem::HandleModBrowserClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GSCModIOSubsystem", "HandleModBrowserClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.GuidInterface.GetGUID
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid IGuidInterface::GetGUID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GuidInterface", "GetGUID");

	Params::GuidInterface_GetGUID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.GuitarChordView.OnMajorScale
// (Event, Public, BlueprintEvent)

void UGuitarChordView::OnMajorScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuitarChordView", "OnMajorScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.GuitarChordView.OnMinorScale
// (Event, Public, BlueprintEvent)

void UGuitarChordView::OnMinorScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuitarChordView", "OnMinorScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.GuitarChordView.OnSelected
// (Event, Public, BlueprintEvent)

void UGuitarChordView::OnSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuitarChordView", "OnSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.GuitarChordView.OnUnselected
// (Event, Public, BlueprintEvent)

void UGuitarChordView::OnUnselected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GuitarChordView", "OnUnselected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.AsyncActionBase.ExecuteAction
// (Native, Public)
// Parameters:
// class UHintControllerBase*              InHintController                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncActionBase::ExecuteAction(class UHintControllerBase* InHintController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncActionBase", "ExecuteAction");

	Params::AsyncActionBase_ExecuteAction Parms{};

	Parms.InHintController = InHintController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SignalSenderComponent.Send
// (Final, Native, Private, BlueprintCallable, Const)
// Parameters:
// class UObject*                          DataObject                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USignalSenderComponent::Send(class UObject* DataObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SignalSenderComponent", "Send");

	Params::SignalSenderComponent_Send Parms{};

	Parms.DataObject = DataObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintKey.PlayHintAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bSingleClick                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintKey::PlayHintAnimation(bool bSingleClick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintKey", "PlayHintAnimation");

	Params::HintKey_PlayHintAnimation Parms{};

	Parms.bSingleClick = bSingleClick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.HintKey.SetHintKeyLockState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              ShowIcon                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              IsKeyAvailable                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintKey::SetHintKeyLockState(const bool ShowIcon, const bool IsKeyAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintKey", "SetHintKeyLockState");

	Params::HintKey_SetHintKeyLockState Parms{};

	Parms.ShowIcon = ShowIcon;
	Parms.IsKeyAvailable = IsKeyAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintKey.SetHintState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              IsActive                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintKey::SetHintState(const bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintKey", "SetHintState");

	Params::HintKey_SetHintState Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HintKey.SetLowHealthState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              ShowIcon                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHintKey::SetLowHealthState(const bool ShowIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HintKey", "SetLowHealthState");

	Params::HintKey_SetLowHealthState Parms{};

	Parms.ShowIcon = ShowIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HudHintsPanel.UpdateInputDependent
// (Final, Native, Protected)

void UHudHintsPanel::UpdateInputDependent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudHintsPanel", "UpdateInputDependent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SpaceRestrictorsCheats.XRestrictorsPrint
// (Final, Exec, Native, Private)

void USpaceRestrictorsCheats::XRestrictorsPrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpaceRestrictorsCheats", "XRestrictorsPrint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SpaceRestrictorsCheats.XRestrictorsShowResponse
// (Final, Exec, Native, Private)
// Parameters:
// const int32                             UID                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpaceRestrictorsCheats::XRestrictorsShowResponse(const int32 UID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpaceRestrictorsCheats", "XRestrictorsShowResponse");

	Params::SpaceRestrictorsCheats_XRestrictorsShowResponse Parms{};

	Parms.UID = UID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.HumanDefaultAnimCollection.GetDialogAnimations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             DialogAnimationType                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<ELookAtOwnerState, struct FAnimSequenceArray>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<ELookAtOwnerState, struct FAnimSequenceArray> UHumanDefaultAnimCollection::GetDialogAnimations(class FName DialogAnimationType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HumanDefaultAnimCollection", "GetDialogAnimations");

	Params::HumanDefaultAnimCollection_GetDialogAnimations Parms{};

	Parms.DialogAnimationType = DialogAnimationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.IdleScreenView.OnAnyKeyIsPressed
// (Final, Native, Public, BlueprintCallable)

void UIdleScreenView::OnAnyKeyIsPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IdleScreenView", "OnAnyKeyIsPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ImageWidget.SetBrushTextureInIconSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImageWidget::SetBrushTextureInIconSettings(class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImageWidget", "SetBrushTextureInIconSettings");

	Params::ImageWidget_SetBrushTextureInIconSettings Parms{};

	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ImpulseComponent.ApplyImpulse
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     InTargetActor                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InImpulse                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIgnoreMass                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UImpulseComponent::ApplyImpulse(const class AActor* InTargetActor, const struct FVector& InImpulse, const bool bIgnoreMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImpulseComponent", "ApplyImpulse");

	Params::ImpulseComponent_ApplyImpulse Parms{};

	Parms.InTargetActor = InTargetActor;
	Parms.InImpulse = std::move(InImpulse);
	Parms.bIgnoreMass = bIgnoreMass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InputDamageModifierComponent.SetIgnoreHitFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInIgnore                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputDamageModifierComponent::SetIgnoreHitFeedback(const bool bInIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputDamageModifierComponent", "SetIgnoreHitFeedback");

	Params::InputDamageModifierComponent_SetIgnoreHitFeedback Parms{};

	Parms.bInIgnore = bInIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableItemContainer.OnHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AInteractableItemContainer::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableItemContainer", "OnHit");

	Params::InteractableItemContainer_OnHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractableMonitorSection.OnActivationSignalReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableMonitorSection::OnActivationSignalReceived(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableMonitorSection", "OnActivationSignalReceived");

	Params::InteractableMonitorSection_OnActivationSignalReceived Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractableMonitorSection.OnDeactivationSignalReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableMonitorSection::OnDeactivationSignalReceived(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableMonitorSection", "OnDeactivationSignalReceived");

	Params::InteractableMonitorSection_OnDeactivationSignalReceived Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractableMonitorSection.OnDestructionSignalReceived
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInteractableMonitorSection::OnDestructionSignalReceived(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractableMonitorSection", "OnDestructionSignalReceived");

	Params::InteractableMonitorSection_OnDestructionSignalReceived Parms{};

	Parms.InObject = InObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractPaintInterface.OnPaintSettingsChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              bInteractPaint                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInteractPaintInterface::OnPaintSettingsChanged(const bool bInteractPaint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractPaintInterface", "OnPaintSettingsChanged");

	Params::InteractPaintInterface_OnPaintSettingsChanged Parms{};

	Parms.bInteractPaint = bInteractPaint;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function Stalker2.InteractView.HideInteractHints
// (Final, Native, Protected)

void UInteractView::HideInteractHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractView", "HideInteractHints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractView.UpdateHintState
// (Final, Native, Protected)

void UInteractView::UpdateHintState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractView", "UpdateHintState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractView.UpdateInteractHints
// (Final, Native, Protected)

void UInteractView::UpdateInteractHints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractView", "UpdateInteractHints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InteractViewHint.OnRunAction
// (Native, Public)

void UInteractViewHint::OnRunAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractViewHint", "OnRunAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.DropItemHoldReleased
// (Final, Native, Public)

void UInventoryNew::DropItemHoldReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "DropItemHoldReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.GamepadDragStop
// (Native, Public)

void UInventoryNew::GamepadDragStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "GamepadDragStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.HideRightClickMenu
// (Final, Native, Protected)

void UInventoryNew::HideRightClickMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "HideRightClickMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.InventoryWidgetTakeAllItems
// (Final, Native, Public)

void UInventoryNew::InventoryWidgetTakeAllItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "InventoryWidgetTakeAllItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.LootTakeAllHoldReleased
// (Final, Native, Public)

void UInventoryNew::LootTakeAllHoldReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "LootTakeAllHoldReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.LootTakeAllHoldStarted
// (Final, Native, Public)

void UInventoryNew::LootTakeAllHoldStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "LootTakeAllHoldStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.LootTakeItemAction
// (Final, Native, Public)

void UInventoryNew::LootTakeItemAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "LootTakeItemAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnDragDropCanceled
// (Final, Native, Protected, HasDefaults)
// Parameters:
// const struct FVector2D&                 Pos                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnDragDropCanceled(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnDragDropCanceled");

	Params::InventoryNew_OnDragDropCanceled Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnDropItemHoldTriggered
// (Final, Native, Protected)

void UInventoryNew::OnDropItemHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnDropItemHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnDropToEmptyPlace
// (Native, Protected, HasDefaults)
// Parameters:
// const struct FVector2D&                 Pos                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnDropToEmptyPlace(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnDropToEmptyPlace");

	Params::InventoryNew_OnDropToEmptyPlace Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnEquipHoldTriggered
// (Final, Native, Protected)

void UInventoryNew::OnEquipHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnEquipHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnExitClick
// (Final, Native, Protected)
// Parameters:
// class FName                             ButtonId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnExitClick(class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnExitClick");

	Params::InventoryNew_OnExitClick Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnGamepadContextMenu
// (Final, Native, Public)

void UInventoryNew::OnGamepadContextMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnGamepadContextMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnGamepadEquipItem
// (Final, Native, Protected)

void UInventoryNew::OnGamepadEquipItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnGamepadEquipItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnGamepadItemSelectHoldFinished
// (Native, Public)

void UInventoryNew::OnGamepadItemSelectHoldFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnGamepadItemSelectHoldFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnGamepadSelectItemForMoveRepeat
// (Final, Native, Public)

void UInventoryNew::OnGamepadSelectItemForMoveRepeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnGamepadSelectItemForMoveRepeat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnGamepadSelectItemRelease
// (Final, Native, Public)

void UInventoryNew::OnGamepadSelectItemRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnGamepadSelectItemRelease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnMoveToBackpackHoldTriggered
// (Final, Native, Protected)

void UInventoryNew::OnMoveToBackpackHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnMoveToBackpackHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnRejectDrop
// (Final, Native, Public, HasDefaults)
// Parameters:
// const struct FVector2D&                 Pos                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnRejectDrop(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnRejectDrop");

	Params::InventoryNew_OnRejectDrop Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnRightClickMenuCanceled
// (Final, Native, Protected)

void UInventoryNew::OnRightClickMenuCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnRightClickMenuCanceled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnRightClickMenuItemHover
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FRightClickMenuItemData&   ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bInHover                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnRightClickMenuItemHover(const struct FRightClickMenuItemData& ItemData, const bool bInHover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnRightClickMenuItemHover");

	Params::InventoryNew_OnRightClickMenuItemHover Parms{};

	Parms.ItemData = std::move(ItemData);
	Parms.bInHover = bInHover;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnRightClickMenuItemSelected
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FRightClickMenuItemData&   ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UInventoryNew::OnRightClickMenuItemSelected(const struct FRightClickMenuItemData& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnRightClickMenuItemSelected");

	Params::InventoryNew_OnRightClickMenuItemSelected Parms{};

	Parms.ItemData = std::move(ItemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnSplitCanceled
// (Final, Native, Public)

void UInventoryNew::OnSplitCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnSplitCanceled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnSplitConfirmed
// (Final, Native, Protected)
// Parameters:
// int32                                   ItemAmountSplitForDrop                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FItemUID&                  ItemUID                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnSplitConfirmed(int32 ItemAmountSplitForDrop, const struct FItemUID& ItemUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnSplitConfirmed");

	Params::InventoryNew_OnSplitConfirmed Parms{};

	Parms.ItemAmountSplitForDrop = ItemAmountSplitForDrop;
	Parms.ItemUID = std::move(ItemUID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnTakeAllHoldTriggered
// (Final, Native, Protected)

void UInventoryNew::OnTakeAllHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnTakeAllHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnUseItemHoldTriggered
// (Final, Native, Protected)

void UInventoryNew::OnUseItemHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnUseItemHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.OnVisibilityChangedEvent
// (Final, Native, Protected)
// Parameters:
// ESlateVisibility                        NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryNew::OnVisibilityChangedEvent(ESlateVisibility NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "OnVisibilityChangedEvent");

	Params::InventoryNew_OnVisibilityChangedEvent Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.ShowTooltip
// (Final, Native, Protected)

void UInventoryNew::ShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "ShowTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.SortInventory
// (Final, Native, Protected)

void UInventoryNew::SortInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "SortInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIGamepadInventoryItemAction
// (Final, Native, Public)

void UInventoryNew::UIGamepadInventoryItemAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIGamepadInventoryItemAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryChangeComparingItem
// (Final, Native, Public)

void UInventoryNew::UIInventoryChangeComparingItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryChangeComparingItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryDropItem
// (Final, Native, Public)

void UInventoryNew::UIInventoryDropItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryDropItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryEnableAutoComparing
// (Final, Native, Public)

void UInventoryNew::UIInventoryEnableAutoComparing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryEnableAutoComparing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryItemAction
// (Final, Native, Public)

void UInventoryNew::UIInventoryItemAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryItemAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryNavigateDown
// (Final, Native, Public)

void UInventoryNew::UIInventoryNavigateDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryNavigateDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryNavigateLeft
// (Final, Native, Public)

void UInventoryNew::UIInventoryNavigateLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryNavigateLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryNavigateRight
// (Final, Native, Public)

void UInventoryNew::UIInventoryNavigateRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryNavigateRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryNavigateUp
// (Final, Native, Public)

void UInventoryNew::UIInventoryNavigateUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryNavigateUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventorySort
// (Final, Native, Public)

void UInventoryNew::UIInventorySort()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventorySort");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryTakeItem
// (Final, Native, Protected)

void UInventoryNew::UIInventoryTakeItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryTakeItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryToggleEquipment
// (Final, Native, Public)

void UInventoryNew::UIInventoryToggleEquipment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryToggleEquipment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UIInventoryToggleItemInfo
// (Final, Native, Public)

void UInventoryNew::UIInventoryToggleItemInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UIInventoryToggleItemInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UpdateInputDependent
// (Final, Native, Protected)

void UInventoryNew::UpdateInputDependent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UpdateInputDependent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.InventoryNew.UseItemHoldReleased
// (Final, Native, Public)

void UInventoryNew::UseItemHoldReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryNew", "UseItemHoldReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemAppearanceComponent.OnShotSoundStart
// (Final, Native, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemAppearanceComponent::OnShotSoundStart(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemAppearanceComponent", "OnShotSoundStart");

	Params::ItemAppearanceComponent_OnShotSoundStart Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemCompareWidget.SetItemEquippedData
// (Final, Native, Public, BlueprintCallable)

void UItemCompareWidget::SetItemEquippedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemCompareWidget", "SetItemEquippedData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemGiveComponent.ProvideItems
// (Final, Native, Public, BlueprintCallable)

void UItemGiveComponent::ProvideItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemGiveComponent", "ProvideItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SequenceComponent.OnSequenceFinished
// (Final, Native, Private)

void USequenceComponent::OnSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequenceComponent", "OnSequenceFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SequenceComponent.OnSequenceStarted
// (Final, Native, Private)

void USequenceComponent::OnSequenceStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SequenceComponent", "OnSequenceStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.ChangeAmmoType
// (Final, Native, Public)

void UItemSelectorView::ChangeAmmoType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "ChangeAmmoType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.ChangeFireType
// (Final, Native, Public)

void UItemSelectorView::ChangeFireType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "ChangeFireType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.GetSlotsBP
// (Event, Public, BlueprintEvent)
// Parameters:
// TArray<class UItemSelectorWeaponSlot*>  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UItemSelectorWeaponSlot*> UItemSelectorView::GetSlotsBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "GetSlotsBP");

	Params::ItemSelectorView_GetSlotsBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Stalker2.ItemSelectorView.UIItemSelectorDetector
// (Final, Native, Public)

void UItemSelectorView::UIItemSelectorDetector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "UIItemSelectorDetector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.UIItemSelectorFlashlight
// (Final, Native, Public)

void UItemSelectorView::UIItemSelectorFlashlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "UIItemSelectorFlashlight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.UIItemSelectorGrenadeLauncher
// (Final, Native, Public)

void UItemSelectorView::UIItemSelectorGrenadeLauncher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "UIItemSelectorGrenadeLauncher");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.UIItemSelectorUnarm
// (Final, Native, Public)

void UItemSelectorView::UIItemSelectorUnarm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "UIItemSelectorUnarm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorView.ToggleAttachMode
// (Final, Native, Public, Const)

void UItemSelectorView::ToggleAttachMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorView", "ToggleAttachMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorWeaponSlot.ConstructUpdateSlotScale
// (Final, Native, Public, BlueprintCallable)

void UItemSelectorWeaponSlot::ConstructUpdateSlotScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorWeaponSlot", "ConstructUpdateSlotScale");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemSelectorWeaponSlot.GetHoveredWidgets
// (Event, Public, BlueprintEvent)
// Parameters:
// TArray<class UUserWidget*>              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UUserWidget*> UItemSelectorWeaponSlot::GetHoveredWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorWeaponSlot", "GetHoveredWidgets");

	Params::ItemSelectorWeaponSlot_GetHoveredWidgets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Stalker2.ItemSelectorWeaponSlot.IsAlternativeSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemSelectorWeaponSlot::IsAlternativeSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorWeaponSlot", "IsAlternativeSlot");

	Params::ItemSelectorWeaponSlot_IsAlternativeSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ItemSelectorWeaponSlot.IsGrenadeSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemSelectorWeaponSlot::IsGrenadeSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorWeaponSlot", "IsGrenadeSlot");

	Params::ItemSelectorWeaponSlot_IsGrenadeSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ItemSelectorWeaponSlot.IsWeaponSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemSelectorWeaponSlot::IsWeaponSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemSelectorWeaponSlot", "IsWeaponSlot");

	Params::ItemSelectorWeaponSlot_IsWeaponSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ItemUsageComponent.AddAffectedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInteractionComponent*            InteractionComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemUsageComponent::AddAffectedComponent(class UInteractionComponent* InteractionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemUsageComponent", "AddAffectedComponent");

	Params::ItemUsageComponent_AddAffectedComponent Parms{};

	Parms.InteractionComponent = InteractionComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemUsageComponent.ConsumeRequiredItems
// (Final, Native, Public, BlueprintCallable)

void UItemUsageComponent::ConsumeRequiredItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemUsageComponent", "ConsumeRequiredItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemUsageComponent.RemoveAffectedComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInteractionComponent*            InteractionComponent                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemUsageComponent::RemoveAffectedComponent(class UInteractionComponent* InteractionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemUsageComponent", "RemoveAffectedComponent");

	Params::ItemUsageComponent_RemoveAffectedComponent Parms{};

	Parms.InteractionComponent = InteractionComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ItemUsageComponent.HasAnyItemNeededToInteract
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemUsageComponent::HasAnyItemNeededToInteract() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemUsageComponent", "HasAnyItemNeededToInteract");

	Params::ItemUsageComponent_HasAnyItemNeededToInteract Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ItemUsageComponent.HasRequiredItems
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UItemUsageComponent::HasRequiredItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemUsageComponent", "HasRequiredItems");

	Params::ItemUsageComponent_HasRequiredItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.QuickPanel.OnQuickSlotMouseEnter
// (Final, Native, Public)
// Parameters:
// class UQuickSlot*                       ItemWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuickPanel::OnQuickSlotMouseEnter(class UQuickSlot* ItemWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickPanel", "OnQuickSlotMouseEnter");

	Params::QuickPanel_OnQuickSlotMouseEnter Parms{};

	Parms.ItemWidget = ItemWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.QuickPanel.OnQuickSlotMouseLeave
// (Final, Native, Public)
// Parameters:
// class UQuickSlot*                       HoveredWidget                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuickPanel::OnQuickSlotMouseLeave(class UQuickSlot* HoveredWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickPanel", "OnQuickSlotMouseLeave");

	Params::QuickPanel_OnQuickSlotMouseLeave Parms{};

	Parms.HoveredWidget = HoveredWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.QuickPanel.PlayShouldUseAnimationIfRequired
// (Final, Native, Public, Const)
// Parameters:
// ESortGroup                              InSortGroup                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuickPanel::PlayShouldUseAnimationIfRequired(ESortGroup InSortGroup) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickPanel", "PlayShouldUseAnimationIfRequired");

	Params::QuickPanel_PlayShouldUseAnimationIfRequired Parms{};

	Parms.InSortGroup = InSortGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.QuickPanel.UpdateShouldUseAnimation
// (Final, Native, Public, Const)

void UQuickPanel::UpdateShouldUseAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickPanel", "UpdateShouldUseAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.ClickButtonQuest
// (Final, Native, Protected)
// Parameters:
// const class FName                       ButtonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJournalPage::ClickButtonQuest(const class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "ClickButtonQuest");

	Params::JournalPage_ClickButtonQuest Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.SelectedSlotWithMouse
// (Final, Native, Public)

void UJournalPage::SelectedSlotWithMouse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "SelectedSlotWithMouse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.ShowDetails
// (Final, Native, Public)
// Parameters:
// bool                                    bEmpty                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJournalPage::ShowDetails(bool bEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "ShowDetails");

	Params::JournalPage_ShowDetails Parms{};

	Parms.bEmpty = bEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.StageSlotHover
// (Final, Native, Protected)

void UJournalPage::StageSlotHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "StageSlotHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationDown
// (Final, Native, Public)

void UJournalPage::UIPDANavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationLeft
// (Final, Native, Public)

void UJournalPage::UIPDANavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationLeftHint
// (Final, Native, Public)

void UJournalPage::UIPDANavigationLeftHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationLeftHint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationReleased
// (Final, Native, Public)

void UJournalPage::UIPDANavigationReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationRight
// (Final, Native, Public)

void UJournalPage::UIPDANavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationRightHint
// (Final, Native, Public)

void UJournalPage::UIPDANavigationRightHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationRightHint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationSelect
// (Final, Native, Public)

void UJournalPage::UIPDANavigationSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationSelectPanelLeft
// (Final, Native, Public)

void UJournalPage::UIPDANavigationSelectPanelLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationSelectPanelLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationSelectPanelRight
// (Final, Native, Public)

void UJournalPage::UIPDANavigationSelectPanelRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationSelectPanelRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDANavigationUp
// (Final, Native, Public)

void UJournalPage::UIPDANavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDANavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UIPDATransitionToMarkerPosition
// (Final, Native, Public)

void UJournalPage::UIPDATransitionToMarkerPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UIPDATransitionToMarkerPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UpdateButton
// (Final, Native, Protected)
// Parameters:
// const int32                             IndexUpdateButton                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJournalPage::UpdateButton(const int32 IndexUpdateButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UpdateButton");

	Params::JournalPage_UpdateButton Parms{};

	Parms.IndexUpdateButton = IndexUpdateButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UpdateHoverDetailsElement
// (Final, Native, Protected)
// Parameters:
// const bool                              bHovered                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EDetailsElementType               ElementType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJournalPage::UpdateHoverDetailsElement(const bool bHovered, const EDetailsElementType ElementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UpdateHoverDetailsElement");

	Params::JournalPage_UpdateHoverDetailsElement Parms{};

	Parms.bHovered = bHovered;
	Parms.ElementType = ElementType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.JournalPage.UpdateStageOnDetailed
// (Final, Native, Protected)

void UJournalPage::UpdateStageOnDetailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JournalPage", "UpdateStageOnDetailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VolumeForEffects.ActivateDelegateHandle
// (Final, Native, Public)
// Parameters:
// class UObject*                          DataObject                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVolumeForEffects::ActivateDelegateHandle(class UObject* DataObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VolumeForEffects", "ActivateDelegateHandle");

	Params::VolumeForEffects_ActivateDelegateHandle Parms{};

	Parms.DataObject = DataObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VolumeForEffects.DeactivateDelegateHandle
// (Final, Native, Public)
// Parameters:
// class UObject*                          DataObject                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVolumeForEffects::DeactivateDelegateHandle(class UObject* DataObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VolumeForEffects", "DeactivateDelegateHandle");

	Params::VolumeForEffects_DeactivateDelegateHandle Parms{};

	Parms.DataObject = DataObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VolumeForEffects.SetDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bDisabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVolumeForEffects::SetDisabled(const bool bDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VolumeForEffects", "SetDisabled");

	Params::VolumeForEffects_SetDisabled Parms{};

	Parms.bDisabled = bDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LadderComponent.SetLadderHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InbLadderHidden                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULadderComponent::SetLadderHidden(const bool InbLadderHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LadderComponent", "SetLadderHidden");

	Params::LadderComponent_SetLadderHidden Parms{};

	Parms.InbLadderHidden = InbLadderHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LadderComponent.SetTopBlocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InbTopBlocked                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULadderComponent::SetTopBlocked(const bool InbTopBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LadderComponent", "SetTopBlocked");

	Params::LadderComponent_SetTopBlocked Parms{};

	Parms.InbTopBlocked = InbTopBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LadderComponent.IsLadderHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULadderComponent::IsLadderHidden() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LadderComponent", "IsLadderHidden");

	Params::LadderComponent_IsLadderHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.LadderComponent.IsTopBlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULadderComponent::IsTopBlocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LadderComponent", "IsTopBlocked");

	Params::LadderComponent_IsTopBlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.LavaLampAnomaly.OnFollowPositionChanged
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   FollowPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALavaLampAnomaly::OnFollowPositionChanged(const struct FVector& FollowPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LavaLampAnomaly", "OnFollowPositionChanged");

	Params::LavaLampAnomaly_OnFollowPositionChanged Parms{};

	Parms.FollowPosition = std::move(FollowPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.LavaLampAnomaly.OnLavaCollision
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBasicParticleData&        BasicParticleData                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ALavaLampAnomaly::OnLavaCollision(const struct FBasicParticleData& BasicParticleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LavaLampAnomaly", "OnLavaCollision");

	Params::LavaLampAnomaly_OnLavaCollision Parms{};

	Parms.BasicParticleData = std::move(BasicParticleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LavaLampAnomaly.OnLavaStaticObjectCollision
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALavaLampAnomaly::OnLavaStaticObjectCollision(const struct FVector& Location, const struct FVector& NormalDirection, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LavaLampAnomaly", "OnLavaStaticObjectCollision");

	Params::LavaLampAnomaly_OnLavaStaticObjectCollision Parms{};

	Parms.Location = std::move(Location);
	Parms.NormalDirection = std::move(NormalDirection);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.Lever.ChangeLeverPosition
// (Final, Native, Private)

void ULever::ChangeLeverPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Lever", "ChangeLeverPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LightBulbComponent.SetAutoLightOnNight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInAutoLightOnNight                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightBulbComponent::SetAutoLightOnNight(const bool bInAutoLightOnNight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightBulbComponent", "SetAutoLightOnNight");

	Params::LightBulbComponent_SetAutoLightOnNight Parms{};

	Parms.bInAutoLightOnNight = bInAutoLightOnNight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LightBulbComponent.SetFlicker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bInFlicker                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightBulbComponent::SetFlicker(const bool bInFlicker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightBulbComponent", "SetFlicker");

	Params::LightBulbComponent_SetFlicker Parms{};

	Parms.bInFlicker = bInFlicker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LightBulbComponent.IsAutoLightOnNight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULightBulbComponent::IsAutoLightOnNight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightBulbComponent", "IsAutoLightOnNight");

	Params::LightBulbComponent_IsAutoLightOnNight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.LightBulbComponent.IsFlicker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULightBulbComponent::IsFlicker() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightBulbComponent", "IsFlicker");

	Params::LightBulbComponent_IsFlicker Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.SettingElementButton.ChangeLegendOnHovered
// (Final, Native, Private)

void USettingElementButton::ChangeLegendOnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingElementButton", "ChangeLegendOnHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SettingElementButton.ChangeLegendOnUnhovered
// (Final, Native, Private)

void USettingElementButton::ChangeLegendOnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingElementButton", "ChangeLegendOnUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.LocalizedImage.ForceLoadImage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>& SoftImage                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULocalizedImage::ForceLoadImage(const TSoftObjectPtr<class UTexture2D>& SoftImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LocalizedImage", "ForceLoadImage");

	Params::LocalizedImage_ForceLoadImage Parms{};

	Parms.SoftImage = SoftImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuButtonActionBase.ExecuteButtonAction
// (Native, Public)

void UMenuButtonActionBase::ExecuteButtonAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuButtonActionBase", "ExecuteButtonAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDANotesDetails.PlayNoteAudio
// (Final, Native, Public)
// Parameters:
// const bool                              bStart                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDANotesDetails::PlayNoteAudio(const bool bStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDANotesDetails", "PlayNoteAudio");

	Params::PDANotesDetails_PlayNoteAudio Parms{};

	Parms.bStart = bStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MenuMainBackgroundVideo.PlayVideo
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMediaSource*                     VideoToPlay                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuMainBackgroundVideo::PlayVideo(class UMediaSource* VideoToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuMainBackgroundVideo", "PlayVideo");

	Params::MenuMainBackgroundVideo_PlayVideo Parms{};

	Parms.VideoToPlay = VideoToPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.MenuNavigationPanelBase.OnButtonPressed
// (Native, Public)
// Parameters:
// class USettingsNavigationButton*        PressedButton                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMenuNavigationPanelBase::OnButtonPressed(class USettingsNavigationButton* PressedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MenuNavigationPanelBase", "OnButtonPressed");

	Params::MenuNavigationPanelBase_OnButtonPressed Parms{};

	Parms.PressedButton = PressedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TopazScannerComponent.ChangeState
// (Final, Native, Public, BlueprintCallable)

void UTopazScannerComponent::ChangeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TopazScannerComponent", "ChangeState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TopazScannerComponent.GetCurrentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETopazScannerState                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETopazScannerState UTopazScannerComponent::GetCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TopazScannerComponent", "GetCurrentState");

	Params::TopazScannerComponent_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.TopazScannerComponent.GetStateStartTimestamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTopazScannerComponent::GetStateStartTimestamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TopazScannerComponent", "GetStateStartTimestamp");

	Params::TopazScannerComponent_GetStateStartTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.MistAnomaly.OnAnomalyBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMistAnomaly::OnAnomalyBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "OnAnomalyBeginOverlap");

	Params::MistAnomaly_OnAnomalyBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MistAnomaly.OnAnomalyEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMistAnomaly::OnAnomalyEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "OnAnomalyEndOverlap");

	Params::MistAnomaly_OnAnomalyEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MistAnomaly.OnPlayerEnter
// (Event, Protected, BlueprintEvent)

void AMistAnomaly::OnPlayerEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "OnPlayerEnter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.MistAnomaly.OnPlayerExit
// (Event, Protected, BlueprintEvent)

void AMistAnomaly::OnPlayerExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "OnPlayerExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.MistAnomaly.OnPlayerTeleport
// (Event, Protected, BlueprintEvent)

void AMistAnomaly::OnPlayerTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "OnPlayerTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.MistAnomaly.OnSaveBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AMistAnomaly::OnSaveBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "OnSaveBeginOverlap");

	Params::MistAnomaly_OnSaveBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.MistAnomaly.SetTeleportationEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              InbTeleportationEnabled                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMistAnomaly::SetTeleportationEnabled(const bool InbTeleportationEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MistAnomaly", "SetTeleportationEnabled");

	Params::MistAnomaly_SetTeleportationEnabled Parms{};

	Parms.InbTeleportationEnabled = InbTeleportationEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.QuestTaskNotification.PlayTaskAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EQuestTaskAnimationType           AnimationType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bWithSound                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestTaskNotification::PlayTaskAnimation(const EQuestTaskAnimationType AnimationType, const bool bWithSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestTaskNotification", "PlayTaskAnimation");

	Params::QuestTaskNotification_PlayTaskAnimation Parms{};

	Parms.AnimationType = AnimationType;
	Parms.bWithSound = bWithSound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.QuestTaskNotification.PostPlayTaskAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// const EQuestTaskAnimationType           AnimationType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestTaskNotification::PostPlayTaskAnimation(const EQuestTaskAnimationType AnimationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestTaskNotification", "PostPlayTaskAnimation");

	Params::QuestTaskNotification_PostPlayTaskAnimation Parms{};

	Parms.AnimationType = AnimationType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.ModifiableRichText.GetNextLine
// (Event, Public, BlueprintEvent)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const class FText UModifiableRichText::GetNextLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModifiableRichText", "GetNextLine");

	Params::ModifiableRichText_GetNextLine Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Stalker2.ModioEmailAuthPopup.OnEditableTextBoxTextChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UModioEmailAuthPopup::OnEditableTextBoxTextChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioEmailAuthPopup", "OnEditableTextBoxTextChanged");

	Params::ModioEmailAuthPopup_OnEditableTextBoxTextChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ModioEmailAuthPopup.GetEmail
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioEmailAuthPopup::GetEmail() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioEmailAuthPopup", "GetEmail");

	Params::ModioEmailAuthPopup_GetEmail Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.ModioFilterNavigationPanel.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// const int32                             ButtonIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioFilterNavigationPanel::OnButtonClicked(const int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioFilterNavigationPanel", "OnButtonClicked");

	Params::ModioFilterNavigationPanel_OnButtonClicked Parms{};

	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PossessedObjectComponent.OnSphereComponentBeginOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlapComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPossessedObjectComponent::OnSphereComponentBeginOverlap(class UPrimitiveComponent* OverlapComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessedObjectComponent", "OnSphereComponentBeginOverlap");

	Params::PossessedObjectComponent_OnSphereComponentBeginOverlap Parms{};

	Parms.OverlapComponent = OverlapComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PossessedObjectComponent.OnSphereComponentHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPossessedObjectComponent::OnSphereComponentHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessedObjectComponent", "OnSphereComponentHit");

	Params::PossessedObjectComponent_OnSphereComponentHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.ClickButtonMenu
// (Final, Native, Protected)
// Parameters:
// const class FName                       ButtonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotesPage::ClickButtonMenu(const class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "ClickButtonMenu");

	Params::NotesPage_ClickButtonMenu Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.ShowDetails
// (Final, Native, Protected)
// Parameters:
// const bool                              bEmpty                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNotesPage::ShowDetails(const bool bEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "ShowDetails");

	Params::NotesPage_ShowDetails Parms{};

	Parms.bEmpty = bEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.SlotTransitionUp
// (Final, Native, Protected)

void UNotesPage::SlotTransitionUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "SlotTransitionUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigationButtonRelease
// (Final, Native, Public)

void UNotesPage::UIPDANavigationButtonRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigationButtonRelease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigationDown
// (Final, Native, Public)

void UNotesPage::UIPDANavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigationLeft
// (Final, Native, Public)

void UNotesPage::UIPDANavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigatioNoteDown
// (Final, Native, Public)

void UNotesPage::UIPDANavigatioNoteDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigatioNoteDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigatioNoteUp
// (Final, Native, Public)

void UNotesPage::UIPDANavigatioNoteUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigatioNoteUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigationPlayAudio
// (Final, Native, Public)

void UNotesPage::UIPDANavigationPlayAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigationPlayAudio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigationRight
// (Final, Native, Public)

void UNotesPage::UIPDANavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NotesPage.UIPDANavigationUp
// (Final, Native, Public)

void UNotesPage::UIPDANavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotesPage", "UIPDANavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ModioSearchField.HandleOnTextCommitted
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const ETextCommit                       CommitMethod                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModioSearchField::HandleOnTextCommitted(const class FText& Text, const ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSearchField", "HandleOnTextCommitted");

	Params::ModioSearchField_HandleOnTextCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ModioSearchField.GetSearchKeywords
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UModioSearchField::GetSearchKeywords() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModioSearchField", "GetSearchKeywords");

	Params::ModioSearchField_GetSearchKeywords Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.NavigationPanel.ClickMenuButton
// (Final, Native, Private)
// Parameters:
// const class FName                       InButtonId                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationPanel::ClickMenuButton(const class FName InButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "ClickMenuButton");

	Params::NavigationPanel_ClickMenuButton Parms{};

	Parms.InButtonId = InButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.InitClickTransition
// (Final, Native, Public)
// Parameters:
// class FName                             ButtonId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationPanel::InitClickTransition(class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "InitClickTransition");

	Params::NavigationPanel_InitClickTransition Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.MoveSelectSlotToNextSlot
// (Final, Native, Public)

void UNavigationPanel::MoveSelectSlotToNextSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "MoveSelectSlotToNextSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.MoveSelectSlotToPreviousSlot
// (Final, Native, Public)

void UNavigationPanel::MoveSelectSlotToPreviousSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "MoveSelectSlotToPreviousSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.TransitSelectSlotBack
// (Final, Native, Public)

void UNavigationPanel::TransitSelectSlotBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "TransitSelectSlotBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.TransitSelectSlotForward
// (Final, Native, Public)

void UNavigationPanel::TransitSelectSlotForward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "TransitSelectSlotForward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.TransitSelectSlotRelease
// (Final, Native, Public)

void UNavigationPanel::TransitSelectSlotRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "TransitSelectSlotRelease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.NavigationPanel.TransitToNextSlot
// (Final, Native, Public)

void UNavigationPanel::TransitToNextSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavigationPanel", "TransitToNextSlot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAQuestDetails.StageClick
// (Final, Native, Protected)
// Parameters:
// class UPDAQuestTaskSlot*                InSlot                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDAQuestDetails::StageClick(class UPDAQuestTaskSlot* InSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestDetails", "StageClick");

	Params::PDAQuestDetails_StageClick Parms{};

	Parms.InSlot = InSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAQuestDetails.UpdateDescriptionHover
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsHovered                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDAQuestDetails::UpdateDescriptionHover(bool bIsHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestDetails", "UpdateDescriptionHover");

	Params::PDAQuestDetails_UpdateDescriptionHover Parms{};

	Parms.bIsHovered = bIsHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAQuestDetails.UpdateStageHover
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsStageHovered                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPDAQuestDetails::UpdateStageHover(bool bIsStageHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestDetails", "UpdateStageHover");

	Params::PDAQuestDetails_UpdateStageHover Parms{};

	Parms.bIsStageHovered = bIsStageHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PDAQuestDetails.UpdateStageSlotHover
// (Final, Native, Protected)

void UPDAQuestDetails::UpdateStageSlotHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDAQuestDetails", "UpdateStageSlotHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlayerContextualAction.ActionEnd
// (Final, Native, Public)

void APlayerContextualAction::ActionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerContextualAction", "ActionEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlayerContextualAction.ActionStart
// (Final, Native, Public)

void APlayerContextualAction::ActionStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerContextualAction", "ActionStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlayVideoWidget.EndVideo
// (Native, Public, BlueprintCallable)

void UPlayVideoWidget::EndVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayVideoWidget", "EndVideo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlayVideoWidget.SkipVideo
// (Final, Native, Protected, BlueprintCallable)

void UPlayVideoWidget::SkipVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayVideoWidget", "SkipVideo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PlayVideoWidget.GetVideoDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayVideoWidget::GetVideoDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayVideoWidget", "GetVideoDuration");

	Params::PlayVideoWidget_GetVideoDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.PopupView.Cancel
// (Final, Native, Public)

void UPopupView::Cancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupView", "Cancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PopupView.Confirm
// (Final, Native, Public)

void UPopupView::Confirm()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupView", "Confirm");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PopupView.Discard
// (Final, Native, Public)

void UPopupView::Discard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupView", "Discard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PopupView.Retry
// (Final, Native, Public)

void UPopupView::Retry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupView", "Retry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PresentationSubsystem.GoToMainMenu
// (Final, Native, Public, BlueprintCallable)

void UPresentationSubsystem::GoToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PresentationSubsystem", "GoToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PresentationSubsystem.ResumeGame
// (Final, Native, Public, BlueprintCallable)

void UPresentationSubsystem::ResumeGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PresentationSubsystem", "ResumeGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Projectile.OnOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AProjectile::OnOverlap(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Projectile", "OnOverlap");

	Params::Projectile_OnOverlap Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.PsyPhantomComponent.OnBeginOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPsyPhantomComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PsyPhantomComponent", "OnBeginOverlap");

	Params::PsyPhantomComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ReferenceHolderBase.CheckAssetReferences
// (Final, Native, Public)

void AReferenceHolderBase::CheckAssetReferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReferenceHolderBase", "CheckAssetReferences");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ReferenceHolderBase.UpdateObjectReferences
// (Final, Native, Public)

void AReferenceHolderBase::UpdateObjectReferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReferenceHolderBase", "UpdateObjectReferences");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ReferenceHolderBase.ValidateGatheredReferences
// (Final, Native, Public, Const)

void AReferenceHolderBase::ValidateGatheredReferences() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReferenceHolderBase", "ValidateGatheredReferences");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.RightClickMenuWidget.OnItemClicked
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FRightClickMenuItemData&   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void URightClickMenuWidget::OnItemClicked(const struct FRightClickMenuItemData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightClickMenuWidget", "OnItemClicked");

	Params::RightClickMenuWidget_OnItemClicked Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.RightClickMenuWidget.OnItemHover
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FRightClickMenuItemData&   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bInHover                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URightClickMenuWidget::OnItemHover(const struct FRightClickMenuItemData& Data, const bool bInHover)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightClickMenuWidget", "OnItemHover");

	Params::RightClickMenuWidget_OnItemHover Parms{};

	Parms.Data = std::move(Data);
	Parms.bInHover = bInHover;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.RightClickMenuWidget.OnNoItemClick
// (Final, Native, Private)

void URightClickMenuWidget::OnNoItemClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightClickMenuWidget", "OnNoItemClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SafeZoneWidget.HandleEditSafeZoneMoveBordersDecreaseHeight
// (Final, Exec, Native, Private)

void USafeZoneWidget::HandleEditSafeZoneMoveBordersDecreaseHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SafeZoneWidget", "HandleEditSafeZoneMoveBordersDecreaseHeight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SafeZoneWidget.HandleEditSafeZoneMoveBordersDecreaseWidth
// (Final, Exec, Native, Private)

void USafeZoneWidget::HandleEditSafeZoneMoveBordersDecreaseWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SafeZoneWidget", "HandleEditSafeZoneMoveBordersDecreaseWidth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SafeZoneWidget.HandleEditSafeZoneMoveBordersIncreaseHeight
// (Final, Exec, Native, Private)

void USafeZoneWidget::HandleEditSafeZoneMoveBordersIncreaseHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SafeZoneWidget", "HandleEditSafeZoneMoveBordersIncreaseHeight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SafeZoneWidget.HandleEditSafeZoneMoveBordersIncreaseWidth
// (Final, Exec, Native, Private)

void USafeZoneWidget::HandleEditSafeZoneMoveBordersIncreaseWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SafeZoneWidget", "HandleEditSafeZoneMoveBordersIncreaseWidth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ShootingWeaponComponent.Shoot
// (Final, Native, Public, BlueprintCallable)

void UShootingWeaponComponent::Shoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShootingWeaponComponent", "Shoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ShootingWeaponComponent.ShootWithOwnerOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerOverride                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShootingWeaponComponent::ShootWithOwnerOverride(class UObject* OwnerOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShootingWeaponComponent", "ShootWithOwnerOverride");

	Params::ShootingWeaponComponent_ShootWithOwnerOverride Parms{};

	Parms.OwnerOverride = OwnerOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SoapBubbleAnomaly.OnActorCollided
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASoapBubbleAnomaly::OnActorCollided(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoapBubbleAnomaly", "OnActorCollided");

	Params::SoapBubbleAnomaly_OnActorCollided Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StatPanel.UpdateAllStats
// (Final, Native, Public, BlueprintCallable)

void UStatPanel::UpdateAllStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatPanel", "UpdateAllStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StatPanelDebug.UpdateAllStats
// (Final, Native, Public, BlueprintCallable)

void UStatPanelDebug::UpdateAllStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatPanelDebug", "UpdateAllStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StrandGenerator.GetFinalStrandData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FStrandFinalData                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStrandFinalData AStrandGenerator::GetFinalStrandData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StrandGenerator", "GetFinalStrandData");

	Params::StrandGenerator_GetFinalStrandData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.StreamingDistanceOverridingVolume.OnTriggerOverlapped
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AStreamingDistanceOverridingVolume::OnTriggerOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingDistanceOverridingVolume", "OnTriggerOverlapped");

	Params::StreamingDistanceOverridingVolume_OnTriggerOverlapped Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StreamingDistanceOverridingVolume.UpdateStreamingConfiguration
// (Final, Native, Private)

void AStreamingDistanceOverridingVolume::UpdateStreamingConfiguration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreamingDistanceOverridingVolume", "UpdateStreamingConfiguration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StrelokBossComponent.OnDashAbilityUsed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bAbilityUsed                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStrelokBossComponent::OnDashAbilityUsed(const bool bAbilityUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StrelokBossComponent", "OnDashAbilityUsed");

	Params::StrelokBossComponent_OnDashAbilityUsed Parms{};

	Parms.bAbilityUsed = bAbilityUsed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.StrelokBossfightController.SpawnAnomalyField
// (Final, Native, Public, BlueprintCallable)

void AStrelokBossfightController::SpawnAnomalyField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StrelokBossfightController", "SpawnAnomalyField");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SystemNotificationItem.SetModel
// (Final, Native, Protected)

void USystemNotificationItem::SetModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemNotificationItem", "SetModel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SystemNotificationWidget.CenterMapOnLocation
// (Final, Native, Private)

void USystemNotificationWidget::CenterMapOnLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemNotificationWidget", "CenterMapOnLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SystemNotificationWidget.InputCancel
// (Final, Native, Public)

void USystemNotificationWidget::InputCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemNotificationWidget", "InputCancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SystemNotificationWidget.NotificationClickHandler
// (Final, Native, Public)

void USystemNotificationWidget::NotificationClickHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemNotificationWidget", "NotificationClickHandler");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SystemNotificationWidget.OnSystemNotificationActionCompleted
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FNotificationModel&        Model                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USystemNotificationWidget::OnSystemNotificationActionCompleted(const struct FNotificationModel& Model)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemNotificationWidget", "OnSystemNotificationActionCompleted");

	Params::SystemNotificationWidget_OnSystemNotificationActionCompleted Parms{};

	Parms.Model = std::move(Model);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.SystemNotificationWidget.ProceedInput
// (Final, Native, Public)

void USystemNotificationWidget::ProceedInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SystemNotificationWidget", "ProceedInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.Teleport.OnBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATeleport::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Teleport", "OnBeginOverlap");

	Params::Teleport_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TextWidget.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTextWidget::GetText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextWidget", "GetText");

	Params::TextWidget_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.TextWidget.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (Parm, NativeAccessSpecifierPublic)

void UTextWidget::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextWidget", "SetText");

	Params::TextWidget_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.ToggleButton.ChangeToggleButtonPosition
// (Final, Native, Private)

void UToggleButton::ChangeToggleButtonPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToggleButton", "ChangeToggleButtonPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TopazScanner.OnStateChanged
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const ETopazScannerState                NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATopazScanner::OnStateChanged(const ETopazScannerState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TopazScanner", "OnStateChanged");

	Params::TopazScanner_OnStateChanged Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TopazScanner.IsStationary
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATopazScanner::IsStationary() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TopazScanner", "IsStationary");

	Params::TopazScanner_IsStationary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.TradeView.OnCancelTradeHoldReleased
// (Final, Native, Public)

void UTradeView::OnCancelTradeHoldReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TradeView", "OnCancelTradeHoldReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TradeView.OnCancelTradeHoldTriggered
// (Final, Native, Protected)

void UTradeView::OnCancelTradeHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TradeView", "OnCancelTradeHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TradeView.OnConfirmTradeHoldReleased
// (Final, Native, Public)

void UTradeView::OnConfirmTradeHoldReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TradeView", "OnConfirmTradeHoldReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TradeView.OnConfirmTradeHoldTriggered
// (Final, Native, Protected)

void UTradeView::OnConfirmTradeHoldTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TradeView", "OnConfirmTradeHoldTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.TradeView.SellOrBuyReturnItemAction
// (Final, Native, Public)

void UTradeView::SellOrBuyReturnItemAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TradeView", "SellOrBuyReturnItemAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UIManagerEx.OnOpenLootMenu
// (Final, Native, Private)
// Parameters:
// const struct FItemContainerUID&         InStorageItemContainerUID                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIManagerEx::OnOpenLootMenu(const struct FItemContainerUID& InStorageItemContainerUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIManagerEx", "OnOpenLootMenu");

	Params::UIManagerEx_OnOpenLootMenu Parms{};

	Parms.InStorageItemContainerUID = std::move(InStorageItemContainerUID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.ChangeUpgradeModule
// (Final, Native, Private)

void UUpgradeMenuWidget::ChangeUpgradeModule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "ChangeUpgradeModule");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.ClearAttaches
// (Event, Protected, BlueprintEvent)

void UUpgradeMenuWidget::ClearAttaches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "ClearAttaches");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.UpgradeMenuWidget.DrawAttaches
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttachIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::DrawAttaches(class UTexture2D* Texture, int32 AttachIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "DrawAttaches");

	Params::UpgradeMenuWidget_DrawAttaches Parms{};

	Parms.Texture = Texture;
	Parms.AttachIndex = AttachIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.UpgradeMenuWidget.LoadPrototypeEditor
// (Final, Native, Private)

void UUpgradeMenuWidget::LoadPrototypeEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "LoadPrototypeEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnApplyUpgrade
// (Final, Native, Private)
// Parameters:
// const class FString&                    UpgradeID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUpgradeSlot*                     InCurrentSlot                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::OnApplyUpgrade(const class FString& UpgradeID, class UUpgradeSlot* InCurrentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnApplyUpgrade");

	Params::UpgradeMenuWidget_OnApplyUpgrade Parms{};

	Parms.UpgradeID = std::move(UpgradeID);
	Parms.InCurrentSlot = InCurrentSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnMouseBlackFadeDown
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGeometry&                 InGeometry                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FEventReply UUpgradeMenuWidget::OnMouseBlackFadeDown(const struct FGeometry& InGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnMouseBlackFadeDown");

	Params::UpgradeMenuWidget_OnMouseBlackFadeDown Parms{};

	Parms.InGeometry = std::move(InGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.UpgradeMenuWidget.OnRepair
// (Final, Native, Public)

void UUpgradeMenuWidget::OnRepair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnRepair");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnRevertLastUpgrade
// (Final, Native, Public)

void UUpgradeMenuWidget::OnRevertLastUpgrade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnRevertLastUpgrade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnSectionClicked
// (Final, Native, Private)
// Parameters:
// class UUpgradeSection*                  Section                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::OnSectionClicked(class UUpgradeSection* Section)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnSectionClicked");

	Params::UpgradeMenuWidget_OnSectionClicked Parms{};

	Parms.Section = Section;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnSectionFadeProgress
// (Final, Native, Private)
// Parameters:
// const float                             Alpha                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsShowing                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::OnSectionFadeProgress(const float Alpha, const bool bIsShowing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnSectionFadeProgress");

	Params::UpgradeMenuWidget_OnSectionFadeProgress Parms{};

	Parms.Alpha = Alpha;
	Parms.bIsShowing = bIsShowing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnUpgradeClick
// (Final, Native, Private)
// Parameters:
// const class FString&                    UpgradeID                                              (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUpgradeSlot*                     InCurrentSlot                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::OnUpgradeClick(const class FString& UpgradeID, class UUpgradeSlot* InCurrentSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnUpgradeClick");

	Params::UpgradeMenuWidget_OnUpgradeClick Parms{};

	Parms.UpgradeID = std::move(UpgradeID);
	Parms.InCurrentSlot = InCurrentSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnUpgradeMouseEnter
// (Final, Native, Private)
// Parameters:
// const class FString&                    UpgradeID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::OnUpgradeMouseEnter(const class FString& UpgradeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnUpgradeMouseEnter");

	Params::UpgradeMenuWidget_OnUpgradeMouseEnter Parms{};

	Parms.UpgradeID = std::move(UpgradeID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnUpgradeMouseExit
// (Final, Native, Private)

void UUpgradeMenuWidget::OnUpgradeMouseExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnUpgradeMouseExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.OnWeaponFadeProgress
// (Final, Native, Private)
// Parameters:
// const float                             Alpha                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsShowing                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradeMenuWidget::OnWeaponFadeProgress(const float Alpha, const bool bIsShowing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "OnWeaponFadeProgress");

	Params::UpgradeMenuWidget_OnWeaponFadeProgress Parms{};

	Parms.Alpha = Alpha;
	Parms.bIsShowing = bIsShowing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeMenuWidget.LogSectionPositions
// (Final, Native, Private, Const)

void UUpgradeMenuWidget::LogSectionPositions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeMenuWidget", "LogSectionPositions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.BindConfirmPopup
// (Final, Native, Protected)

void UUpgradePage::BindConfirmPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "BindConfirmPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.BindUpgradesNavigation
// (Final, Native, Protected)

void UUpgradePage::BindUpgradesNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "BindUpgradesNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.ClearInput
// (Final, Native, Public)

void UUpgradePage::ClearInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "ClearInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.ClickButtonMenu
// (Final, Native, Protected)
// Parameters:
// const class FName                       ButtonId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradePage::ClickButtonMenu(const class FName ButtonId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "ClickButtonMenu");

	Params::UpgradePage_ClickButtonMenu Parms{};

	Parms.ButtonId = ButtonId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.HandleConfirmPopupBindings
// (Final, Native, Protected)
// Parameters:
// bool                                    InBind                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUpgradePage::HandleConfirmPopupBindings(bool InBind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "HandleConfirmPopupBindings");

	Params::UpgradePage_HandleConfirmPopupBindings Parms{};

	Parms.InBind = InBind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.Hide
// (Final, Native, Public)

void UUpgradePage::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.Remove
// (Final, Native, Public)

void UUpgradePage::Remove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "Remove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.Repair
// (Final, Native, Public)

void UUpgradePage::Repair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "Repair");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDANavigationButtonRelease
// (Final, Native, Public)

void UUpgradePage::UIPDANavigationButtonRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDANavigationButtonRelease");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDANavigationDown
// (Final, Native, Public)

void UUpgradePage::UIPDANavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDANavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDANavigationLeft
// (Final, Native, Public)

void UUpgradePage::UIPDANavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDANavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDANavigationRight
// (Final, Native, Public)

void UUpgradePage::UIPDANavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDANavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDANavigationUp
// (Final, Native, Public)

void UUpgradePage::UIPDANavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDANavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDAUpgradesTreeNavigationBack
// (Final, Native, Public)

void UUpgradePage::UIPDAUpgradesTreeNavigationBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDAUpgradesTreeNavigationBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDAUpgradesTreeNavigationDown
// (Final, Native, Public)

void UUpgradePage::UIPDAUpgradesTreeNavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDAUpgradesTreeNavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDAUpgradesTreeNavigationLeft
// (Final, Native, Public)

void UUpgradePage::UIPDAUpgradesTreeNavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDAUpgradesTreeNavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDAUpgradesTreeNavigationRight
// (Final, Native, Public)

void UUpgradePage::UIPDAUpgradesTreeNavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDAUpgradesTreeNavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDAUpgradesTreeNavigationSelect
// (Final, Native, Public)

void UUpgradePage::UIPDAUpgradesTreeNavigationSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDAUpgradesTreeNavigationSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UIPDAUpgradesTreeNavigationUp
// (Final, Native, Public)

void UUpgradePage::UIPDAUpgradesTreeNavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UIPDAUpgradesTreeNavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UnbindConfirmPopup
// (Final, Native, Protected)

void UUpgradePage::UnbindConfirmPopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UnbindConfirmPopup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UnbindUpgradesNavigation
// (Final, Native, Protected)

void UUpgradePage::UnbindUpgradesNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UnbindUpgradesNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradePage.UpdatePanel
// (Final, Native, Public)

void UUpgradePage::UpdatePanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradePage", "UpdatePanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSection.RebuildSections
// (Event, Public, BlueprintEvent)

void UUpgradeSection::RebuildSections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSection", "RebuildSections");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Stalker2.UpgradeSection.SectionClicked
// (Final, Native, Public)

void UUpgradeSection::SectionClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSection", "SectionClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSection.SectionHovered
// (Final, Native, Public)

void UUpgradeSection::SectionHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSection", "SectionHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSection.SectionUnhovered
// (Final, Native, Public)

void UUpgradeSection::SectionUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSection", "SectionUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSection.ToggleSection
// (Final, Native, Public)

void UUpgradeSection::ToggleSection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSection", "ToggleSection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSlot.Highlight
// (Final, Native, Public)

void UUpgradeSlot::Highlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSlot", "Highlight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSlot.OnUpgradeButtonClick
// (Final, Native, Public)

void UUpgradeSlot::OnUpgradeButtonClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSlot", "OnUpgradeButtonClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UpgradeSlot.Unhighlight
// (Final, Native, Public)

void UUpgradeSlot::Unhighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UpgradeSlot", "Unhighlight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UserMarkerCounter.UpdateMarkerCounterWidget
// (Final, Native, Public)
// Parameters:
// const int32                             NewAmount                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUserMarkerCounter::UpdateMarkerCounterWidget(const int32 NewAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserMarkerCounter", "UpdateMarkerCounterWidget");

	Params::UserMarkerCounter_UpdateMarkerCounterWidget Parms{};

	Parms.NewAmount = NewAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UserMarkerSelector.HoverButton
// (Final, Native, Public)
// Parameters:
// class UUserMarkerSelectorButton*        InHoveredButton                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUserMarkerSelector::HoverButton(class UUserMarkerSelectorButton* InHoveredButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserMarkerSelector", "HoverButton");

	Params::UserMarkerSelector_HoverButton Parms{};

	Parms.InHoveredButton = InHoveredButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.UserMarkerSelector.PressedButton
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const EMarkerType                       MarkType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Coordinates                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUserMarkerSelector::PressedButton(const EMarkerType MarkType, const struct FVector& Coordinates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UserMarkerSelector", "PressedButton");

	Params::UserMarkerSelector_PressedButton Parms{};

	Parms.MarkType = MarkType;
	Parms.Coordinates = std::move(Coordinates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.OnClimbZoneBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVerticalLadder::OnClimbZoneBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "OnClimbZoneBeginOverlap");

	Params::VerticalLadder_OnClimbZoneBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.OnClimbZoneEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVerticalLadder::OnClimbZoneEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "OnClimbZoneEndOverlap");

	Params::VerticalLadder_OnClimbZoneEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.OnHiddenStateChanged
// (Final, Native, Private)

void AVerticalLadder::OnHiddenStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "OnHiddenStateChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.OnLadderEnabled
// (Final, Native, Private, BlueprintCallable)

void AVerticalLadder::OnLadderEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "OnLadderEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.OnUnfoldingEnded
// (Final, Native, Private)

void AVerticalLadder::OnUnfoldingEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "OnUnfoldingEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.OnUnfoldingStarted
// (Final, Native, Private)

void AVerticalLadder::OnUnfoldingStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "OnUnfoldingStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VerticalLadder.ProtectMeshLock
// (Event, Public, BlueprintEvent)
// Parameters:
// const ECollisionEnabled                 CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVerticalLadder::ProtectMeshLock(const ECollisionEnabled CollisionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "ProtectMeshLock");

	Params::VerticalLadder_ProtectMeshLock Parms{};

	Parms.CollisionType = CollisionType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.VerticalLadder.GetClimbZoneHalfHeight
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVerticalLadder::GetClimbZoneHalfHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VerticalLadder", "GetClimbZoneHalfHeight");

	Params::VerticalLadder_GetClimbZoneHalfHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.VideoLoadingScreenWidget.EndVideo
// (Final, Native, Public)

void UVideoLoadingScreenWidget::EndVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoLoadingScreenWidget", "EndVideo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VoiceoverSpeechComponent.OnAKEventFinished
// (Final, Native, Private)
// Parameters:
// EAkCallbackType                         CallbackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAkCallbackInfo*                  CallbackInfo                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoiceoverSpeechComponent::OnAKEventFinished(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoiceoverSpeechComponent", "OnAKEventFinished");

	Params::VoiceoverSpeechComponent_OnAKEventFinished Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VortexAnomaly.OnVortexBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVortexAnomaly::OnVortexBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VortexAnomaly", "OnVortexBeginOverlap");

	Params::VortexAnomaly_OnVortexBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VortexAnomaly.OnVortexEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVortexAnomaly::OnVortexEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VortexAnomaly", "OnVortexEndOverlap");

	Params::VortexAnomaly_OnVortexEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VortexAnomaly.OnVortexSafeZoneBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFromSweep                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AVortexAnomaly::OnVortexSafeZoneBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex, const bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VortexAnomaly", "OnVortexSafeZoneBeginOverlap");

	Params::VortexAnomaly_OnVortexSafeZoneBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.VortexAnomaly.OnVortexSafeZoneEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             OtherBodyIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVortexAnomaly::OnVortexSafeZoneEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VortexAnomaly", "OnVortexSafeZoneEndOverlap");

	Params::VortexAnomaly_OnVortexSafeZoneEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WanderingLightsArchiAnomaly.CreateVFX
// (Final, Native, Protected)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWanderingLightsArchiAnomaly::CreateVFX(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WanderingLightsArchiAnomaly", "CreateVFX");

	Params::WanderingLightsArchiAnomaly_CreateVFX Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WaterComponent.OnBeginOverlap
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedComponent                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWaterComponent::OnBeginOverlap(class AActor* OverlappedComponent, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WaterComponent", "OnBeginOverlap");

	Params::WaterComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WaterComponent.OnEndOverlap
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedComponent                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWaterComponent::OnEndOverlap(class AActor* OverlappedComponent, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WaterComponent", "OnEndOverlap");

	Params::WaterComponent_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WidgetPool.CreateWidgetByPool
// (Final, Native, Private)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UWidgetPool::CreateWidgetByPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WidgetPool", "CreateWidgetByPool");

	Params::WidgetPool_CreateWidgetByPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Stalker2.WildlifeBehaviourInterface.OnEmissionWeatherStarted
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IWildlifeBehaviourInterface::OnEmissionWeatherStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WildlifeBehaviourInterface", "OnEmissionWeatherStarted");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function Stalker2.WorldCompositionAnalyzer.OnLevelLoaded
// (Final, Native, Private)

void UWorldCompositionAnalyzer::OnLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldCompositionAnalyzer", "OnLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMap.MarkerClick
// (Final, Native, Protected)
// Parameters:
// const class UWorldMapMarker*            HoverMarkerWidget                                      (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWorldMap::MarkerClick(const class UWorldMapMarker* HoverMarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMap", "MarkerClick");

	Params::WorldMap_MarkerClick Parms{};

	Parms.HoverMarkerWidget = HoverMarkerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMap.MarkerHover
// (Final, Native, Public)
// Parameters:
// bool                                    bInHovered                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorldMapMarker*                  InHoverMarkerWidget                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWorldMap::MarkerHover(bool bInHovered, class UWorldMapMarker* InHoverMarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMap", "MarkerHover");

	Params::WorldMap_MarkerHover Parms{};

	Parms.bInHovered = bInHovered;
	Parms.InHoverMarkerWidget = InHoverMarkerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapMarker.MarkerClick
// (Final, Native, Public)

void UWorldMapMarker::MarkerClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapMarker", "MarkerClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapMarker.OnMouseHover
// (Final, Native, Public)

void UWorldMapMarker::OnMouseHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapMarker", "OnMouseHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapMarker.OnMouseUnhover
// (Final, Native, Public)

void UWorldMapMarker::OnMouseUnhover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapMarker", "OnMouseUnhover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.MarkerClick
// (Final, Native, Private)
// Parameters:
// const class UWorldMapMarker*            HoverMarkerWidget                                      (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWorldMapPage::MarkerClick(const class UWorldMapMarker* HoverMarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "MarkerClick");

	Params::WorldMapPage_MarkerClick Parms{};

	Parms.HoverMarkerWidget = HoverMarkerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.MarkerHover
// (Final, Native, Private)
// Parameters:
// const bool                              bHovered                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWorldMapMarker*                  HoverMarkerWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWorldMapPage::MarkerHover(const bool bHovered, class UWorldMapMarker* HoverMarkerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "MarkerHover");

	Params::WorldMapPage_MarkerHover Parms{};

	Parms.bHovered = bHovered;
	Parms.HoverMarkerWidget = HoverMarkerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.OnLegendHover
// (Final, Native, Public)

void UWorldMapPage::OnLegendHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "OnLegendHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.OnLegendUnhover
// (Final, Native, Public)

void UWorldMapPage::OnLegendUnhover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "OnLegendUnhover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.OnMarkerSelectorHide
// (Final, Native, Public)

void UWorldMapPage::OnMarkerSelectorHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "OnMarkerSelectorHide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.OnMarkerSelectorShow
// (Final, Native, Public)

void UWorldMapPage::OnMarkerSelectorShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "OnMarkerSelectorShow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.OnPressExit
// (Native, Public)

void UWorldMapPage::OnPressExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "OnPressExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAChangeVisibilityPlayerMarkers
// (Final, Native, Public)

void UWorldMapPage::UIPDAChangeVisibilityPlayerMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAChangeVisibilityPlayerMarkers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDACreatePlayerMarker
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// const EMarkerType                       LandmarkType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   CreateMarkedLocation                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWorldMapPage::UIPDACreatePlayerMarker(const EMarkerType LandmarkType, const struct FVector& CreateMarkedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDACreatePlayerMarker");

	Params::WorldMapPage_UIPDACreatePlayerMarker Parms{};

	Parms.LandmarkType = LandmarkType;
	Parms.CreateMarkedLocation = std::move(CreateMarkedLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDACreateTrackedPlayerMarker
// (Final, Native, Public)

void UWorldMapPage::UIPDACreateTrackedPlayerMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDACreateTrackedPlayerMarker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDADeletePlayerMarker
// (Final, Native, Public)

void UWorldMapPage::UIPDADeletePlayerMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDADeletePlayerMarker");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAMapZoomIn
// (Final, Native, Public)

void UWorldMapPage::UIPDAMapZoomIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAMapZoomIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAMapZoomOut
// (Final, Native, Public)

void UWorldMapPage::UIPDAMapZoomOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAMapZoomOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAMoveToPlayerPosition
// (Final, Native, Public)

void UWorldMapPage::UIPDAMoveToPlayerPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAMoveToPlayerPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationDown
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationDownReleased
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationDownReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationDownReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationLeft
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationLeftReleased
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationLeftReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationLeftReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationRight
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationRightReleased
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationRightReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationRightReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationUp
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDANavigationUpReleased
// (Final, Native, Public)

void UWorldMapPage::UIPDANavigationUpReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDANavigationUpReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAOpenPlayerMarkerSelector
// (Final, Native, Public)

void UWorldMapPage::UIPDAOpenPlayerMarkerSelector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAOpenPlayerMarkerSelector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAOpenQuestInJournal
// (Final, Native, Public)

void UWorldMapPage::UIPDAOpenQuestInJournal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAOpenQuestInJournal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAToggleLegend
// (Final, Native, Public)

void UWorldMapPage::UIPDAToggleLegend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAToggleLegend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UIPDAToggleMarkTracking
// (Final, Native, Public)

void UWorldMapPage::UIPDAToggleMarkTracking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UIPDAToggleMarkTracking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapPage.UpdatePlatformInputMode
// (Final, Native, Public)

void UWorldMapPage::UpdatePlatformInputMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapPage", "UpdatePlatformInputMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapScene.SetCaptureEveryFrame
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWorldMapScene::SetCaptureEveryFrame(bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapScene", "SetCaptureEveryFrame");

	Params::WorldMapScene_SetCaptureEveryFrame Parms{};

	Parms.bIsEnabled = bIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.WorldMapScene.SetMouseUV
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InUV                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWorldMapScene::SetMouseUV(const struct FVector& InUV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapScene", "SetMouseUV");

	Params::WorldMapScene_SetMouseUV Parms{};

	Parms.InUV = std::move(InUV);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.WorldMapScene.SetNotSelectedAreaBrightness
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InBrightness                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWorldMapScene::SetNotSelectedAreaBrightness(float InBrightness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapScene", "SetNotSelectedAreaBrightness");

	Params::WorldMapScene_SetNotSelectedAreaBrightness Parms{};

	Parms.InBrightness = InBrightness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.WorldMapScene.SetOffset
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 InOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWorldMapScene::SetOffset(const struct FVector2D& InOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapScene", "SetOffset");

	Params::WorldMapScene_SetOffset Parms{};

	Parms.InOffset = std::move(InOffset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.WorldMapScene.SetScale
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AWorldMapScene::SetScale(float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapScene", "SetScale");

	Params::WorldMapScene_SetScale Parms{};

	Parms.InScale = InScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Stalker2.WorldMapTooltip.OnVisibilityChangedCallback
// (Final, Native, Public)
// Parameters:
// ESlateVisibility                        SlateVisibility                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWorldMapTooltip::OnVisibilityChangedCallback(ESlateVisibility SlateVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapTooltip", "OnVisibilityChangedCallback");

	Params::WorldMapTooltip_OnVisibilityChangedCallback Parms{};

	Parms.SlateVisibility = SlateVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapZoomContainer.CenterOnCachedLocation
// (Final, Native, Private)

void UWorldMapZoomContainer::CenterOnCachedLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapZoomContainer", "CenterOnCachedLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Stalker2.WorldMapZoomContainer.MoveToPlayerLocation
// (Final, Native, Public)

void UWorldMapZoomContainer::MoveToPlayerLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WorldMapZoomContainer", "MoveToPlayerLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

